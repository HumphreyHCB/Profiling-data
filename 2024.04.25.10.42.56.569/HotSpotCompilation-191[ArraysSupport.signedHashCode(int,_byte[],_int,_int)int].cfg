begin_compilation
  name " HotSpotCompilation-191[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-191[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  date 1714038187842
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v37  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i51 i43 i44 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i41 v34 v510 v60 i168 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v101 i166 v34 i90 i384 v141 v165 v382 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v37 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9672215678312298
stamp: void
=== Inputs ===
condition: v34 
=== Succesors ===
trueSuccessor: v36 
falseSuccessor: v35 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v34 #trueSuccessor: v36 #falseSuccessor: v35  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i459 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i459  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v528 v527 v509 v510 v511 v512 v513 v514 v515 v516 v517 v518 v519 v520 v521 v522 v523 v524 v525 v526 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 215
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v433 i459 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v509 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i459 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i459 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-14091|0xffffffffffffc8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v509 
lastLocationAccess: - 
=== Succesors ===
next: v449 
=== Usages ===
v60 v98 j89 
=== Predecessor ===
v36 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v509 lastLocationAccess: - #next: v449  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i27 i41 i146 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i41 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i3 
y: i26 
=== Succesors ===
=== Usages ===
i53 i90 j92 v98 v101 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v101 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i6 
=== Succesors ===
=== Usages ===
v449 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i41 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v449 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v101 
=== Succesors ===
trueSuccessor: v448 
falseSuccessor: v445 
=== Usages ===
=== Predecessor ===
i459 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v101 #trueSuccessor: v448 #falseSuccessor: v445  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v448 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v457 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v457  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i41 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i41  <|@  <|@
f <@~|@floating>@ <|@
tid i90 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i41 
=== Succesors ===
=== Usages ===
j93 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i41  <|@  <|@
f <@~|@floating>@ <|@
tid j93 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i90 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i90  <|@  <|@
f <@~|@floating>@ <|@
tid j425 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j92 
y: j93 
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j92 y: j93  <|@  <|@
f <@~|@floating>@ <|@
tid j94 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j426 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j425 
y: j94 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j425 y: j94  <|@  <|@
f <@~|@floating>@ <|@
tid j89 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: true
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i459 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i459  <|@  <|@
f <@~|@floating>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@40aab068
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j426 
y: j89 
=== Succesors ===
=== Usages ===
v457 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j426 y: j89  <|@  <|@
f <@~|@floating>@ <|@
tid j436 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i435 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -18715
stableDimension: 0
stamp: i32 [-18715]
stampKind: i32
value: int[-18715|0xffffffffffffb6e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v457 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v97 
=== Succesors ===
trueSuccessor: v456 
falseSuccessor: v453 
=== Usages ===
=== Predecessor ===
v448 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v97 #trueSuccessor: v456 #falseSuccessor: v453  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v455 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v455  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@40aab068
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i459 
=== Succesors ===
=== Usages ===
v455 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i41 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v446 
falseSuccessor: v454 
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v446 #falseSuccessor: v454  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v446 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v444 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v444  <|@  <|@
f <@*|@fixed>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v446 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v458 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v458  <|@  <|@
f <@*|@fixed>@ <|@
tid v458 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v454 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v434 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v434  <|@  <|@
f <@*|@fixed>@ <|@
tid v434 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v445 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v443 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v443  <|@  <|@
f <@*|@fixed>@ <|@
tid v443 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v445 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v442 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v443 v444 
=== Succesors ===
next: v115 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v443 v444 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@40aab068
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i459 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v60 
=== Succesors ===
trueSuccessor: v112 
falseSuccessor: v114 
=== Usages ===
=== Predecessor ===
v442 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v60 #trueSuccessor: v112 #falseSuccessor: v114  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i460 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i460  <|@  <|@
f <@~|@floating>@ <|@
tid v510 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i3 
=== Succesors ===
=== Usages ===
i460 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i3  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i460 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v510 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i83 
=== Predecessor ===
v112 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v510 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i31 i43 i125 i148 i177 i201 i211 i232 i242 i252 i261 i353 i286 i296 i306 i315 i326 i335 i344 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i30 
=== Succesors ===
=== Usages ===
i44 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i43 
y: i1 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i43 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i83 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i460 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i460  <|@  <|@
f <@~|@floating>@ <|@
tid i40 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i44 
y: i83 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i44 y: i83  <|@  <|@
f <@~|@floating>@ <|@
tid i167 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i168 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i167 
=== Succesors ===
=== Usages ===
v165 i166 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i168 
y: i6 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i168 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v165 
trueValue: i168 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v165 trueValue: i168 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i460 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i53 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i41 i27 
=== Succesors ===
=== Usages ===
i27 v13 v511 i128 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i41 i27  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i40 i25 
=== Succesors ===
=== Usages ===
i31 i127 i32 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i40 i25  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 29.5078655028765
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i53 i52 v15 v28 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i166 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i166  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i461 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i461  <|@  <|@
f <@~|@floating>@ <|@
tid v511 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i53 
=== Succesors ===
=== Usages ===
i461 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i53  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i461 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v511 
lastLocationAccess: - 
=== Succesors ===
next: v28 
=== Usages ===
i85 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v511 lastLocationAccess: - #next: v28  <|@  <|@
f <@~|@floating>@ <|@
tid i31 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i52 
y: i30 
=== Succesors ===
=== Usages ===
i32 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i52 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i32 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i31 
y: i52 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i31 y: i52  <|@  <|@
f <@~|@floating>@ <|@
tid i85 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i461 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i461  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i32 
y: i85 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i32 y: i85  <|@  <|@
f <@~|@floating>@ <|@
tid i27 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i53 
y: i26 
=== Succesors ===
=== Usages ===
i53 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i53 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v28 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i461 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v136 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v136  <|@  <|@
f <@~|@floating>@ <|@
tid i381 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483632
stableDimension: 0
stamp: i32 [-2147483632]
stampKind: i32
value: int[-2147483632|0xffffffff80000010]
=== Inputs ===
=== Succesors ===
=== Usages ===
v382 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v382 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i381 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i381  <|@  <|@
f <@~|@floating>@ <|@
tid i186 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -16
stableDimension: 0
stamp: i32 [-16]
stampKind: i32
value: int[-16|0xfffffffffffffff0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i384 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i384 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i383 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i383  <|@  <|@
f <@~|@floating>@ <|@
tid i191 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v382 
trueValue: i186 
falseValue: i384 
=== Succesors ===
=== Usages ===
v118 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v382 trueValue: i186 falseValue: i384  <|@  <|@
f <@*|@fixed>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v117 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i127 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i52 i352 
=== Succesors ===
=== Usages ===
i125 i126 i150 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i52 i352  <|@  <|@
f <@~|@floating>@ <|@
tid i128 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i53 i380 
=== Succesors ===
=== Usages ===
v118 j479 v512 i151 i380 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i53 i380  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v117 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 29.5078655028765
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 16
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v136 
=== Succesors ===
next: v121 
=== Usages ===
v119 v124 i127 i128 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v136 #next: v121  <|@  <|@
f <@~|@floating>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i128 
y: i191 
=== Succesors ===
=== Usages ===
v121 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i128 y: i191  <|@  <|@
f <@*|@fixed>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.4577716914684906
stamp: void
=== Inputs ===
condition: v118 
=== Succesors ===
trueSuccessor: v120 
falseSuccessor: v119 
=== Usages ===
=== Predecessor ===
v117 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v118 #trueSuccessor: v120 #falseSuccessor: v119  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i462 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i462  <|@  <|@
f <@~|@floating>@ <|@
tid v512 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i128 
=== Succesors ===
=== Usages ===
i462 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i462 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v512 
lastLocationAccess: - 
=== Succesors ===
next: i463 
=== Usages ===
i133 
=== Predecessor ===
v120 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v512 lastLocationAccess: - #next: i463  <|@  <|@
f <@~|@floating>@ <|@
tid j479 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i128 
=== Succesors ===
=== Usages ===
v514 v515 v516 v517 v518 v519 v520 v521 v522 v523 v524 v525 v526 v527 v528 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i128  <|@  <|@
f <@~|@floating>@ <|@
tid v514 <|@
d <@d|@=== Debug Properties ===
displacement: 17
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i463 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i463 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v514 
lastLocationAccess: - 
=== Succesors ===
next: i464 
=== Usages ===
i183 
=== Predecessor ===
i462 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v514 lastLocationAccess: - #next: i464  <|@  <|@
f <@~|@floating>@ <|@
tid v515 <|@
d <@d|@=== Debug Properties ===
displacement: 18
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i464 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i464 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v515 
lastLocationAccess: - 
=== Succesors ===
next: i465 
=== Usages ===
i207 
=== Predecessor ===
i463 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v515 lastLocationAccess: - #next: i465  <|@  <|@
f <@~|@floating>@ <|@
tid v516 <|@
d <@d|@=== Debug Properties ===
displacement: 19
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i465 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i465 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v516 
lastLocationAccess: - 
=== Succesors ===
next: i466 
=== Usages ===
i217 
=== Predecessor ===
i464 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v516 lastLocationAccess: - #next: i466  <|@  <|@
f <@~|@floating>@ <|@
tid v517 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i466 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i466 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v517 
lastLocationAccess: - 
=== Succesors ===
next: i467 
=== Usages ===
i238 
=== Predecessor ===
i465 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v517 lastLocationAccess: - #next: i467  <|@  <|@
f <@~|@floating>@ <|@
tid v518 <|@
d <@d|@=== Debug Properties ===
displacement: 21
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i467 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i467 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v518 
lastLocationAccess: - 
=== Succesors ===
next: i468 
=== Usages ===
i248 
=== Predecessor ===
i466 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v518 lastLocationAccess: - #next: i468  <|@  <|@
f <@~|@floating>@ <|@
tid v519 <|@
d <@d|@=== Debug Properties ===
displacement: 22
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i468 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i468 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v519 
lastLocationAccess: - 
=== Succesors ===
next: i469 
=== Usages ===
i258 
=== Predecessor ===
i467 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v519 lastLocationAccess: - #next: i469  <|@  <|@
f <@~|@floating>@ <|@
tid v520 <|@
d <@d|@=== Debug Properties ===
displacement: 23
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i469 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i469 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v520 
lastLocationAccess: - 
=== Succesors ===
next: i470 
=== Usages ===
i267 
=== Predecessor ===
i468 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v520 lastLocationAccess: - #next: i470  <|@  <|@
f <@~|@floating>@ <|@
tid v521 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i470 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i470 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v521 
lastLocationAccess: - 
=== Succesors ===
next: i471 
=== Usages ===
i292 
=== Predecessor ===
i469 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v521 lastLocationAccess: - #next: i471  <|@  <|@
f <@~|@floating>@ <|@
tid v522 <|@
d <@d|@=== Debug Properties ===
displacement: 25
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i471 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i471 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v522 
lastLocationAccess: - 
=== Succesors ===
next: i472 
=== Usages ===
i302 
=== Predecessor ===
i470 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v522 lastLocationAccess: - #next: i472  <|@  <|@
f <@~|@floating>@ <|@
tid v523 <|@
d <@d|@=== Debug Properties ===
displacement: 26
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i472 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i472 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v523 
lastLocationAccess: - 
=== Succesors ===
next: i473 
=== Usages ===
i312 
=== Predecessor ===
i471 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v523 lastLocationAccess: - #next: i473  <|@  <|@
f <@~|@floating>@ <|@
tid v524 <|@
d <@d|@=== Debug Properties ===
displacement: 27
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i473 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i473 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v524 
lastLocationAccess: - 
=== Succesors ===
next: i474 
=== Usages ===
i321 
=== Predecessor ===
i472 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v524 lastLocationAccess: - #next: i474  <|@  <|@
f <@~|@floating>@ <|@
tid v525 <|@
d <@d|@=== Debug Properties ===
displacement: 28
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i474 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i474 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v525 
lastLocationAccess: - 
=== Succesors ===
next: i475 
=== Usages ===
i332 
=== Predecessor ===
i473 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v525 lastLocationAccess: - #next: i475  <|@  <|@
f <@~|@floating>@ <|@
tid v526 <|@
d <@d|@=== Debug Properties ===
displacement: 29
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i475 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i475 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v526 
lastLocationAccess: - 
=== Succesors ===
next: i476 
=== Usages ===
i341 
=== Predecessor ===
i474 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v526 lastLocationAccess: - #next: i476  <|@  <|@
f <@~|@floating>@ <|@
tid v527 <|@
d <@d|@=== Debug Properties ===
displacement: 30
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i476 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i476 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v527 
lastLocationAccess: - 
=== Succesors ===
next: i477 
=== Usages ===
i350 
=== Predecessor ===
i475 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v527 lastLocationAccess: - #next: i477  <|@  <|@
f <@~|@floating>@ <|@
tid v528 <|@
d <@d|@=== Debug Properties ===
displacement: 31
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i477 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i477 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
=== Succesors ===
next: v124 
=== Usages ===
i359 
=== Predecessor ===
i476 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i127 
y: i30 
=== Succesors ===
=== Usages ===
i126 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i127 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i125 
y: i127 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i125 y: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i133 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i462 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i462  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i126 
y: i133 
=== Succesors ===
=== Usages ===
i178 i177 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i126 y: i133  <|@  <|@
f <@~|@floating>@ <|@
tid i177 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i122 
y: i30 
=== Succesors ===
=== Usages ===
i178 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i122 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i177 
y: i122 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i177 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid i183 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i463 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i463  <|@  <|@
f <@~|@floating>@ <|@
tid i174 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i178 
y: i183 
=== Succesors ===
=== Usages ===
i202 i201 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i178 y: i183  <|@  <|@
f <@~|@floating>@ <|@
tid i201 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i174 
y: i30 
=== Succesors ===
=== Usages ===
i202 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i174 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i202 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i201 
y: i174 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i201 y: i174  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i464 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i464  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i202 
y: i207 
=== Succesors ===
=== Usages ===
i211 i212 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i202 y: i207  <|@  <|@
f <@~|@floating>@ <|@
tid i211 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i198 
y: i30 
=== Succesors ===
=== Usages ===
i212 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i198 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i211 
y: i198 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i211 y: i198  <|@  <|@
f <@~|@floating>@ <|@
tid i217 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i465 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i465  <|@  <|@
f <@~|@floating>@ <|@
tid i210 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i212 
y: i217 
=== Succesors ===
=== Usages ===
i233 i232 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i212 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i210 
y: i30 
=== Succesors ===
=== Usages ===
i233 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i210 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i233 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i232 
y: i210 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i232 y: i210  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i466 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i466  <|@  <|@
f <@~|@floating>@ <|@
tid i229 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i233 
y: i238 
=== Succesors ===
=== Usages ===
i242 i243 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i233 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i229 
y: i30 
=== Succesors ===
=== Usages ===
i243 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i229 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i243 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i242 
y: i229 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i242 y: i229  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i467 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i467  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i243 
y: i248 
=== Succesors ===
=== Usages ===
i252 i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i243 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i241 
y: i30 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i241 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i253 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i252 
y: i241 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i252 y: i241  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i468 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i468  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i253 
y: i258 
=== Succesors ===
=== Usages ===
i261 i262 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i251 
y: i30 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i251 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i251 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i251  <|@  <|@
f <@~|@floating>@ <|@
tid i267 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i469 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i469  <|@  <|@
f <@~|@floating>@ <|@
tid i260 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i262 
y: i267 
=== Succesors ===
=== Usages ===
i287 i286 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i267  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i260 
y: i30 
=== Succesors ===
=== Usages ===
i287 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i260 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i287 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i286 
y: i260 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i286 y: i260  <|@  <|@
f <@~|@floating>@ <|@
tid i292 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i470 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i470  <|@  <|@
f <@~|@floating>@ <|@
tid i283 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i287 
y: i292 
=== Succesors ===
=== Usages ===
i296 i297 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i287 y: i292  <|@  <|@
f <@~|@floating>@ <|@
tid i296 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i283 
y: i30 
=== Succesors ===
=== Usages ===
i297 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i283 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i297 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i296 
y: i283 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i296 y: i283  <|@  <|@
f <@~|@floating>@ <|@
tid i302 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i471 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i471  <|@  <|@
f <@~|@floating>@ <|@
tid i295 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i297 
y: i302 
=== Succesors ===
=== Usages ===
i306 i307 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i297 y: i302  <|@  <|@
f <@~|@floating>@ <|@
tid i306 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i295 
y: i30 
=== Succesors ===
=== Usages ===
i307 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i295 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i307 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i306 
y: i295 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i306 y: i295  <|@  <|@
f <@~|@floating>@ <|@
tid i312 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i472 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i472  <|@  <|@
f <@~|@floating>@ <|@
tid i305 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i307 
y: i312 
=== Succesors ===
=== Usages ===
i315 i316 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i307 y: i312  <|@  <|@
f <@~|@floating>@ <|@
tid i315 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i305 
y: i30 
=== Succesors ===
=== Usages ===
i316 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i305 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i315 
y: i305 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i315 y: i305  <|@  <|@
f <@~|@floating>@ <|@
tid i321 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i473 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i473  <|@  <|@
f <@~|@floating>@ <|@
tid i314 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i316 
y: i321 
=== Succesors ===
=== Usages ===
i326 i327 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i316 y: i321  <|@  <|@
f <@~|@floating>@ <|@
tid i326 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i314 
y: i30 
=== Succesors ===
=== Usages ===
i327 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i314 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i327 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i326 
y: i314 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i326 y: i314  <|@  <|@
f <@~|@floating>@ <|@
tid i332 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i474 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i474  <|@  <|@
f <@~|@floating>@ <|@
tid i325 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i327 
y: i332 
=== Succesors ===
=== Usages ===
i335 i336 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i327 y: i332  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i325 
y: i30 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i325 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i335 
y: i325 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i335 y: i325  <|@  <|@
f <@~|@floating>@ <|@
tid i341 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i475 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i475  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i336 
y: i341 
=== Succesors ===
=== Usages ===
i344 i345 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i336 y: i341  <|@  <|@
f <@~|@floating>@ <|@
tid i344 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i334 
y: i30 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i334 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i345 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i344 
y: i334 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i344 y: i334  <|@  <|@
f <@~|@floating>@ <|@
tid i350 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i476 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i476  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i345 
y: i350 
=== Succesors ===
=== Usages ===
i353 i354 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i345 y: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i353 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i343 
y: i30 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i343 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i353 
y: i343 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i353 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i359 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i477 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i477  <|@  <|@
f <@~|@floating>@ <|@
tid i352 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i354 
y: i359 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i354 y: i359  <|@  <|@
f <@~|@floating>@ <|@
tid i365 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16]
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
i380 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i380 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i365 
=== Succesors ===
=== Usages ===
i128 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i365  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v117 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i477 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v117  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v117 
=== Succesors ===
next: v159 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v117 #next: v159  <|@  <|@
f <@*|@fixed>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
v119 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i150 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i127 i145 
=== Succesors ===
=== Usages ===
i148 i149 i51 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i127 i145  <|@  <|@
f <@~|@floating>@ <|@
tid i151 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i128 i146 
=== Succesors ===
=== Usages ===
v141 i146 v513 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i128 i146  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 29.5078655028765
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v159 
=== Succesors ===
next: v144 
=== Usages ===
v142 v147 i150 i151 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v159 #next: v144  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i6 
=== Succesors ===
=== Usages ===
v144 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i151 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v141 
=== Succesors ===
trueSuccessor: v143 
falseSuccessor: v142 
=== Usages ===
=== Predecessor ===
v140 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v141 #trueSuccessor: v143 #falseSuccessor: v142  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v143 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i478 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i478  <|@  <|@
f <@~|@floating>@ <|@
tid v513 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i151 
=== Succesors ===
=== Usages ===
i478 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i151  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i478 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v513 
lastLocationAccess: - 
=== Succesors ===
next: v147 
=== Usages ===
i156 
=== Predecessor ===
v143 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v513 lastLocationAccess: - #next: v147  <|@  <|@
f <@~|@floating>@ <|@
tid i148 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i150 
y: i30 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i150 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i149 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i148 
y: i150 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i148 y: i150  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i478 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i478  <|@  <|@
f <@~|@floating>@ <|@
tid i145 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i149 
y: i156 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i149 y: i156  <|@  <|@
f <@~|@floating>@ <|@
tid i146 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i151 
y: i26 
=== Succesors ===
=== Usages ===
i151 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i151 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v140 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i478 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v140  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v140 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v140 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v142 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v437 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v437  <|@  <|@
f <@~|@floating>@ <|@
tid j430 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i438 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -15643
stableDimension: 0
stamp: i32 [-15643]
stampKind: i32
value: int[-15643|0xffffffffffffc2e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v437 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v114 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i431 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-18715 - -15643] bits:1...1xxx0x1011100101
valueDescription: i32
=== Inputs ===
merge: v427 
values: i435 i438 i435 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: i435 i438 i435  <|@  <|@
f <@~|@floating>@ <|@
tid j432 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v427 
values: j436 j430 j436 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: j436 j430 j436  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v427 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v434 v437 v458 
=== Succesors ===
next: v433 
=== Usages ===
i431 j432 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v434 v437 v458 #next: v433  <|@  <|@
f <@*|@fixed>@ <|@
tid v433 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i431 
speculation: j432 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v427 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i431 speculation: j432  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v35 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i51 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v46 
values: i150 i1 
=== Succesors ===
=== Usages ===
v29 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v46 values: i150 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v47 v48 
=== Succesors ===
next: v29 
=== Usages ===
i51 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v47 v48 #next: v29  <|@  <|@
f <@*|@fixed>@ <|@
tid v29 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v46 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   -1  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr   -1  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr   -1  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v37  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
result v0|DWORD <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i51 i43 i44 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i41 v34 v510 v60 i168 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
result v4|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v101 i166 v34 i90 i384 v141 v165 v382 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v37 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9672215678312298
stamp: void
=== Inputs ===
condition: v34 
=== Succesors ===
trueSuccessor: v36 
falseSuccessor: v35 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v34 #trueSuccessor: v36 #falseSuccessor: v35  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i459 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i459  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v528 v527 v509 v510 v511 v512 v513 v514 v515 v516 v517 v518 v519 v520 v521 v522 v523 v524 v525 v526 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 215
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v433 i459 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v509 <|@
result [v1|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i459 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i459 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-14091|0xffffffffffffc8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v509 
lastLocationAccess: - 
=== Succesors ===
next: v449 
=== Usages ===
v60 v98 j89 
=== Predecessor ===
v36 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v509 lastLocationAccess: - #next: v449  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i27 i41 i146 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i41 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i3 
y: i26 
=== Succesors ===
=== Usages ===
i53 i90 j92 v98 v101 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v101 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i6 
=== Succesors ===
=== Usages ===
v449 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i41 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v449 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v101 
=== Succesors ===
trueSuccessor: v448 
falseSuccessor: v445 
=== Usages ===
=== Predecessor ===
i459 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v101 #trueSuccessor: v448 #falseSuccessor: v445  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v448 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v457 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v457  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
result v7|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i41 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i41  <|@  <|@
f <@~|@floating>@ <|@
tid i90 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i41 
=== Succesors ===
=== Usages ===
j93 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i41  <|@  <|@
f <@~|@floating>@ <|@
tid j93 <|@
result v9|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i90 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i90  <|@  <|@
f <@~|@floating>@ <|@
tid j425 <|@
result v10|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j92 
y: j93 
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j92 y: j93  <|@  <|@
f <@~|@floating>@ <|@
tid j94 <|@
result long[-1|0xffffffffffffffff] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j426 <|@
result v11|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j425 
y: j94 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j425 y: j94  <|@  <|@
f <@~|@floating>@ <|@
tid j89 <|@
result v12|QWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: true
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i459 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i459  <|@  <|@
f <@~|@floating>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@40aab068
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j426 
y: j89 
=== Succesors ===
=== Usages ===
v457 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j426 y: j89  <|@  <|@
f <@~|@floating>@ <|@
tid j436 <|@
result long[24|0x18] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i435 <|@
result int[-18715|0xffffffffffffb6e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -18715
stableDimension: 0
stamp: i32 [-18715]
stampKind: i32
value: int[-18715|0xffffffffffffb6e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v457 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v97 
=== Succesors ===
trueSuccessor: v456 
falseSuccessor: v453 
=== Usages ===
=== Predecessor ===
v448 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v97 #trueSuccessor: v456 #falseSuccessor: v453  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v455 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v455  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@40aab068
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i459 
=== Succesors ===
=== Usages ===
v455 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i41 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v446 
falseSuccessor: v454 
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v446 #falseSuccessor: v454  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v446 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v444 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v444  <|@  <|@
f <@*|@fixed>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v446 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v458 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v458  <|@  <|@
f <@*|@fixed>@ <|@
tid v458 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v454 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v434 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v434  <|@  <|@
f <@*|@fixed>@ <|@
tid v434 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v445 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v443 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v443  <|@  <|@
f <@*|@fixed>@ <|@
tid v443 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v445 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v442 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v443 v444 
=== Succesors ===
next: v115 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v443 v444 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@40aab068
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i459 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v60 
=== Succesors ===
trueSuccessor: v112 
falseSuccessor: v114 
=== Usages ===
=== Predecessor ===
v442 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v60 #trueSuccessor: v112 #falseSuccessor: v114  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i460 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i460  <|@  <|@
f <@~|@floating>@ <|@
tid v510 <|@
result [v1|QWORD[.] + v2|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i3 
=== Succesors ===
=== Usages ===
i460 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i3  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i460 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v510 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i83 
=== Predecessor ===
v112 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v510 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
result int[5|0x5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i31 i43 i125 i148 i177 i201 i211 i232 i242 i252 i261 i353 i286 i296 i306 i315 i326 i335 i344 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
result v13|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i30 
=== Succesors ===
=== Usages ===
i44 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i43 
y: i1 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i43 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i83 <|@
result v15|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i460 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i460  <|@  <|@
f <@~|@floating>@ <|@
tid i40 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i44 
y: i83 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i44 y: i83  <|@  <|@
f <@~|@floating>@ <|@
tid i167 <|@
result int[2|0x2] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i168 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
result v17|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i167 
=== Succesors ===
=== Usages ===
v165 i166 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i168 
y: i6 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i168 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
result v18|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v165 
trueValue: i168 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v165 trueValue: i168 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i460 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i53 <|@
result v19|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i41 i27 
=== Succesors ===
=== Usages ===
i27 v13 v511 i128 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i41 i27  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
result v20|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i40 i25 
=== Succesors ===
=== Usages ===
i31 i127 i32 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i40 i25  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 29.5078655028765
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i53 i52 v15 v28 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i166 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i166  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i461 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i461  <|@  <|@
f <@~|@floating>@ <|@
tid v511 <|@
result [v1|QWORD[.] + v19|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i53 
=== Succesors ===
=== Usages ===
i461 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i53  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i461 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v511 
lastLocationAccess: - 
=== Succesors ===
next: v28 
=== Usages ===
i85 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v511 lastLocationAccess: - #next: v28  <|@  <|@
f <@~|@floating>@ <|@
tid i31 <|@
result v21|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i52 
y: i30 
=== Succesors ===
=== Usages ===
i32 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i52 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i32 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i31 
y: i52 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i31 y: i52  <|@  <|@
f <@~|@floating>@ <|@
tid i85 <|@
result v23|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i461 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i461  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
result v24|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i32 
y: i85 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i32 y: i85  <|@  <|@
f <@~|@floating>@ <|@
tid i27 <|@
result v25|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i53 
y: i26 
=== Succesors ===
=== Usages ===
i53 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i53 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v28 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i461 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v136 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v136  <|@  <|@
f <@~|@floating>@ <|@
tid i381 <|@
result int[-2147483632|0xffffffff80000010] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483632
stableDimension: 0
stamp: i32 [-2147483632]
stampKind: i32
value: int[-2147483632|0xffffffff80000010]
=== Inputs ===
=== Succesors ===
=== Usages ===
v382 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v382 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i381 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i381  <|@  <|@
f <@~|@floating>@ <|@
tid i186 <|@
result int[-2147483648|0xffffffff80000000] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
result int[-16|0xfffffffffffffff0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -16
stableDimension: 0
stamp: i32 [-16]
stampKind: i32
value: int[-16|0xfffffffffffffff0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i384 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i384 <|@
result v26|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i383 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i383  <|@  <|@
f <@~|@floating>@ <|@
tid i191 <|@
result v27|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v382 
trueValue: i186 
falseValue: i384 
=== Succesors ===
=== Usages ===
v118 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v382 trueValue: i186 falseValue: i384  <|@  <|@
f <@*|@fixed>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v117 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i127 <|@
result v29|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i52 i352 
=== Succesors ===
=== Usages ===
i125 i126 i150 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i52 i352  <|@  <|@
f <@~|@floating>@ <|@
tid i128 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i53 i380 
=== Succesors ===
=== Usages ===
v118 j479 v512 i151 i380 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i53 i380  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v117 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 29.5078655028765
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 16
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v136 
=== Succesors ===
next: v121 
=== Usages ===
v119 v124 i127 i128 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v136 #next: v121  <|@  <|@
f <@~|@floating>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i128 
y: i191 
=== Succesors ===
=== Usages ===
v121 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i128 y: i191  <|@  <|@
f <@*|@fixed>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.4577716914684906
stamp: void
=== Inputs ===
condition: v118 
=== Succesors ===
trueSuccessor: v120 
falseSuccessor: v119 
=== Usages ===
=== Predecessor ===
v117 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v118 #trueSuccessor: v120 #falseSuccessor: v119  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i462 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i462  <|@  <|@
f <@~|@floating>@ <|@
tid v512 <|@
result [v1|QWORD[.] + v30|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i128 
=== Succesors ===
=== Usages ===
i462 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i462 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v512 
lastLocationAccess: - 
=== Succesors ===
next: i463 
=== Usages ===
i133 
=== Predecessor ===
v120 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v512 lastLocationAccess: - #next: i463  <|@  <|@
f <@~|@floating>@ <|@
tid j479 <|@
result v32|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i128 
=== Succesors ===
=== Usages ===
v514 v515 v516 v517 v518 v519 v520 v521 v522 v523 v524 v525 v526 v527 v528 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i128  <|@  <|@
f <@~|@floating>@ <|@
tid v514 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 17] <|@
d <@d|@=== Debug Properties ===
displacement: 17
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i463 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i463 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v514 
lastLocationAccess: - 
=== Succesors ===
next: i464 
=== Usages ===
i183 
=== Predecessor ===
i462 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v514 lastLocationAccess: - #next: i464  <|@  <|@
f <@~|@floating>@ <|@
tid v515 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 18] <|@
d <@d|@=== Debug Properties ===
displacement: 18
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i464 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i464 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v515 
lastLocationAccess: - 
=== Succesors ===
next: i465 
=== Usages ===
i207 
=== Predecessor ===
i463 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v515 lastLocationAccess: - #next: i465  <|@  <|@
f <@~|@floating>@ <|@
tid v516 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 19] <|@
d <@d|@=== Debug Properties ===
displacement: 19
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i465 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i465 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v516 
lastLocationAccess: - 
=== Succesors ===
next: i466 
=== Usages ===
i217 
=== Predecessor ===
i464 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v516 lastLocationAccess: - #next: i466  <|@  <|@
f <@~|@floating>@ <|@
tid v517 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i466 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i466 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v517 
lastLocationAccess: - 
=== Succesors ===
next: i467 
=== Usages ===
i238 
=== Predecessor ===
i465 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v517 lastLocationAccess: - #next: i467  <|@  <|@
f <@~|@floating>@ <|@
tid v518 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 21] <|@
d <@d|@=== Debug Properties ===
displacement: 21
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i467 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i467 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v518 
lastLocationAccess: - 
=== Succesors ===
next: i468 
=== Usages ===
i248 
=== Predecessor ===
i466 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v518 lastLocationAccess: - #next: i468  <|@  <|@
f <@~|@floating>@ <|@
tid v519 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 22] <|@
d <@d|@=== Debug Properties ===
displacement: 22
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i468 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i468 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v519 
lastLocationAccess: - 
=== Succesors ===
next: i469 
=== Usages ===
i258 
=== Predecessor ===
i467 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v519 lastLocationAccess: - #next: i469  <|@  <|@
f <@~|@floating>@ <|@
tid v520 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 23] <|@
d <@d|@=== Debug Properties ===
displacement: 23
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i469 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i469 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v520 
lastLocationAccess: - 
=== Succesors ===
next: i470 
=== Usages ===
i267 
=== Predecessor ===
i468 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v520 lastLocationAccess: - #next: i470  <|@  <|@
f <@~|@floating>@ <|@
tid v521 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i470 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i470 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v521 
lastLocationAccess: - 
=== Succesors ===
next: i471 
=== Usages ===
i292 
=== Predecessor ===
i469 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v521 lastLocationAccess: - #next: i471  <|@  <|@
f <@~|@floating>@ <|@
tid v522 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 25] <|@
d <@d|@=== Debug Properties ===
displacement: 25
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i471 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i471 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v522 
lastLocationAccess: - 
=== Succesors ===
next: i472 
=== Usages ===
i302 
=== Predecessor ===
i470 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v522 lastLocationAccess: - #next: i472  <|@  <|@
f <@~|@floating>@ <|@
tid v523 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 26] <|@
d <@d|@=== Debug Properties ===
displacement: 26
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i472 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i472 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v523 
lastLocationAccess: - 
=== Succesors ===
next: i473 
=== Usages ===
i312 
=== Predecessor ===
i471 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v523 lastLocationAccess: - #next: i473  <|@  <|@
f <@~|@floating>@ <|@
tid v524 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 27] <|@
d <@d|@=== Debug Properties ===
displacement: 27
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i473 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i473 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v524 
lastLocationAccess: - 
=== Succesors ===
next: i474 
=== Usages ===
i321 
=== Predecessor ===
i472 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v524 lastLocationAccess: - #next: i474  <|@  <|@
f <@~|@floating>@ <|@
tid v525 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 28] <|@
d <@d|@=== Debug Properties ===
displacement: 28
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i474 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i474 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v525 
lastLocationAccess: - 
=== Succesors ===
next: i475 
=== Usages ===
i332 
=== Predecessor ===
i473 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v525 lastLocationAccess: - #next: i475  <|@  <|@
f <@~|@floating>@ <|@
tid v526 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 29] <|@
d <@d|@=== Debug Properties ===
displacement: 29
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i475 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i475 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v526 
lastLocationAccess: - 
=== Succesors ===
next: i476 
=== Usages ===
i341 
=== Predecessor ===
i474 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v526 lastLocationAccess: - #next: i476  <|@  <|@
f <@~|@floating>@ <|@
tid v527 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 30] <|@
d <@d|@=== Debug Properties ===
displacement: 30
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i476 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i476 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v527 
lastLocationAccess: - 
=== Succesors ===
next: i477 
=== Usages ===
i350 
=== Predecessor ===
i475 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v527 lastLocationAccess: - #next: i477  <|@  <|@
f <@~|@floating>@ <|@
tid v528 <|@
result [v1|QWORD[.] + v32|QWORD * 1 + 31] <|@
d <@d|@=== Debug Properties ===
displacement: 31
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j479 
=== Succesors ===
=== Usages ===
i477 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j479  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i477 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
=== Succesors ===
next: v124 
=== Usages ===
i359 
=== Predecessor ===
i476 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i127 
y: i30 
=== Succesors ===
=== Usages ===
i126 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i127 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i125 
y: i127 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i125 y: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i133 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i462 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i462  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i126 
y: i133 
=== Succesors ===
=== Usages ===
i178 i177 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i126 y: i133  <|@  <|@
f <@~|@floating>@ <|@
tid i177 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i122 
y: i30 
=== Succesors ===
=== Usages ===
i178 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i122 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i177 
y: i122 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i177 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid i183 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i463 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i463  <|@  <|@
f <@~|@floating>@ <|@
tid i174 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i178 
y: i183 
=== Succesors ===
=== Usages ===
i202 i201 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i178 y: i183  <|@  <|@
f <@~|@floating>@ <|@
tid i201 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i174 
y: i30 
=== Succesors ===
=== Usages ===
i202 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i174 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i202 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i201 
y: i174 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i201 y: i174  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i464 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i464  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
result v55|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i202 
y: i207 
=== Succesors ===
=== Usages ===
i211 i212 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i202 y: i207  <|@  <|@
f <@~|@floating>@ <|@
tid i211 <|@
result v56|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i198 
y: i30 
=== Succesors ===
=== Usages ===
i212 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i198 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
result v57|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i211 
y: i198 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i211 y: i198  <|@  <|@
f <@~|@floating>@ <|@
tid i217 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i465 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i465  <|@  <|@
f <@~|@floating>@ <|@
tid i210 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i212 
y: i217 
=== Succesors ===
=== Usages ===
i233 i232 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i212 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i210 
y: i30 
=== Succesors ===
=== Usages ===
i233 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i210 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i233 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i232 
y: i210 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i232 y: i210  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i466 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i466  <|@  <|@
f <@~|@floating>@ <|@
tid i229 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i233 
y: i238 
=== Succesors ===
=== Usages ===
i242 i243 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i233 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
result v62|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i229 
y: i30 
=== Succesors ===
=== Usages ===
i243 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i229 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i243 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i242 
y: i229 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i242 y: i229  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i467 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i467  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i243 
y: i248 
=== Succesors ===
=== Usages ===
i252 i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i243 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
result v65|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i241 
y: i30 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i241 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i253 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i252 
y: i241 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i252 y: i241  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i468 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i468  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i253 
y: i258 
=== Succesors ===
=== Usages ===
i261 i262 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
result v68|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i251 
y: i30 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i251 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
result v69|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i251 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i251  <|@  <|@
f <@~|@floating>@ <|@
tid i267 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i469 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i469  <|@  <|@
f <@~|@floating>@ <|@
tid i260 <|@
result v70|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i262 
y: i267 
=== Succesors ===
=== Usages ===
i287 i286 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i267  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
result v71|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i260 
y: i30 
=== Succesors ===
=== Usages ===
i287 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i260 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i287 <|@
result v72|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i286 
y: i260 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i286 y: i260  <|@  <|@
f <@~|@floating>@ <|@
tid i292 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i470 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i470  <|@  <|@
f <@~|@floating>@ <|@
tid i283 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i287 
y: i292 
=== Succesors ===
=== Usages ===
i296 i297 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i287 y: i292  <|@  <|@
f <@~|@floating>@ <|@
tid i296 <|@
result v74|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i283 
y: i30 
=== Succesors ===
=== Usages ===
i297 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i283 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i297 <|@
result v75|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i296 
y: i283 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i296 y: i283  <|@  <|@
f <@~|@floating>@ <|@
tid i302 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i471 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i471  <|@  <|@
f <@~|@floating>@ <|@
tid i295 <|@
result v76|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i297 
y: i302 
=== Succesors ===
=== Usages ===
i306 i307 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i297 y: i302  <|@  <|@
f <@~|@floating>@ <|@
tid i306 <|@
result v77|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i295 
y: i30 
=== Succesors ===
=== Usages ===
i307 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i295 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i307 <|@
result v78|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i306 
y: i295 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i306 y: i295  <|@  <|@
f <@~|@floating>@ <|@
tid i312 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i472 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i472  <|@  <|@
f <@~|@floating>@ <|@
tid i305 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i307 
y: i312 
=== Succesors ===
=== Usages ===
i315 i316 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i307 y: i312  <|@  <|@
f <@~|@floating>@ <|@
tid i315 <|@
result v80|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i305 
y: i30 
=== Succesors ===
=== Usages ===
i316 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i305 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
result v81|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i315 
y: i305 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i315 y: i305  <|@  <|@
f <@~|@floating>@ <|@
tid i321 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i473 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i473  <|@  <|@
f <@~|@floating>@ <|@
tid i314 <|@
result v82|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i316 
y: i321 
=== Succesors ===
=== Usages ===
i326 i327 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i316 y: i321  <|@  <|@
f <@~|@floating>@ <|@
tid i326 <|@
result v83|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i314 
y: i30 
=== Succesors ===
=== Usages ===
i327 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i314 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i327 <|@
result v84|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i326 
y: i314 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i326 y: i314  <|@  <|@
f <@~|@floating>@ <|@
tid i332 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i474 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i474  <|@  <|@
f <@~|@floating>@ <|@
tid i325 <|@
result v85|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i327 
y: i332 
=== Succesors ===
=== Usages ===
i335 i336 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i327 y: i332  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
result v86|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i325 
y: i30 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i325 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
result v87|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i335 
y: i325 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i335 y: i325  <|@  <|@
f <@~|@floating>@ <|@
tid i341 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i475 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i475  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
result v88|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i336 
y: i341 
=== Succesors ===
=== Usages ===
i344 i345 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i336 y: i341  <|@  <|@
f <@~|@floating>@ <|@
tid i344 <|@
result v89|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i334 
y: i30 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i334 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i345 <|@
result v90|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i344 
y: i334 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i344 y: i334  <|@  <|@
f <@~|@floating>@ <|@
tid i350 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i476 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i476  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
result v91|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i345 
y: i350 
=== Succesors ===
=== Usages ===
i353 i354 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i345 y: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i353 <|@
result v92|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i343 
y: i30 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i343 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
result v93|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i353 
y: i343 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i353 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i359 <|@
result v94|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i477 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i477  <|@  <|@
f <@~|@floating>@ <|@
tid i352 <|@
result v95|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i354 
y: i359 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i354 y: i359  <|@  <|@
f <@~|@floating>@ <|@
tid i365 <|@
result int[16|0x10] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16]
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
i380 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i380 <|@
result v96|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i365 
=== Succesors ===
=== Usages ===
i128 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i365  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v117 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i477 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v117  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v117 
=== Succesors ===
next: v159 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v117 #next: v159  <|@  <|@
f <@*|@fixed>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
v119 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i150 <|@
result v97|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i127 i145 
=== Succesors ===
=== Usages ===
i148 i149 i51 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i127 i145  <|@  <|@
f <@~|@floating>@ <|@
tid i151 <|@
result v98|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i128 i146 
=== Succesors ===
=== Usages ===
v141 i146 v513 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i128 i146  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 29.5078655028765
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v159 
=== Succesors ===
next: v144 
=== Usages ===
v142 v147 i150 i151 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v159 #next: v144  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@4dc6bd49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i6 
=== Succesors ===
=== Usages ===
v144 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i151 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v141 
=== Succesors ===
trueSuccessor: v143 
falseSuccessor: v142 
=== Usages ===
=== Predecessor ===
v140 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v141 #trueSuccessor: v143 #falseSuccessor: v142  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v143 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i478 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i478  <|@  <|@
f <@~|@floating>@ <|@
tid v513 <|@
result [v1|QWORD[.] + v98|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i151 
=== Succesors ===
=== Usages ===
i478 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i151  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i478 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v513 
lastLocationAccess: - 
=== Succesors ===
next: v147 
=== Usages ===
i156 
=== Predecessor ===
v143 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v513 lastLocationAccess: - #next: v147  <|@  <|@
f <@~|@floating>@ <|@
tid i148 <|@
result v99|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i150 
y: i30 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i150 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i149 <|@
result v100|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i148 
y: i150 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i148 y: i150  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
result v101|DWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: false
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i478 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i478  <|@  <|@
f <@~|@floating>@ <|@
tid i145 <|@
result v102|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i149 
y: i156 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i149 y: i156  <|@  <|@
f <@~|@floating>@ <|@
tid i146 <|@
result v103|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i151 
y: i26 
=== Succesors ===
=== Usages ===
i151 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i151 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v140 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i478 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v140  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v140 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v140 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v142 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v437 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v437  <|@  <|@
f <@~|@floating>@ <|@
tid j430 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i438 <|@
result int[-15643|0xffffffffffffc2e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -15643
stableDimension: 0
stamp: i32 [-15643]
stampKind: i32
value: int[-15643|0xffffffffffffc2e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v437 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v114 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i431 <|@
result v104|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-18715 - -15643] bits:1...1xxx0x1011100101
valueDescription: i32
=== Inputs ===
merge: v427 
values: i435 i438 i435 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: i435 i438 i435  <|@  <|@
f <@~|@floating>@ <|@
tid j432 <|@
result v105|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v427 
values: j436 j430 j436 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: j436 j430 j436  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v427 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v434 v437 v458 
=== Succesors ===
next: v433 
=== Usages ===
i431 j432 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v434 v437 v458 #next: v433  <|@  <|@
f <@*|@fixed>@ <|@
tid v433 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i431 
speculation: j432 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v427 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i431 speculation: j432  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v35 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i51 <|@
result v106|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v46 
values: i150 i1 
=== Succesors ===
=== Usages ===
v29 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v46 values: i150 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v47 v48 
=== Succesors ===
next: v29 
=== Usages ===
i51 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v47 v48 #next: v29  <|@  <|@
f <@*|@fixed>@ <|@
tid v29 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v46 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   -1  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr   -1  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr   -1  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   -1  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr   -1  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr   -1  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   -1  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr   -1  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr   -1  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   -1  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr   -1  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr   -1  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   92  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr  104  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  280  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   92  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr  104  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  280  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v106|d [0, 1[[274, 276[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[v0|d]" v0|d rsi|d [6, 63[[278, 281[[282, 301[6 MustHaveRegister 60 MustHaveRegister 62 ShouldHaveRegister 280 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|q [8, 268[[282, 301[8 MustHaveRegister 20 MustHaveRegister 64 MustHaveRegister 86 MustHaveRegister 93 LiveAtLoopEnd 112 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|d [10, 68[[282, 301[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 64 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d r8|d [12, 58[[282, 301[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d v2|d [14, 268[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 70 MustHaveRegister 72 ShouldHaveRegister 96 MustHaveRegister 98 ShouldHaveRegister 252 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d v2|d [22, 75[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[v7|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[v10|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[v12|q]" v12|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[v13|d]" v13|d v0|d [60, 62[60 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d v13|d [62, 66[62 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[v15|d]" v15|d -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d v14|d [66, 75[66 MustHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[v17|d]" v17|d -1 [68, 73[68 MustHaveRegister 70 ShouldHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[v18|d]" v18|d v4|d [72, 94[72 MustHaveRegister 78 MustHaveRegister 93 LiveAtLoopEnd  "NoSpillStore"
  v19|d DWORD "[v19|d]" v19|d v6|d [76, 90[[94, 105[78 ShouldHaveRegister 86 MustHaveRegister 90 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[v20|d]" v20|d v16|d [76, 85[[94, 105[82 MustHaveRegister 84 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[v21|d]" v21|d v20|d [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[v22|d]" v22|d v21|d [84, 88[84 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[v23|d]" v23|d -1 [86, 88[86 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[v24|d]" v24|d v22|d [88, 93[88 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[v25|d]" v25|d v19|d [90, 93[90 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[v26|d]" v26|d -1 [96, 102[96 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[v27|d]" v27|d v26|d [102, 246[102 MustHaveRegister 108 MustHaveRegister 245 LiveAtLoopEnd  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d -1 [100, 103[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d v20|d [106, 147[[246, 249[144 MustHaveRegister 146 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d v19|d [106, 242[[246, 249[108 ShouldHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister 242 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d -1 [112, 148[112 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v32|q QWORD "[v32|q]" v32|q -1 [114, 238[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 238 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d -1 [116, 154[116 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[v34|d]" v34|d -1 [118, 160[118 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d -1 [120, 166[120 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[v36|d]" v36|d -1 [122, 172[122 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d -1 [124, 178[124 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d -1 [126, 184[126 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [128, 190[128 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d -1 [130, 196[130 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d -1 [132, 202[132 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d -1 [134, 208[134 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [136, 214[136 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[v44|d]" v44|d -1 [138, 220[138 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d -1 [140, 226[140 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d -1 [142, 232[142 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d v29|d [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d v47|d [146, 148[146 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d v48|d [148, 153[148 MustHaveRegister 150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d v50|d [152, 154[152 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[v52|d]" v52|d v51|d [154, 159[154 MustHaveRegister 156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[v53|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[v54|d]" v54|d v53|d [158, 160[158 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[v55|d]" v55|d v54|d [160, 165[160 MustHaveRegister 162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[v56|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[v57|d]" v57|d v56|d [164, 166[164 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d v57|d [166, 171[166 MustHaveRegister 168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d v59|d [170, 172[170 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d v60|d [172, 177[172 MustHaveRegister 174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[v62|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v62|d [176, 178[176 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d v63|d [178, 183[178 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[v65|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d v65|d [182, 184[182 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[v67|d]" v67|d v66|d [184, 189[184 MustHaveRegister 186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[v68|d]" v68|d v67|d [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[v69|d]" v69|d v68|d [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[v70|d]" v70|d v69|d [190, 195[190 MustHaveRegister 192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[v71|d]" v71|d v70|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[v72|d]" v72|d v71|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[v73|d]" v73|d v72|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[v74|d]" v74|d v73|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[v75|d]" v75|d v74|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[v76|d]" v76|d v75|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[v77|d]" v77|d v76|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[v78|d]" v78|d v77|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[v79|d]" v79|d v78|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[v80|d]" v80|d v79|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[v81|d]" v81|d v80|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[v82|d]" v82|d v81|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[v83|d]" v83|d v82|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[v84|d]" v84|d v83|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[v85|d]" v85|d v84|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[v86|d]" v86|d v85|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[v87|d]" v87|d v86|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[v88|d]" v88|d v87|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[v89|d]" v89|d v88|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[v90|d]" v90|d v89|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[v91|d]" v91|d v90|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[v92|d]" v92|d v91|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[v93|d]" v93|d v92|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[v94|d]" v94|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[v95|d]" v95|d v93|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[v96|d]" v96|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[v97|d]" v97|d v29|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[v98|d]" v98|d v30|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[v99|d]" v99|d v97|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[v100|d]" v100|d v99|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[v101|d]" v101|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[v102|d]" v102|d v100|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[v103|d]" v103|d v98|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[v104|d]" v104|d -1 [294, 296[296 MustHaveRegister  "NoSpillStore"
  v105|q QWORD "[v105|q]" v105|q -1 [294, 298[298 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[v106|d]" v106|d v97|d [272, 274[274 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v106|d [0, 1[[274, 276[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 63[[278, 281[[282, 301[6 MustHaveRegister 60 MustHaveRegister 62 ShouldHaveRegister 280 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 268[[282, 301[8 MustHaveRegister 20 MustHaveRegister 64 MustHaveRegister 86 MustHaveRegister 93 LiveAtLoopEnd 112 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 68[[282, 301[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 64 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 58[[282, 301[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [14, 106[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 70 MustHaveRegister 72 ShouldHaveRegister 96 MustHaveRegister 98 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [22, 75[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[r10|d]" v13|d v0|d [60, 62[60 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r10|d]" v14|d v13|d [62, 66[62 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d v14|d [66, 75[66 MustHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d -1 [68, 73[68 MustHaveRegister 70 ShouldHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[r9|d]" v18|d v4|d [72, 94[72 MustHaveRegister 78 MustHaveRegister 93 LiveAtLoopEnd  "NoSpillStore"
  v19|d DWORD "[r11|d]" v19|d v6|d [76, 90[[94, 105[78 ShouldHaveRegister 86 MustHaveRegister 90 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[r10|d]" v20|d v16|d [76, 85[[94, 105[82 MustHaveRegister 84 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v20|d [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[r8|d]" v22|d v21|d [84, 88[84 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d -1 [86, 88[86 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d v22|d [88, 93[88 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r11|d]" v25|d v19|d [90, 93[90 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r8|d]" v26|d -1 [96, 102[96 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r8|d]" v27|d v26|d [102, 110[102 MustHaveRegister 108 MustHaveRegister  "SpillInDominator"
  v28|d DWORD "[r9|d]" v28|d -1 [100, 103[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[r10|d]" v29|d v20|d [106, 147[[246, 249[144 MustHaveRegister 146 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[r11|d]" v30|d v19|d [106, 131[108 ShouldHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister  "OneSpillStore"
  v31|d DWORD "[r9|d]" v31|d -1 [112, 148[112 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v32|q QWORD "[rcx|q]" v32|q -1 [114, 143[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister  "OneSpillStore"
  v33|d DWORD "[rbx|d]" v33|d -1 [116, 154[116 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[rdi|d]" v34|d -1 [118, 160[118 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rsi|d]" v35|d -1 [120, 166[120 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbp|d]" v36|d -1 [122, 172[122 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[r13|d]" v37|d -1 [124, 178[124 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[r14|d]" v38|d -1 [126, 184[126 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rax|d]" v39|d -1 [128, 190[128 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[r8|d]" v40|d -1 [130, 196[130 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[r11|d]" v41|d -1 [132, 133[132 MustHaveRegister  "OneSpillStore"
  v42|d DWORD "[r11|d]" v42|d -1 [134, 135[134 MustHaveRegister  "OneSpillStore"
  v43|d DWORD "[r11|d]" v43|d -1 [136, 137[136 MustHaveRegister  "OneSpillStore"
  v44|d DWORD "[r11|d]" v44|d -1 [138, 139[138 MustHaveRegister  "OneSpillStore"
  v45|d DWORD "[r11|d]" v45|d -1 [140, 141[140 MustHaveRegister  "OneSpillStore"
  v46|d DWORD "[r11|d]" v46|d -1 [142, 232[142 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rcx|d]" v47|d v29|d [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rcx|d]" v48|d v47|d [146, 148[146 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[rcx|d]" v49|d v48|d [148, 153[148 MustHaveRegister 150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[r10|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[r10|d]" v51|d v50|d [152, 154[152 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r10|d]" v52|d v51|d [154, 159[154 MustHaveRegister 156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[r9|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r9|d]" v54|d v53|d [158, 160[158 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r9|d]" v55|d v54|d [160, 165[160 MustHaveRegister 162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[r10|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[r10|d]" v57|d v56|d [164, 166[164 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d v57|d [166, 171[166 MustHaveRegister 168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r9|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r9|d]" v60|d v59|d [170, 172[170 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r9|d]" v61|d v60|d [172, 177[172 MustHaveRegister 174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[r10|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[r10|d]" v63|d v62|d [176, 178[176 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d v63|d [178, 183[178 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r9|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r9|d]" v66|d v65|d [182, 184[182 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r9|d]" v67|d v66|d [184, 189[184 MustHaveRegister 186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[r10|d]" v68|d v67|d [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r10|d]" v69|d v68|d [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r10|d]" v70|d v69|d [190, 195[190 MustHaveRegister 192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[rax|d]" v71|d v70|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[rax|d]" v72|d v71|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[rax|d]" v73|d v72|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r10|d]" v74|d v73|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r10|d]" v75|d v74|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d v75|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[rax|d]" v77|d v76|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[rax|d]" v78|d v77|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rax|d]" v79|d v78|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[r10|d]" v80|d v79|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r10|d]" v81|d v80|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d v82|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[rax|d]" v84|d v83|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rax|d]" v85|d v84|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[r10|d]" v86|d v85|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[r10|d]" v87|d v86|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r10|d]" v88|d v87|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[rax|d]" v89|d v88|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rax|d]" v90|d v89|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[r10|d]" v92|d v91|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[r10|d]" v93|d v92|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[rax|d]" v94|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[r10|d]" v95|d v93|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[rax|d]" v96|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[r10|d]" v97|d v29|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r11|d]" v98|d v30|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[r8|d]" v99|d v97|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[r8|d]" v100|d v99|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[r8|d]" v102|d v100|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[r11|d]" v103|d v98|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r10|d]" v104|d -1 [294, 296[296 MustHaveRegister  "NoSpillStore"
  v105|q QWORD "[r11|q]" v105|q -1 [294, 298[298 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[r10|d]" v106|d v97|d [272, 274[274 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[rax|d]" v4|d v4|d [250, 268[252 MustHaveRegister 267 LiveAtLoopEnd  "SpillInDominator"
  v108|d DWORD "[vstack:0|d]" v4|d v4|d [106, 250[ "SpillInDominator"
  v109|d DWORD "[vstack:1|d]" v27|d v27|d [110, 246[245 LiveAtLoopEnd  "SpillInDominator"
  v110|d DWORD "[r11|d]" v30|d v30|d [241, 242[[246, 249[242 MustHaveRegister 248 ShouldHaveRegister  "OneSpillStore"
  v111|d DWORD "[vstack:2|d]" v30|d v30|d [131, 241[ "OneSpillStore"
  v112|d DWORD "[vstack:3|d]" v41|d v41|d [133, 202[202 ShouldHaveRegister  "OneSpillStore"
  v113|d DWORD "[vstack:4|d]" v42|d v42|d [135, 208[208 ShouldHaveRegister  "OneSpillStore"
  v114|d DWORD "[vstack:5|d]" v43|d v43|d [137, 214[214 ShouldHaveRegister  "OneSpillStore"
  v115|d DWORD "[vstack:6|d]" v44|d v44|d [139, 220[220 ShouldHaveRegister  "OneSpillStore"
  v116|d DWORD "[vstack:7|d]" v45|d v45|d [141, 226[226 ShouldHaveRegister  "OneSpillStore"
  v117|q QWORD "[rcx|q]" v32|q v32|q [237, 238[238 MustHaveRegister  "OneSpillStore"
  v118|q QWORD "[vstack:8|q]" v32|q v32|q [143, 237[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   92  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr  104  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = MOVE v30|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE v41|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE v42|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  136  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = MOVE v43|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = MOVE v44|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  140  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVE v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|QWORD = MOVE v32|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|QWORD = MOVE v118|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE v111|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  280  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v106|d [0, 1[[274, 276[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 63[[278, 281[[282, 301[6 MustHaveRegister 60 MustHaveRegister 62 ShouldHaveRegister 280 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 268[[282, 301[8 MustHaveRegister 20 MustHaveRegister 64 MustHaveRegister 86 MustHaveRegister 93 LiveAtLoopEnd 112 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 68[[282, 301[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 64 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 58[[282, 301[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [14, 106[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 70 MustHaveRegister 72 ShouldHaveRegister 96 MustHaveRegister 98 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [22, 75[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[r10|d]" v13|d v0|d [60, 62[60 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r10|d]" v14|d v13|d [62, 66[62 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d v14|d [66, 75[66 MustHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d -1 [68, 73[68 MustHaveRegister 70 ShouldHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[r9|d]" v18|d v4|d [72, 94[72 MustHaveRegister 78 MustHaveRegister 93 LiveAtLoopEnd  "NoSpillStore"
  v19|d DWORD "[r11|d]" v19|d v6|d [76, 90[[94, 105[78 ShouldHaveRegister 86 MustHaveRegister 90 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[r10|d]" v20|d v16|d [76, 85[[94, 105[82 MustHaveRegister 84 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v20|d [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[r8|d]" v22|d v21|d [84, 88[84 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d -1 [86, 88[86 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d v22|d [88, 93[88 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r11|d]" v25|d v19|d [90, 93[90 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r8|d]" v26|d -1 [96, 102[96 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r8|d]" v27|d v26|d [102, 110[102 MustHaveRegister 108 MustHaveRegister  "StoreAtDefinition"
  v28|d DWORD "[r9|d]" v28|d -1 [100, 103[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[r10|d]" v29|d v20|d [106, 147[[246, 249[144 MustHaveRegister 146 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[r11|d]" v30|d v19|d [106, 131[108 ShouldHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister  "OneSpillStore"
  v31|d DWORD "[r9|d]" v31|d -1 [112, 148[112 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v32|q QWORD "[rcx|q]" v32|q -1 [114, 143[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister  "OneSpillStore"
  v33|d DWORD "[rbx|d]" v33|d -1 [116, 154[116 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[rdi|d]" v34|d -1 [118, 160[118 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rsi|d]" v35|d -1 [120, 166[120 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbp|d]" v36|d -1 [122, 172[122 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[r13|d]" v37|d -1 [124, 178[124 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[r14|d]" v38|d -1 [126, 184[126 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rax|d]" v39|d -1 [128, 190[128 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[r8|d]" v40|d -1 [130, 196[130 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[r11|d]" v41|d -1 [132, 133[132 MustHaveRegister  "OneSpillStore"
  v42|d DWORD "[r11|d]" v42|d -1 [134, 135[134 MustHaveRegister  "OneSpillStore"
  v43|d DWORD "[r11|d]" v43|d -1 [136, 137[136 MustHaveRegister  "OneSpillStore"
  v44|d DWORD "[r11|d]" v44|d -1 [138, 139[138 MustHaveRegister  "OneSpillStore"
  v45|d DWORD "[r11|d]" v45|d -1 [140, 141[140 MustHaveRegister  "OneSpillStore"
  v46|d DWORD "[r11|d]" v46|d -1 [142, 232[142 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rcx|d]" v47|d v29|d [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rcx|d]" v48|d v47|d [146, 148[146 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[rcx|d]" v49|d v48|d [148, 153[148 MustHaveRegister 150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[r10|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[r10|d]" v51|d v50|d [152, 154[152 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r10|d]" v52|d v51|d [154, 159[154 MustHaveRegister 156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[r9|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r9|d]" v54|d v53|d [158, 160[158 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r9|d]" v55|d v54|d [160, 165[160 MustHaveRegister 162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[r10|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[r10|d]" v57|d v56|d [164, 166[164 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d v57|d [166, 171[166 MustHaveRegister 168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r9|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r9|d]" v60|d v59|d [170, 172[170 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r9|d]" v61|d v60|d [172, 177[172 MustHaveRegister 174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[r10|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[r10|d]" v63|d v62|d [176, 178[176 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d v63|d [178, 183[178 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r9|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r9|d]" v66|d v65|d [182, 184[182 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r9|d]" v67|d v66|d [184, 189[184 MustHaveRegister 186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[r10|d]" v68|d v67|d [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r10|d]" v69|d v68|d [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r10|d]" v70|d v69|d [190, 195[190 MustHaveRegister 192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[rax|d]" v71|d v70|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[rax|d]" v72|d v71|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[rax|d]" v73|d v72|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r10|d]" v74|d v73|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r10|d]" v75|d v74|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d v75|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[rax|d]" v77|d v76|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[rax|d]" v78|d v77|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rax|d]" v79|d v78|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[r10|d]" v80|d v79|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r10|d]" v81|d v80|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d v82|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[rax|d]" v84|d v83|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rax|d]" v85|d v84|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[r10|d]" v86|d v85|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[r10|d]" v87|d v86|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r10|d]" v88|d v87|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[rax|d]" v89|d v88|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rax|d]" v90|d v89|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[r10|d]" v92|d v91|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[r10|d]" v93|d v92|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[rax|d]" v94|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[r10|d]" v95|d v93|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[rax|d]" v96|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[r10|d]" v97|d v29|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r11|d]" v98|d v30|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[r8|d]" v99|d v97|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[r8|d]" v100|d v99|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[r8|d]" v102|d v100|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[r11|d]" v103|d v98|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r10|d]" v104|d -1 [294, 296[296 MustHaveRegister  "NoSpillStore"
  v105|q QWORD "[r11|q]" v105|q -1 [294, 298[298 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[r10|d]" v106|d v97|d [272, 274[274 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[rax|d]" v4|d v4|d [250, 268[252 MustHaveRegister 267 LiveAtLoopEnd  "SpillInDominator"
  v108|d DWORD "[vstack:0|d]" v4|d v4|d [106, 250[ "SpillInDominator"
  v109|d DWORD "[vstack:1|d]" v27|d v27|d [110, 246[245 LiveAtLoopEnd  "StoreAtDefinition"
  v110|d DWORD "[r11|d]" v30|d v30|d [241, 242[[246, 249[242 MustHaveRegister 248 ShouldHaveRegister  "OneSpillStore"
  v111|d DWORD "[vstack:2|d]" v30|d v30|d [131, 241[ "OneSpillStore"
  v112|d DWORD "[vstack:3|d]" v41|d v41|d [133, 202[202 ShouldHaveRegister  "OneSpillStore"
  v113|d DWORD "[vstack:4|d]" v42|d v42|d [135, 208[208 ShouldHaveRegister  "OneSpillStore"
  v114|d DWORD "[vstack:5|d]" v43|d v43|d [137, 214[214 ShouldHaveRegister  "OneSpillStore"
  v115|d DWORD "[vstack:6|d]" v44|d v44|d [139, 220[220 ShouldHaveRegister  "OneSpillStore"
  v116|d DWORD "[vstack:7|d]" v45|d v45|d [141, 226[226 ShouldHaveRegister  "OneSpillStore"
  v117|q QWORD "[rcx|q]" v32|q v32|q [237, 238[238 MustHaveRegister  "OneSpillStore"
  v118|q QWORD "[vstack:8|q]" v32|q v32|q [143, 237[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[v6|DWORD, v16|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   92  <|@ instruction JUMP ~[v25|DWORD, v24|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr  104  <|@ instruction JUMP ~[v20|DWORD, v19|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = MOVE v30|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE v41|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE v42|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  136  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = MOVE v43|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = MOVE v44|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  140  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVE v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|QWORD = MOVE v32|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|QWORD = MOVE v118|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE v111|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~[v95|DWORD, v96|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~[v29|DWORD, v30|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~[v102|DWORD, v103|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[v97|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  280  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~[int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~[int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v106|d [0, 1[[274, 276[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 63[[278, 281[[282, 301[6 MustHaveRegister 60 MustHaveRegister 62 ShouldHaveRegister 280 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 268[[282, 301[8 MustHaveRegister 20 MustHaveRegister 64 MustHaveRegister 86 MustHaveRegister 93 LiveAtLoopEnd 112 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 68[[282, 301[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 64 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 58[[282, 301[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [14, 106[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 70 MustHaveRegister 72 ShouldHaveRegister 96 MustHaveRegister 98 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [22, 75[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[r10|d]" v13|d v0|d [60, 62[60 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r10|d]" v14|d v13|d [62, 66[62 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d v14|d [66, 75[66 MustHaveRegister 74 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d -1 [68, 73[68 MustHaveRegister 70 ShouldHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[r9|d]" v18|d v4|d [72, 94[72 MustHaveRegister 78 MustHaveRegister 93 LiveAtLoopEnd  "NoSpillStore"
  v19|d DWORD "[r11|d]" v19|d v6|d [76, 90[[94, 105[78 ShouldHaveRegister 86 MustHaveRegister 90 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[r10|d]" v20|d v16|d [76, 85[[94, 105[82 MustHaveRegister 84 ShouldHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v20|d [82, 84[82 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[r8|d]" v22|d v21|d [84, 88[84 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d -1 [86, 88[86 MustHaveRegister 88 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d v22|d [88, 93[88 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r11|d]" v25|d v19|d [90, 93[90 MustHaveRegister 92 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r8|d]" v26|d -1 [96, 102[96 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r8|d]" v27|d v26|d [102, 110[102 MustHaveRegister 108 MustHaveRegister  "StoreAtDefinition"
  v28|d DWORD "[r9|d]" v28|d -1 [100, 103[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[r10|d]" v29|d v20|d [106, 147[[246, 249[144 MustHaveRegister 146 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[r11|d]" v30|d v19|d [106, 131[108 ShouldHaveRegister 112 MustHaveRegister 114 ShouldHaveRegister  "OneSpillStore"
  v31|d DWORD "[r9|d]" v31|d -1 [112, 148[112 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v32|q QWORD "[rcx|q]" v32|q -1 [114, 143[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister 120 MustHaveRegister 122 MustHaveRegister 124 MustHaveRegister 126 MustHaveRegister 128 MustHaveRegister 130 MustHaveRegister 132 MustHaveRegister 134 MustHaveRegister 136 MustHaveRegister 138 MustHaveRegister 140 MustHaveRegister 142 MustHaveRegister  "OneSpillStore"
  v33|d DWORD "[rbx|d]" v33|d -1 [116, 154[116 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[rdi|d]" v34|d -1 [118, 160[118 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rsi|d]" v35|d -1 [120, 166[120 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbp|d]" v36|d -1 [122, 172[122 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[r13|d]" v37|d -1 [124, 178[124 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[r14|d]" v38|d -1 [126, 184[126 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rax|d]" v39|d -1 [128, 190[128 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[r8|d]" v40|d -1 [130, 196[130 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[r11|d]" v41|d -1 [132, 133[132 MustHaveRegister  "OneSpillStore"
  v42|d DWORD "[r11|d]" v42|d -1 [134, 135[134 MustHaveRegister  "OneSpillStore"
  v43|d DWORD "[r11|d]" v43|d -1 [136, 137[136 MustHaveRegister  "OneSpillStore"
  v44|d DWORD "[r11|d]" v44|d -1 [138, 139[138 MustHaveRegister  "OneSpillStore"
  v45|d DWORD "[r11|d]" v45|d -1 [140, 141[140 MustHaveRegister  "OneSpillStore"
  v46|d DWORD "[r11|d]" v46|d -1 [142, 232[142 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rcx|d]" v47|d v29|d [144, 146[144 MustHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rcx|d]" v48|d v47|d [146, 148[146 MustHaveRegister 148 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[rcx|d]" v49|d v48|d [148, 153[148 MustHaveRegister 150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[r10|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[r10|d]" v51|d v50|d [152, 154[152 MustHaveRegister 154 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r10|d]" v52|d v51|d [154, 159[154 MustHaveRegister 156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[r9|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r9|d]" v54|d v53|d [158, 160[158 MustHaveRegister 160 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r9|d]" v55|d v54|d [160, 165[160 MustHaveRegister 162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[r10|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[r10|d]" v57|d v56|d [164, 166[164 MustHaveRegister 166 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d v57|d [166, 171[166 MustHaveRegister 168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r9|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r9|d]" v60|d v59|d [170, 172[170 MustHaveRegister 172 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r9|d]" v61|d v60|d [172, 177[172 MustHaveRegister 174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[r10|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[r10|d]" v63|d v62|d [176, 178[176 MustHaveRegister 178 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d v63|d [178, 183[178 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r9|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r9|d]" v66|d v65|d [182, 184[182 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r9|d]" v67|d v66|d [184, 189[184 MustHaveRegister 186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[r10|d]" v68|d v67|d [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r10|d]" v69|d v68|d [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r10|d]" v70|d v69|d [190, 195[190 MustHaveRegister 192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[rax|d]" v71|d v70|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[rax|d]" v72|d v71|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[rax|d]" v73|d v72|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r10|d]" v74|d v73|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r10|d]" v75|d v74|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d v75|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[rax|d]" v77|d v76|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[rax|d]" v78|d v77|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rax|d]" v79|d v78|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[r10|d]" v80|d v79|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r10|d]" v81|d v80|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d v82|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[rax|d]" v84|d v83|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rax|d]" v85|d v84|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[r10|d]" v86|d v85|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[r10|d]" v87|d v86|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r10|d]" v88|d v87|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[rax|d]" v89|d v88|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rax|d]" v90|d v89|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[r10|d]" v92|d v91|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[r10|d]" v93|d v92|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[rax|d]" v94|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[r10|d]" v95|d v93|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[rax|d]" v96|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[r10|d]" v97|d v29|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r11|d]" v98|d v30|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[r8|d]" v99|d v97|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[r8|d]" v100|d v99|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[r8|d]" v102|d v100|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[r11|d]" v103|d v98|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r10|d]" v104|d -1 [294, 296[296 MustHaveRegister  "NoSpillStore"
  v105|q QWORD "[r11|q]" v105|q -1 [294, 298[298 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[r10|d]" v106|d v97|d [272, 274[274 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[rax|d]" v4|d v4|d [250, 268[252 MustHaveRegister 267 LiveAtLoopEnd  "SpillInDominator"
  v108|d DWORD "[vstack:0|d]" v4|d v4|d [106, 250[ "SpillInDominator"
  v109|d DWORD "[vstack:1|d]" v27|d v27|d [110, 246[245 LiveAtLoopEnd  "StoreAtDefinition"
  v110|d DWORD "[r11|d]" v30|d v30|d [241, 242[[246, 249[242 MustHaveRegister 248 ShouldHaveRegister  "OneSpillStore"
  v111|d DWORD "[vstack:2|d]" v30|d v30|d [131, 241[ "OneSpillStore"
  v112|d DWORD "[vstack:3|d]" v41|d v41|d [133, 202[202 ShouldHaveRegister  "OneSpillStore"
  v113|d DWORD "[vstack:4|d]" v42|d v42|d [135, 208[208 ShouldHaveRegister  "OneSpillStore"
  v114|d DWORD "[vstack:5|d]" v43|d v43|d [137, 214[214 ShouldHaveRegister  "OneSpillStore"
  v115|d DWORD "[vstack:6|d]" v44|d v44|d [139, 220[220 ShouldHaveRegister  "OneSpillStore"
  v116|d DWORD "[vstack:7|d]" v45|d v45|d [141, 226[226 ShouldHaveRegister  "OneSpillStore"
  v117|q QWORD "[rcx|q]" v32|q v32|q [237, 238[238 MustHaveRegister  "OneSpillStore"
  v118|q QWORD "[vstack:8|q]" v32|q v32|q [143, 237[ "OneSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [v19|DWORD, v20|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = MOVE v24|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   92  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = MOVE v4|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  104  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVE v27|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  112  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = MOVE v30|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE v41|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE v42|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  136  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = MOVE v43|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = MOVE v44|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  140  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVE v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|QWORD = MOVE v32|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|QWORD = MOVE v118|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE v111|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOVE v96|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = MOVE v109|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOVE v108|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [v97|DWORD, v98|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOVE v102|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [v106|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v105|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  284  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v105|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v105|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [v104|DWORD, v105|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOV v5|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SUB (x: v13|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = MOVZXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = ADD (x: v14|DWORD, y: v15|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: v4|DWORD, y: v17|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction v18|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v17|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction v21|DWORD = SHL v20|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v20|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = MOVZXB [v1|QWORD[.] + v19|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = INC v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = MOVE v24|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   92  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction v26|DWORD = LEA [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction v28|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction v27|DWORD = CMOVE (falseValue: v26|DWORD, ~trueValue: v28|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  104  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: v27|DWORD, y: v30|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  112  <|@ instruction v31|DWORD = MOVZXB [v1|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v32|QWORD = MOVSXD v30|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = MOVE v30|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction v41|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE v41|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE v42|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  136  <|@ instruction v43|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = MOVE v43|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = MOVE v44|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  140  <|@ instruction v45|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVE v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ instruction v46|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|QWORD = MOVE v32|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SHL v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = SUB (x: v47|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = ADD (x: v48|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SHL v49|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = SUB (x: v50|DWORD, ~y: v49|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = ADD (x: v51|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SHL v52|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v52|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SHL v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v35|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SHL v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SHL v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v37|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SHL v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SHL v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = SHL v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v74|DWORD = SHL v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v77|DWORD = SHL v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v80|DWORD = SHL v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v83|DWORD = SHL v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v86|DWORD = SHL v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v89|DWORD = SHL v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v92|DWORD = SHL v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|QWORD = MOVE v118|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction v94|DWORD = MOVZXB [v1|QWORD[.] + v32|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction v95|DWORD = ADD (x: v93|DWORD, y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE v111|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction v96|DWORD = LEA [v30|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOVE v96|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = MOVE v109|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOVE v108|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v98|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v99|DWORD = SHL v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v100|DWORD = SUB (x: v99|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v101|DWORD = MOVZXB [v1|QWORD[.] + v98|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v102|DWORD = ADD (x: v100|DWORD, y: v101|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v103|DWORD = INC v98|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOVE v102|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE v106|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v105|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  284  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v105|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v105|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v104|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v105|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   92  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  104  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  134  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  136  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  140  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:7|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:8|QWORD = MOVE rcx|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  144  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:7|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD = MOVE vstack:8|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  284  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   62  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   74  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   78  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   84  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   86  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   88  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   90  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   92  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  100  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  102  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  104  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  108  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  116  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  118  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  122  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  124  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  126  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  128  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  130  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  134  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  136  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  140  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:7|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:8|QWORD = MOVE rcx|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  144  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  146  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  150  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  152  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  156  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  158  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  164  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  170  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  176  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  182  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  186  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  188  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:7|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD = MOVE vstack:8|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  274  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  276  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  284  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  296  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  300  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction vstack:2|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction vstack:3|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction vstack:4|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction vstack:5|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction vstack:6|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction vstack:7|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction vstack:8|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:7|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE vstack:8|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE vstack:0|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|d DWORD "[vstack:0|d]" vstack:0|d -1 [106, 284[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[vstack:1|d]" vstack:1|d -1 [116, 281[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[vstack:2|d]" vstack:2|d -1 [146, 272[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[vstack:3|d]" vstack:3|d -1 [150, 230[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[vstack:4|d]" vstack:4|d -1 [154, 236[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[vstack:5|d]" vstack:5|d -1 [158, 242[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[vstack:6|d]" vstack:6|d -1 [162, 248[ "NOT_SUPPORTED"
  vstack:7|d DWORD "[vstack:7|d]" vstack:7|d -1 [166, 254[ "NOT_SUPPORTED"
  vstack:8|q QWORD "[vstack:8|q]" vstack:8|q -1 [170, 266[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|d DWORD "[stack:28|d]" vstack:0|d -1 [106, 284[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[stack:32|d]" vstack:1|d -1 [116, 281[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[stack:36|d]" vstack:2|d -1 [146, 272[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[stack:40|d]" vstack:3|d -1 [150, 230[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[stack:44|d]" vstack:4|d -1 [154, 236[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[stack:48|d]" vstack:5|d -1 [158, 242[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[stack:52|d]" vstack:6|d -1 [162, 248[ "NOT_SUPPORTED"
  vstack:7|d DWORD "[stack:56|d]" vstack:7|d -1 [166, 254[ "NOT_SUPPORTED"
  vstack:8|q QWORD "[stack:64|q]" vstack:8|q -1 [170, 266[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606887176930215285
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606887176930215283
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   78  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   80  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr   82  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576785594231923011
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   98  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  100  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606975176499760121
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  108  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  112  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  114  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  116  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  118  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4605530216334185534
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  130  <|@ instruction rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  132  <|@ instruction rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  134  <|@ instruction rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  136  <|@ instruction rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  144  <|@ instruction r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  146  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  148  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  150  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  152  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  154  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  156  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  158  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  162  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  166  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  170  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  268  <|@ instruction rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  276  <|@ instruction r11|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  278  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  280  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4610712296259570905
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606887176930215284
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  286  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576785594231923012
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  296  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  300  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  304  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606975176499760122
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  290  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017409
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  336  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  338  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602383577302844787
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584884690952628432
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  322  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  326  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  312  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  314  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  316  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  318  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 89842400c0feff4883ec389041817f20000000000f85d402000048896c24308bc14103c03bc10f8e77020000448b520c448bd941ffc3413bc30f8f39020000443bd10f8688020000448bd641c1e205442bd6440fb6440a104503d0448d4102413bc0448bc8450f4fc8e92b0000006666660f1f84000000000066666690666690458bc241c1e005452bc2460fb6541a104503c241ffc3458bd0453bcb7fe289442424448d40f081f81000008041b900000080450f4cc14489442420e967010000460fb64c1a104963cb0fb65c0a110fb67c0a120fb6740a130fb66c0a14440fb66c0a15440fb6740a160fb6440a17440fb6440a1844895c241c440fb65c0a1944895c2418440fb65c0a1a44895c2414440fb65c0a1b44895c2410440fb65c0a1c44895c240c440fb65c0a1d44895c2408440fb65c0a1e48890c24418bcac1e105412bca4103c9448bd141c1e205442bd14403d3458bca41c1e105452bca4403cf458bd141c1e205452bd14403d6458bca41c1e105452bca4403cd458bd141c1e205452bd14503d5458bca41c1e105452bca4503ce458bd141c1e205452bd14403d0418bc2c1e005412bc24103c0448bd041c1e205442bd04403542418418bc2c1e005412bc203442414448bd041c1e205442bd04403542410418bc2c1e005412bc20344240c448bd041c1e205442bd04403542408418bc2c1e005412bc24103c3448bd041c1e205442bd0488b0c240fb6440a1f4403d0448b5c241c418d4310448bd8448b442420453bc30f8f90feffff8b442424e9200000000f1f8000000000458bc241c1e005452bc2460fb6541a104503c241ffc3458bd0413bc37fe2418bc2488b6c24304883c438493ba7500400000f8787000000c34d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f8613000000453bd30f87a1fdffffe93c000000448bd6ebb649c7c31800000041bae5b6ffff458997840400004d899f90040000e8000000000f1f84000000000049c7c30000000041bae5c2ffffebd649c7c31800000041bae5b6ffffebc748896c2430e800000000e91dfdfffff4488d0d65ffffff49898f68040000e9effcfffff441c78784040000f5c8ffff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD  <||@
  Comment 31 6 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 36 8 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 44 block B1 null  <||@
  Comment 44 10 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 44 12 r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 44 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 44 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 48 14 r11|DWORD = INC rcx|DWORD size: DWORD  <||@
  Comment 54 16 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD  <||@
  Comment 63 block B8 null  <||@
  Comment 63 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 63 64 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 72 block B9 null  <||@
  Comment 72 66 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 72 68 r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD  <||@
  Comment 79 70 r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 82 72 r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 88 74 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 91 76 r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD  <||@
  Comment 95 78 CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 98 80 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: >  <||@
  Comment 105 82 JUMP ~[] destination: B9 -> B10  <||@
  Comment 110 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 110 88 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 128 90 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 135 92 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 138 94 r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 144 96 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 147 98 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 150 100 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 153 102 JUMP ~[] destination: B11 -> B10  <||@
  Comment 153 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 153 84 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 153 86 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 158 block B12 null  <||@
  Comment 158 104 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 158 106 stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD  <||@
  Comment 162 108 r8|DWORD = LEA [rax|DWORD - 16] size: DWORD  <||@
  Comment 166 110 CMP rax|DWORD y: -2147483632 size: DWORD  <||@
  Comment 172 112 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 178 114 r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 182 116 stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 187 118 JUMP ~[] destination: B12 -> B13  <||@
  Comment 192 block B14 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 192 124 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 192 126 r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 198 128 rcx|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 201 130 rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD  <||@
  Comment 206 132 rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD  <||@
  Comment 211 134 rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD  <||@
  Comment 216 136 rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD  <||@
  Comment 221 138 r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD  <||@
  Comment 227 140 r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD  <||@
  Comment 233 142 rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD  <||@
  Comment 238 144 r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD  <||@
  Comment 244 146 stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 249 148 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD  <||@
  Comment 255 150 stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 260 152 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD  <||@
  Comment 266 154 stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 271 156 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD  <||@
  Comment 277 158 stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 282 160 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD  <||@
  Comment 288 162 stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 293 164 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD  <||@
  Comment 299 166 stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 304 168 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD  <||@
  Comment 310 170 stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD  <||@
  Comment 314 172 rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 320 174 rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 323 176 rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 326 178 r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD  <||@
  Comment 333 180 r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD  <||@
  Comment 336 182 r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 339 184 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 346 186 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 349 188 r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 352 190 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 359 192 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 362 194 r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 365 196 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 372 198 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 375 200 r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 378 202 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 385 204 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 388 206 r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 391 208 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 398 210 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 401 212 r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD  <||@
  Comment 404 214 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 411 216 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 414 218 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 417 220 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 423 222 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 426 224 rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 429 226 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 436 228 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 439 230 r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD  <||@
  Comment 444 232 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 450 234 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 453 236 rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD  <||@
  Comment 457 238 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 464 240 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 467 242 r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD  <||@
  Comment 472 244 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 478 246 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 481 248 rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD  <||@
  Comment 485 250 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 492 252 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 495 254 r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD  <||@
  Comment 500 256 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 506 258 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 509 260 rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD  <||@
  Comment 512 262 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 519 264 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 522 266 rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD  <||@
  Comment 526 268 rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD  <||@
  Comment 531 270 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 534 272 r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD  <||@
  Comment 539 274 rax|DWORD = LEA [r11|DWORD + 16] size: DWORD  <||@
  Comment 543 276 r11|DWORD = MOVE rax|DWORD moveKind: DWORD  <||@
  Comment 546 278 r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD  <||@
  Comment 551 280 JUMP ~[] destination: B14 -> B13  <||@
  Comment 551 block B13 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 551 120 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 551 122 CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 560 block B15 null  <||@
  Comment 560 282 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 560 284 rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD  <||@
  Comment 564 286 JUMP ~[] destination: B15 -> B16  <||@
  Comment 569 block B17 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 569 292 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 576 294 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 583 296 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 586 298 r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 592 300 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 595 302 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 598 304 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 601 306 JUMP ~[] destination: B17 -> B16  <||@
  Comment 601 block B16 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 601 288 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 601 290 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD  <||@
  Comment 606 block B22 null  <||@
  Comment 606 334 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 606 336 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 609 338 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9  <||@
  Comment 618 POLL_RETURN_FAR  <||@
  Comment 632 block B2 null  <||@
  Comment 632 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 632 20 r9|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 635 22 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 640 24 rbx|QWORD = MOVSXD rbx|DWORD size: QWORD  <||@
  Comment 643 26 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 646 28 r9|QWORD = DEC r9|QWORD size: QWORD  <||@
  Comment 649 30 rbx|QWORD = MOV r10|DWORD size: DWORD  <||@
  Comment 652 32 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 661 block B3 null  <||@
  Comment 661 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 661 36 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 675 block B21 null  <||@
  Comment 675 328 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 675 330 r10|DWORD = MOVE rsi|DWORD moveKind: DWORD  <||@
  Comment 678 332 JUMP ~[] destination: B21 -> B22  <||@
  Comment 680 block B6 null  <||@
  Comment 680 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 680 52 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 687 54 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 693 56 JUMP ~[] destination: B6 -> B20  <||@
  Comment 693 block B20 null  <||@
  Comment 693 320 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 693 322 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 700 324 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 707 326 DEOPT info [bci:0]  <||@
  Comment 707 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fba7b6335a8, value=140438496915834]:0x7fba62b8b17a}  <||@
  Comment 712 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 720 block B19 null  <||@
  Comment 720 312 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 720 314 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 727 316 r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5]  <||@
  Comment 733 318 JUMP ~[] destination: B19 -> B20  <||@
  Comment 735 block B5 null  <||@
  Comment 735 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 735 44 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 742 46 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 748 48 JUMP ~[] destination: B5 -> B20  <||@
  Comment 755 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7fba7b633598, value=140438496784928]:0x7fba62b6b220}  <||@
  Comment 780 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7fba7b6335a0, value=140438496919552]:0x7fba62b8c000}  <||@
  Comment 808 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fba7b6335a8, value=140438496915834]:0x7fba62b8b17a}  <||@
  Comment 813 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 821 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7fba62cc5f00:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 821 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 827 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7fba7b6335b8, value=140438496915232]:0x7fba62b8af20}  <||@
  Comment 827 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-191[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-191[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  date 1714038188967
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7fba6396c780 89842400c0feff4883ec389041817f20000000000f85d402000048896c24308bc14103c03bc10f8e77020000448b520c448bd941ffc3413bc30f8f39020000443bd10f8688020000448bd641c1e205442bd6440fb6440a104503d0448d4102413bc0448bc8450f4fc8e92b0000006666660f1f84000000000066666690666690458bc241c1e005452bc2460fb6541a104503c241ffc3458bd0453bcb7fe289442424448d40f081f81000008041b900000080450f4cc14489442420e967010000460fb64c1a104963cb0fb65c0a110fb67c0a120fb6740a130fb66c0a14440fb66c0a15440fb6740a160fb6440a17440fb6440a1844895c241c440fb65c0a1944895c2418440fb65c0a1a44895c2414440fb65c0a1b44895c2410440fb65c0a1c44895c240c440fb65c0a1d44895c2408440fb65c0a1e48890c24418bcac1e105412bca4103c9448bd141c1e205442bd14403d3458bca41c1e105452bca4403cf458bd141c1e205452bd14403d6458bca41c1e105452bca4403cd458bd141c1e205452bd14503d5458bca41c1e105452bca4503ce458bd141c1e205452bd14403d0418bc2c1e005412bc24103c0448bd041c1e205442bd04403542418418bc2c1e005412bc203442414448bd041c1e205442bd04403542410418bc2c1e005412bc20344240c448bd041c1e205442bd04403542408418bc2c1e005412bc24103c3448bd041c1e205442bd0488b0c240fb6440a1f4403d0448b5c241c418d4310448bd8448b442420453bc30f8f90feffff8b442424e9200000000f1f8000000000458bc241c1e005452bc2460fb6541a104503c241ffc3458bd0413bc37fe2418bc2488b6c24304883c438493ba7500400000f8787000000c34d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f8613000000453bd30f87a1fdffffe93c000000448bd6ebb649c7c31800000041bae5b6ffff458997840400004d899f90040000e832e721ff0f1f84000000000049c7c30000000041bae5c2ffffebd649c7c31800000041bae5b6ffffebc748896c2430e8a8e71fffe91dfdfffff4488d0d65ffffff49898f68040000e96ff521fff441c78784040000f5c8ffff49c7879004000000000000e8cde621ff0f1f840000000000e8469435fff4e860e421fff4f4f4f4f4f4f4f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1aaf1bee slotKind: QWORD  <||@
  Comment 31 6 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 36 8 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9672215678312298 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 44 block B1 null  <||@
  Comment 44 10 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 44 12 r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 44 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 44 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 48 14 r11|DWORD = INC rcx|DWORD size: DWORD  <||@
  Comment 54 16 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD  <||@
  Comment 63 block B8 null  <||@
  Comment 63 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 63 64 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 72 block B9 null  <||@
  Comment 72 66 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 72 68 r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD  <||@
  Comment 79 70 r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 82 72 r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 88 74 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 91 76 r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD  <||@
  Comment 95 78 CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 98 80 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: >  <||@
  Comment 105 82 JUMP ~[] destination: B9 -> B10  <||@
  Comment 110 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 110 88 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 128 90 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 135 92 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 138 94 r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 144 96 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 147 98 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 150 100 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 153 102 JUMP ~[] destination: B11 -> B10  <||@
  Comment 153 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 153 84 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 153 86 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 158 block B12 null  <||@
  Comment 158 104 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 158 106 stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD  <||@
  Comment 162 108 r8|DWORD = LEA [rax|DWORD - 16] size: DWORD  <||@
  Comment 166 110 CMP rax|DWORD y: -2147483632 size: DWORD  <||@
  Comment 172 112 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 178 114 r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 182 116 stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 187 118 JUMP ~[] destination: B12 -> B13  <||@
  Comment 192 block B14 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 192 124 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 192 126 r9|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 198 128 rcx|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 201 130 rbx|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD  <||@
  Comment 206 132 rdi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD  <||@
  Comment 211 134 rsi|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD  <||@
  Comment 216 136 rbp|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD  <||@
  Comment 221 138 r13|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD  <||@
  Comment 227 140 r14|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD  <||@
  Comment 233 142 rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD  <||@
  Comment 238 144 r8|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD  <||@
  Comment 244 146 stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 249 148 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD  <||@
  Comment 255 150 stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 260 152 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD  <||@
  Comment 266 154 stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 271 156 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD  <||@
  Comment 277 158 stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 282 160 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD  <||@
  Comment 288 162 stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 293 164 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD  <||@
  Comment 299 166 stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 304 168 r11|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD  <||@
  Comment 310 170 stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD  <||@
  Comment 314 172 rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 320 174 rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 323 176 rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 326 178 r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD  <||@
  Comment 333 180 r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD  <||@
  Comment 336 182 r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 339 184 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 346 186 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 349 188 r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 352 190 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 359 192 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 362 194 r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 365 196 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 372 198 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 375 200 r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 378 202 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 385 204 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 388 206 r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 391 208 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 398 210 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 401 212 r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD  <||@
  Comment 404 214 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 411 216 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 414 218 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 417 220 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 423 222 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 426 224 rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 429 226 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 436 228 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 439 230 r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD  <||@
  Comment 444 232 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 450 234 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 453 236 rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD  <||@
  Comment 457 238 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 464 240 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 467 242 r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD  <||@
  Comment 472 244 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 478 246 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 481 248 rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD  <||@
  Comment 485 250 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 492 252 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 495 254 r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD  <||@
  Comment 500 256 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 506 258 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 509 260 rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD  <||@
  Comment 512 262 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 519 264 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 522 266 rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD  <||@
  Comment 526 268 rax|DWORD = MOVZXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD  <||@
  Comment 531 270 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 534 272 r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD  <||@
  Comment 539 274 rax|DWORD = LEA [r11|DWORD + 16] size: DWORD  <||@
  Comment 543 276 r11|DWORD = MOVE rax|DWORD moveKind: DWORD  <||@
  Comment 546 278 r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD  <||@
  Comment 551 280 JUMP ~[] destination: B14 -> B13  <||@
  Comment 551 block B13 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 551 120 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 551 122 CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.4577716914684906 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 560 block B15 null  <||@
  Comment 560 282 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 560 284 rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD  <||@
  Comment 564 286 JUMP ~[] destination: B15 -> B16  <||@
  Comment 569 block B17 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 569 292 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 576 294 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 583 296 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 586 298 r10|DWORD = MOVZXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 592 300 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 595 302 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 598 304 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 601 306 JUMP ~[] destination: B17 -> B16  <||@
  Comment 601 block B16 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 601 288 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 601 290 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD  <||@
  Comment 606 block B22 null  <||@
  Comment 606 334 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 606 336 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 609 338 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@5d8b60c9  <||@
  Comment 618 POLL_RETURN_FAR  <||@
  Comment 632 block B2 null  <||@
  Comment 632 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 632 20 r9|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 635 22 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 640 24 rbx|QWORD = MOVSXD rbx|DWORD size: QWORD  <||@
  Comment 643 26 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 646 28 r9|QWORD = DEC r9|QWORD size: QWORD  <||@
  Comment 649 30 rbx|QWORD = MOV r10|DWORD size: DWORD  <||@
  Comment 652 32 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 661 block B3 null  <||@
  Comment 661 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 661 36 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 675 block B21 null  <||@
  Comment 675 328 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 675 330 r10|DWORD = MOVE rsi|DWORD moveKind: DWORD  <||@
  Comment 678 332 JUMP ~[] destination: B21 -> B22  <||@
  Comment 680 block B6 null  <||@
  Comment 680 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 680 52 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 687 54 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 693 56 JUMP ~[] destination: B6 -> B20  <||@
  Comment 693 block B20 null  <||@
  Comment 693 320 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 693 322 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 700 324 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 707 326 DEOPT info [bci:0]  <||@
  Comment 707 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fba7b6335a8, value=140438496915834]:0x7fba62b8b17a}  <||@
  Comment 712 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 720 block B19 null  <||@
  Comment 720 312 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 720 314 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 727 316 r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5]  <||@
  Comment 733 318 JUMP ~[] destination: B19 -> B20  <||@
  Comment 735 block B5 null  <||@
  Comment 735 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 735 44 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 742 46 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 748 48 JUMP ~[] destination: B5 -> B20  <||@
  Comment 755 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7fba7b633598, value=140438496784928]:0x7fba62b6b220}  <||@
  Comment 780 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7fba7b6335a0, value=140438496919552]:0x7fba62b8c000}  <||@
  Comment 808 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7fba7b6335a8, value=140438496915834]:0x7fba62b8b17a}  <||@
  Comment 813 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 821 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7fba62cc5f00:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 821 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 827 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7fba7b6335b8, value=140438496915232]:0x7fba62b8af20}  <||@
  Comment 827 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
