begin_compilation
  name " HotSpotCompilation-5855[java.util.regex.Pattern$BranchConn.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-5855[java.util.regex.Pattern$BranchConn.match(Matcher, int, CharSequence)]"
  date 1724269745551
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v1148 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v1148  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$BranchConn
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v1149 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?162 ?23 ?161 ?912 v1191 ?913 v605 ?72 ?215 v380 ?77 ?96 v430 ?113 ?210 ?908 v478 ?142 ?909 ?910 ?147 ?148 v1148 ?911 v536 ?157 ?216 v336 ?183 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?162 ?23 v536 v380 v593 ?215 v605 ?77 ?96 v430 ?113 v466 ?216 v478 ?147 ?148 v524 ?910 v336 ?183 v368 ?912 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?162 ?23 v536 v380 ?215 v605 ?77 ?96 v430 ?113 ?216 v478 ?147 ?148 ?910 v336 ?183 ?912 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v1210 v1148 v1086 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1148 <|@
d <@d|@=== Debug Properties ===
deoptReasonAndAction: int[-144651|0xfffffffffffdcaf5]
deoptSpeculation: long[5144|0x1418]
stamp: void
=== Inputs ===
stateBefore: ?5 
object: a2 
=== Succesors ===
next: a1085 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@NullCheck|@jdk.graal.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?5 object: a2 #next: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid v1149 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a1085 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1085 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1149 
lastLocationAccess: - 
=== Succesors ===
next: v1086 
=== Usages ===
a262 v1150 v1151 v1154 v1199 
=== Predecessor ===
v1148 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1149 lastLocationAccess: - #next: v1086  <|@  <|@
f <@~|@floating>@ <|@
tid v1199 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
v1086 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1086 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-67339|0xfffffffffffef8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1199 
lastLocationAccess: - 
=== Succesors ===
next: v727 
=== Usages ===
v1080 
=== Predecessor ===
a1085 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1199 lastLocationAccess: - #next: v727  <|@  <|@
f <@~|@floating>@ <|@
tid v1079 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1080 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1080 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1086 
y: v1079 
=== Succesors ===
=== Usages ===
v727 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1086 y: v1079  <|@  <|@
f <@*|@fixed>@ <|@
tid v727 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1080 
=== Succesors ===
trueSuccessor: v724 
falseSuccessor: v726 
=== Usages ===
=== Predecessor ===
v1086 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1080 #trueSuccessor: v724 #falseSuccessor: v726  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v724 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v20 
=== Usages ===
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v20  <|@  <|@
f <@~|@floating>@ <|@
tid v1150 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
i1089 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid a262 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1085 
=== Succesors ===
=== Usages ===
?148 ?77 ?162 ?23 ?216 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid v1151 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
a1087 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid j949 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 660
stableDimension: 0
stamp: i64 [660]
stampKind: i64
value: long[660|0x294]
=== Inputs ===
=== Succesors ===
=== Usages ===
j941 j941 j1000 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j956 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 1940
stableDimension: 0
stamp: i64 [1940]
stampKind: i64
value: long[1940|0x794]
=== Inputs ===
=== Succesors ===
=== Usages ===
j941 j941 j1000 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j934 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j1000 j1000 j941 j941 j941 j941 j941 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1081 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1082 v1083 v1084 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i51 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i52 i125 v10 i238 v239 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1191 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a1091 a1141 a1124 a1108 a1132 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
tid ?164 <|@
d <@d|@=== Debug Properties ===
bci: 7
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
=== Succesors ===
=== Usages ===
?23 ?77 ?148 ?162 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: -  <|@  <|@
f <@~|@floating>@ <|@
tid i19 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i22 v40 v46 ?215 v114 v120 v189 v308 ?183 v184 ?910 ?183 ?113 ?161 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v20 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v21 
=== Predecessor ===
v724 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i22 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v21 
values: i19 i52 
=== Succesors ===
=== Usages ===
?23 v25 j624 ?216 v554 i52 ?77 ?148 ?162 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v21 values: i19 i52  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
osrLoop: false
peelings: 0
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v20 
=== Succesors ===
next: a1087 
=== Usages ===
i22 v42 v47 v53 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v20 #next: a1087  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1087 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1151 
lastLocationAccess: - 
=== Succesors ===
next: i1088 
=== Usages ===
a271 v1152 
=== Predecessor ===
v21 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1151 lastLocationAccess: - #next: i1088  <|@  <|@
tid ?23 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
v942 i1088 a1093 i1136 v1094 v1139 i1096 i1127 v1130 a1100 i1103 v1101 v1106 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
f <@~|@floating>@ <|@
tid v1152 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1087 
=== Succesors ===
=== Usages ===
i1088 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1087  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1088 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-69899|0xfffffffffffeeef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1152 
lastLocationAccess: - 
=== Succesors ===
next: v735 
=== Usages ===
v554 
=== Predecessor ===
a1087 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1152 lastLocationAccess: - #next: v735  <|@  <|@
f <@~|@floating>@ <|@
tid v554 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i22 
y: i1088 
=== Succesors ===
=== Usages ===
v735 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i22 y: i1088  <|@  <|@
f <@*|@fixed>@ <|@
tid v735 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v554 
=== Succesors ===
trueSuccessor: v732 
falseSuccessor: v734 
=== Usages ===
=== Predecessor ===
i1088 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v554 #trueSuccessor: v732 #falseSuccessor: v734  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v732 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1089 
=== Usages ===
=== Predecessor ===
v735 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1089  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1089 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1150 
lastLocationAccess: - 
=== Succesors ===
next: v879 
=== Usages ===
v25 
=== Predecessor ===
v732 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1150 lastLocationAccess: - #next: v879  <|@  <|@
f <@~|@floating>@ <|@
tid v25 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i22 
y: i1089 
=== Succesors ===
=== Usages ===
v879 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i22 y: i1089  <|@  <|@
f <@*|@fixed>@ <|@
tid v879 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v25 
=== Succesors ===
trueSuccessor: v877 
falseSuccessor: v878 
=== Usages ===
=== Predecessor ===
i1089 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v25 #trueSuccessor: v877 #falseSuccessor: v878  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v877 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1090 
=== Usages ===
=== Predecessor ===
v879 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1090  <|@  <|@
f <@~|@floating>@ <|@
tid a271 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1087 
=== Succesors ===
=== Usages ===
v1153 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1087  <|@  <|@
f <@~|@floating>@ <|@
tid j624 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i22 
=== Succesors ===
=== Usages ===
v1153 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i22  <|@  <|@
f <@~|@floating>@ <|@
tid v1153 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a271 
index: j624 
=== Succesors ===
=== Usages ===
a1090 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a271 index: j624  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1090 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1153 
lastLocationAccess: - 
=== Succesors ===
next: a1091 
=== Usages ===
v625 a562 v1192 v1194 v1208 
=== Predecessor ===
v877 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1153 lastLocationAccess: - #next: a1091  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1091 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: v35 
=== Usages ===
a569 v1165 
=== Predecessor ===
a1090 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: v35  <|@  <|@
f <@~|@floating>@ <|@
tid a569 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1091 
=== Succesors ===
=== Usages ===
v1193 v1166 v1185 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1091  <|@  <|@
f <@~|@floating>@ <|@
tid v1165 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1091 
=== Succesors ===
=== Usages ===
i1103 i1127 i1136 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1091  <|@  <|@
f <@~|@floating>@ <|@
tid v625 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1090 
=== Succesors ===
=== Usages ===
v35 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1090  <|@  <|@
f <@*|@fixed>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v625 
=== Succesors ===
trueSuccessor: v34 
falseSuccessor: v33 
=== Usages ===
=== Predecessor ===
a1091 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v625 #trueSuccessor: v34 #falseSuccessor: v33  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1092 
=== Usages ===
=== Predecessor ===
v35 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1092  <|@  <|@
f <@~|@floating>@ <|@
tid v1154 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
a1092 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1092 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1154 
lastLocationAccess: - 
=== Succesors ===
next: a1093 
=== Usages ===
v1155 
=== Predecessor ===
v34 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1154 lastLocationAccess: - #next: a1093  <|@  <|@
f <@~|@floating>@ <|@
tid v1155 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1092 
=== Succesors ===
=== Usages ===
a1093 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1092  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1093 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-74763|0xfffffffffffedbf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1155 
lastLocationAccess: - 
=== Succesors ===
next: v1094 
=== Usages ===
a296 v1156 v1157 v1160 v1186 v1200 
=== Predecessor ===
a1092 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1155 lastLocationAccess: - #next: v1094  <|@  <|@
f <@~|@floating>@ <|@
tid v1200 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
v1094 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1094 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-76043|0xfffffffffffed6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1200 
lastLocationAccess: - 
=== Succesors ===
next: v90 
=== Usages ===
v1048 
=== Predecessor ===
a1093 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1200 lastLocationAccess: - #next: v90  <|@  <|@
f <@~|@floating>@ <|@
tid v1048 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1094 
=== Succesors ===
=== Usages ===
v90 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1094  <|@  <|@
f <@~|@floating>@ <|@
tid a296 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1093 
=== Succesors ===
=== Usages ===
?161 ?157 ?912 ?96 ?183 ?909 ?910 ?113 ?215 ?147 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1093  <|@  <|@
f <@~|@floating>@ <|@
tid v1156 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
i1097 i1113 i1128 i1134 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@*|@fixed>@ <|@
tid v90 <|@
d <@d|@=== Debug Properties ===
hubs: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}]
keySuccessors: [I@3b7ec611
keys: [HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>, HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>]
profileData: PROFILED keyProbabilities: [0.6666288834409075, 0.3333711165590924, 0.0]
stamp: void
=== Inputs ===
value: v1048 
=== Succesors ===
successors: v80 v82 v85 
=== Usages ===
=== Predecessor ===
v1094 >@ <|@
instruction <@TypeSwitch|@jdk.graal.compiler.nodes.java.TypeSwitchNode>@ value: v1048 #successors: v80 v82 v85  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v80 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: a1095 
=== Usages ===
=== Predecessor ===
v90 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1095  <|@  <|@
f <@~|@floating>@ <|@
tid v1157 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
a1095 a1111 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1095 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1157 
lastLocationAccess: - 
=== Succesors ===
next: i1096 
=== Usages ===
v1159 v1158 
=== Predecessor ===
v80 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1157 lastLocationAccess: - #next: i1096  <|@  <|@
f <@~|@floating>@ <|@
tid v1158 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1095 
=== Succesors ===
=== Usages ===
i1096 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1095  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1096 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-77835|0xfffffffffffecff5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1158 
lastLocationAccess: - 
=== Succesors ===
next: v751 
=== Usages ===
v308 
=== Predecessor ===
a1095 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1158 lastLocationAccess: - #next: v751  <|@  <|@
f <@~|@floating>@ <|@
tid v308 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1096 
y: i19 
=== Succesors ===
=== Usages ===
v751 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i1096 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v751 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v308 
=== Succesors ===
trueSuccessor: v750 
falseSuccessor: v748 
=== Usages ===
=== Predecessor ===
i1096 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v308 #trueSuccessor: v750 #falseSuccessor: v748  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v750 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v968 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v968  <|@  <|@
f <@~|@floating>@ <|@
tid i969 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -160539
stableDimension: 0
stamp: i32 [-160539]
stampKind: i32
value: int[-160539|0xfffffffffffd8ce5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v968 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v750 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v748 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1097 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1097  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1097 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v883 
=== Usages ===
v239 
=== Predecessor ===
v748 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v883  <|@  <|@
f <@~|@floating>@ <|@
tid v239 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1097 
y: i51 
=== Succesors ===
=== Usages ===
v883 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i1097 y: i51  <|@  <|@
f <@*|@fixed>@ <|@
tid v883 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v239 
=== Succesors ===
trueSuccessor: v881 
falseSuccessor: v882 
=== Usages ===
=== Predecessor ===
i1097 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v239 #trueSuccessor: v881 #falseSuccessor: v882  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v881 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v972 
=== Usages ===
=== Predecessor ===
v883 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v972  <|@  <|@
f <@~|@floating>@ <|@
tid i973 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -225299
stableDimension: 0
stamp: i32 [-225299]
stampKind: i32
value: int[-225299|0xfffffffffffc8fed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v972 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v881 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v882 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1098 
=== Usages ===
=== Predecessor ===
v883 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1098  <|@  <|@
f <@~|@floating>@ <|@
tid v1159 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1095 
=== Succesors ===
=== Usages ===
a1098 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1095  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1098 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1159 
lastLocationAccess: - 
=== Succesors ===
next: v178 
=== Usages ===
a316 v629 v1164 v1167 v1202 
=== Predecessor ===
v882 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1159 lastLocationAccess: - #next: v178  <|@  <|@
f <@~|@floating>@ <|@
tid v629 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1098 
=== Succesors ===
=== Usages ===
v178 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1098  <|@  <|@
f <@~|@floating>@ <|@
tid v1160 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
a1099 a1115 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
tid ?217 <|@
d <@d|@=== Debug Properties ===
bci: 7
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
=== Succesors ===
=== Usages ===
?216 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: -  <|@  <|@
tid ?216 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?217 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?183 ?215 ?910 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?217 values: a262 a2 i3 a4 i22  <|@  <|@
f <@*|@fixed>@ <|@
tid v178 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v629 
=== Succesors ===
trueSuccessor: v177 
falseSuccessor: v176 
=== Usages ===
=== Predecessor ===
a1098 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v629 #trueSuccessor: v177 #falseSuccessor: v176  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v177 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1099 
=== Usages ===
=== Predecessor ===
v178 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1099  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1099 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1160 
lastLocationAccess: - 
=== Succesors ===
next: a1100 
=== Usages ===
v1161 
=== Predecessor ===
v177 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1160 lastLocationAccess: - #next: a1100  <|@  <|@
f <@~|@floating>@ <|@
tid v1161 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1099 
=== Succesors ===
=== Usages ===
a1100 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1099  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1100 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-82187|0xfffffffffffebef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1161 
lastLocationAccess: - 
=== Succesors ===
next: v1101 
=== Usages ===
a325 v1201 
=== Predecessor ===
a1099 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1161 lastLocationAccess: - #next: v1101  <|@  <|@
f <@~|@floating>@ <|@
tid v1201 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1100 
=== Succesors ===
=== Usages ===
v1101 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1100  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1101 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-83723|0xfffffffffffeb8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1201 
lastLocationAccess: - 
=== Succesors ===
next: v332 
=== Usages ===
v1051 
=== Predecessor ===
a1100 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1201 lastLocationAccess: - #next: v332  <|@  <|@
f <@~|@floating>@ <|@
tid v1051 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1101 
=== Succesors ===
=== Usages ===
v1162 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1101  <|@  <|@
f <@~|@floating>@ <|@
tid v1162 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1051 
index: - 
=== Succesors ===
=== Usages ===
v332 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1051 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v332 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1162 
lastLocationAccess: - 
=== Succesors ===
next: j335 
=== Usages ===
v1163 v336 
=== Predecessor ===
v1101 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1162 lastLocationAccess: - #next: j335  <|@  <|@
f <@~|@floating>@ <|@
tid v1163 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v332 
index: - 
=== Succesors ===
=== Usages ===
j335 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v332 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j335 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1163 
lastLocationAccess: - 
=== Succesors ===
next: i182 
=== Usages ===
v336 
=== Predecessor ===
v332 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1163 lastLocationAccess: - #next: i182  <|@  <|@
f <@~|@floating>@ <|@
tid a325 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1100 
=== Succesors ===
=== Usages ===
v336 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1100  <|@  <|@
tid v336 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j335 
metaspaceMethod: v332 
arguments: a325 a2 i3 a4 
=== Succesors ===
=== Usages ===
i182 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j335 metaspaceMethod: v332 arguments: a325 a2 i3 a4  <|@  <|@
tid ?910 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?216 
values: a296 a2 i3 a4 i19 
=== Succesors ===
=== Usages ===
i182 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?216 values: a296 a2 i3 a4 i19  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i182 <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v336 
stateDuring: ?910 
=== Succesors ===
next: v887 
=== Usages ===
v184 
=== Predecessor ===
j335 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v336 stateDuring: ?910 #next: v887  <|@  <|@
f <@~|@floating>@ <|@
tid v184 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i182 
y: i19 
=== Succesors ===
=== Usages ===
v887 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i182 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v887 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v184 
=== Succesors ===
trueSuccessor: v885 
falseSuccessor: v886 
=== Usages ===
=== Predecessor ===
i182 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v184 #trueSuccessor: v885 #falseSuccessor: v886  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v885 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v884 
=== Usages ===
=== Predecessor ===
v887 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v884  <|@  <|@
tid ?183 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?216 
values: i19 a296 a2 i3 a4 i19 
=== Succesors ===
=== Usages ===
v884 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?216 values: i19 a296 a2 i3 a4 i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v884 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: UnreachedCode
speculation: {0x0000000000000514[index: 40, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?183 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v885 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?183  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v886 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v242 
=== Usages ===
=== Predecessor ===
v887 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v242  <|@  <|@
f <@*|@fixed>@ <|@
tid v242 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v886 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v176 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1102 
=== Usages ===
=== Predecessor ===
v178 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1102  <|@  <|@
f <@~|@floating>@ <|@
tid v1202 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
v1102 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1102 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1202 
lastLocationAccess: - 
=== Succesors ===
next: v763 
=== Usages ===
v1082 
=== Predecessor ===
v176 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1202 lastLocationAccess: - #next: v763  <|@  <|@
f <@~|@floating>@ <|@
tid v1082 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1102 
y: v1081 
=== Succesors ===
=== Usages ===
v763 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1102 y: v1081  <|@  <|@
f <@*|@fixed>@ <|@
tid v763 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1082 
=== Succesors ===
trueSuccessor: v760 
falseSuccessor: v762 
=== Usages ===
=== Predecessor ===
v1102 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1082 #trueSuccessor: v760 #falseSuccessor: v762  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v760 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1103 
=== Usages ===
=== Predecessor ===
v763 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1103  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1103 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-89099|0xfffffffffffea3f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: i1104 
=== Usages ===
v361 
=== Predecessor ===
v760 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1165 lastLocationAccess: - #next: i1104  <|@  <|@
f <@~|@floating>@ <|@
tid v1164 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
i1104 i1110 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1104 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1164 
lastLocationAccess: - 
=== Succesors ===
next: v775 
=== Usages ===
v361 j631 
=== Predecessor ===
i1103 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1164 lastLocationAccess: - #next: v775  <|@  <|@
f <@~|@floating>@ <|@
tid v361 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1104 
y: i1103 
=== Succesors ===
=== Usages ===
v775 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1104 y: i1103  <|@  <|@
f <@*|@fixed>@ <|@
tid v775 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v361 
=== Succesors ===
trueSuccessor: v772 
falseSuccessor: v774 
=== Usages ===
=== Predecessor ===
i1104 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v361 #trueSuccessor: v772 #falseSuccessor: v774  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v772 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1105 
=== Usages ===
v368 
=== Predecessor ===
v775 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1105  <|@  <|@
f <@~|@floating>@ <|@
tid v1167 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
a1105 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1105 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1167 
lastLocationAccess: - 
=== Succesors ===
next: v1106 
=== Usages ===
a371 v1203 
=== Predecessor ===
v772 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1167 lastLocationAccess: - #next: v1106  <|@  <|@
f <@~|@floating>@ <|@
tid v1203 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1105 
=== Succesors ===
=== Usages ===
v1106 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1105  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1106 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-95499|0xfffffffffffe8af5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1203 
lastLocationAccess: - 
=== Succesors ===
next: i1107 
=== Usages ===
v1057 
=== Predecessor ===
a1105 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1203 lastLocationAccess: - #next: i1107  <|@  <|@
f <@~|@floating>@ <|@
tid j631 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1104 
=== Succesors ===
=== Usages ===
v1166 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1104  <|@  <|@
f <@~|@floating>@ <|@
tid v1166 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a569 
index: j631 
=== Succesors ===
=== Usages ===
v368 i1107 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a569 index: j631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1107 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1166 
lastLocationAccess: - 
=== Succesors ===
next: v368 
=== Usages ===
?911 ?210 v396 
=== Predecessor ===
v1106 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1166 lastLocationAccess: - #next: v368  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v368 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v772 
address: v1166 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v377 
=== Usages ===
=== Predecessor ===
i1107 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v772 address: v1166 lastLocationAccess: - value: i3 stateAfter: - #next: v377  <|@  <|@
f <@~|@floating>@ <|@
tid v1057 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1106 
=== Succesors ===
=== Usages ===
v1168 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1106  <|@  <|@
f <@~|@floating>@ <|@
tid v1168 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1057 
index: - 
=== Succesors ===
=== Usages ===
v377 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1057 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v377 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1168 
lastLocationAccess: - 
=== Succesors ===
next: j379 
=== Usages ===
v1169 v380 
=== Predecessor ===
v368 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1168 lastLocationAccess: - #next: j379  <|@  <|@
f <@~|@floating>@ <|@
tid v1169 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v377 
index: - 
=== Succesors ===
=== Usages ===
j379 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v377 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j379 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1169 
lastLocationAccess: - 
=== Succesors ===
next: i209 
=== Usages ===
v380 
=== Predecessor ===
v377 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1169 lastLocationAccess: - #next: i209  <|@  <|@
f <@~|@floating>@ <|@
tid a371 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1105 
=== Succesors ===
=== Usages ===
v380 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1105  <|@  <|@
tid v380 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j379 
metaspaceMethod: v377 
arguments: a371 a2 i3 a4 
=== Succesors ===
=== Usages ===
i209 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j379 metaspaceMethod: v377 arguments: a371 a2 i3 a4  <|@  <|@
tid ?215 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?216 
values: a296 a2 i3 a4 i19 
=== Succesors ===
=== Usages ===
?911 ?210 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?216 values: a296 a2 i3 a4 i19  <|@  <|@
f <@~|@floating>@ <|@
tid a316 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1098 
=== Succesors ===
=== Usages ===
?210 ?911 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1098  <|@  <|@
tid ?911 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?215 
values: a316 a2 - - i1107 
=== Succesors ===
=== Usages ===
i209 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?215 values: a316 a2 - - i1107  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i209 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v380 
stateDuring: ?911 
=== Succesors ===
next: a1108 
=== Usages ===
v189 ?210 
=== Predecessor ===
j379 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v380 stateDuring: ?911 #next: a1108  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1108 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1109 
=== Usages ===
a382 v1170 
=== Predecessor ===
i209 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1109  <|@  <|@
tid ?210 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?215 
values: i209 a316 a2 - - i1107 
=== Succesors ===
=== Usages ===
v1214 i1109 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?215 values: i209 a316 a2 - - i1107  <|@  <|@
f <@~|@floating>@ <|@
tid v1170 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1108 
=== Succesors ===
=== Usages ===
i1109 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1108  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1109 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-98571|0xfffffffffffe7ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?210 
guard: - 
address: v1170 
lastLocationAccess: - 
=== Succesors ===
next: i1110 
=== Usages ===
v389 
=== Predecessor ===
a1108 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?210 guard: - address: v1170 lastLocationAccess: - #next: i1110  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1110 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1164 
lastLocationAccess: - 
=== Succesors ===
next: v787 
=== Usages ===
j632 v389 
=== Predecessor ===
i1109 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1164 lastLocationAccess: - #next: v787  <|@  <|@
f <@~|@floating>@ <|@
tid v389 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1110 
y: i1109 
=== Succesors ===
=== Usages ===
v787 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1110 y: i1109  <|@  <|@
f <@*|@fixed>@ <|@
tid v787 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v389 
=== Succesors ===
trueSuccessor: v784 
falseSuccessor: v786 
=== Usages ===
=== Predecessor ===
i1110 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v389 #trueSuccessor: v784 #falseSuccessor: v786  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v784 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v396 
=== Usages ===
v396 
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v396  <|@  <|@
f <@~|@floating>@ <|@
tid a382 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1108 
=== Succesors ===
=== Usages ===
v1171 a243 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1108  <|@  <|@
f <@~|@floating>@ <|@
tid j632 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1110 
=== Succesors ===
=== Usages ===
v1171 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1110  <|@  <|@
f <@~|@floating>@ <|@
tid v1171 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a382 
index: j632 
=== Succesors ===
=== Usages ===
v396 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a382 index: j632  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v396 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v784 
address: v1171 
lastLocationAccess: - 
value: i1107 
stateAfter: - 
=== Succesors ===
next: v192 
=== Usages ===
=== Predecessor ===
v784 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v784 address: v1171 lastLocationAccess: - value: i1107 stateAfter: - #next: v192  <|@  <|@
f <@~|@floating>@ <|@
tid v189 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i209 
y: i19 
=== Succesors ===
=== Usages ===
v192 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i209 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v192 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v189 
=== Succesors ===
trueSuccessor: v191 
falseSuccessor: v190 
=== Usages ===
=== Predecessor ===
v396 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v189 #trueSuccessor: v191 #falseSuccessor: v190  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v191 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v93 
=== Usages ===
=== Predecessor ===
v192 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v93  <|@  <|@
f <@*|@fixed>@ <|@
tid v93 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v94 
=== Predecessor ===
v191 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i238 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v94 
values: i51 i125 
=== Succesors ===
=== Usages ===
?96 v98 j633 ?113 v432 i125 ?147 ?912 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v94 values: i51 i125  <|@  <|@
f <@~|@floating>@ <|@
tid a243 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v94 
values: a382 a480 
=== Succesors ===
=== Usages ===
v1178 v1179 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v94 values: a382 a480  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 96
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v93 
=== Succesors ===
next: a1111 
=== Usages ===
i238 v116 v121 v126 a243 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v93 #next: a1111  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1111 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1157 
lastLocationAccess: - 
=== Succesors ===
next: i1112 
=== Usages ===
a399 v1172 
=== Predecessor ===
v94 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1157 lastLocationAccess: - #next: i1112  <|@  <|@
tid ?148 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?96 ?113 ?147 ?912 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
tid ?96 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
v1001 i1112 a1116 i1119 v1117 v1122 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: a296 a2 i3 a4 i238  <|@  <|@
f <@~|@floating>@ <|@
tid v1172 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1111 
=== Succesors ===
=== Usages ===
i1112 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1111  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1112 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-102667|0xfffffffffffe6ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1172 
lastLocationAccess: - 
=== Succesors ===
next: v795 
=== Usages ===
v432 
=== Predecessor ===
a1111 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1172 lastLocationAccess: - #next: v795  <|@  <|@
f <@~|@floating>@ <|@
tid v432 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i238 
y: i1112 
=== Succesors ===
=== Usages ===
v795 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i238 y: i1112  <|@  <|@
f <@*|@fixed>@ <|@
tid v795 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v432 
=== Succesors ===
trueSuccessor: v792 
falseSuccessor: v794 
=== Usages ===
=== Predecessor ===
i1112 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v432 #trueSuccessor: v792 #falseSuccessor: v794  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v792 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1113 
=== Usages ===
=== Predecessor ===
v795 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1113  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1113 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v891 
=== Usages ===
v98 
=== Predecessor ===
v792 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v891  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i238 
y: i1113 
=== Succesors ===
=== Usages ===
v891 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i238 y: i1113  <|@  <|@
f <@*|@fixed>@ <|@
tid v891 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v889 
falseSuccessor: v890 
=== Usages ===
=== Predecessor ===
i1113 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v889 #falseSuccessor: v890  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v889 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1114 
=== Usages ===
=== Predecessor ===
v891 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1114  <|@  <|@
f <@~|@floating>@ <|@
tid a399 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1111 
=== Succesors ===
=== Usages ===
v1173 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1111  <|@  <|@
f <@~|@floating>@ <|@
tid j633 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i238 
=== Succesors ===
=== Usages ===
v1173 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i238  <|@  <|@
f <@~|@floating>@ <|@
tid v1173 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a399 
index: j633 
=== Succesors ===
=== Usages ===
a1114 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a399 index: j633  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1114 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1173 
lastLocationAccess: - 
=== Succesors ===
next: v108 
=== Usages ===
v634 a440 v1177 v1180 v1205 
=== Predecessor ===
v889 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1173 lastLocationAccess: - #next: v108  <|@  <|@
f <@~|@floating>@ <|@
tid v634 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1114 
=== Succesors ===
=== Usages ===
v108 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1114  <|@  <|@
f <@*|@fixed>@ <|@
tid v108 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v634 
=== Succesors ===
trueSuccessor: v107 
falseSuccessor: v106 
=== Usages ===
=== Predecessor ===
a1114 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v634 #trueSuccessor: v107 #falseSuccessor: v106  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v107 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1115 
=== Usages ===
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1115  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1115 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1160 
lastLocationAccess: - 
=== Succesors ===
next: a1116 
=== Usages ===
v1174 
=== Predecessor ===
v107 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1160 lastLocationAccess: - #next: a1116  <|@  <|@
f <@~|@floating>@ <|@
tid v1174 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1115 
=== Succesors ===
=== Usages ===
a1116 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1115  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1116 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-106763|0xfffffffffffe5ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1174 
lastLocationAccess: - 
=== Succesors ===
next: v1117 
=== Usages ===
a421 v1204 
=== Predecessor ===
a1115 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1174 lastLocationAccess: - #next: v1117  <|@  <|@
f <@~|@floating>@ <|@
tid v1204 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1116 
=== Succesors ===
=== Usages ===
v1117 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1116  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1117 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-108299|0xfffffffffffe58f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1204 
lastLocationAccess: - 
=== Succesors ===
next: v427 
=== Usages ===
v1060 
=== Predecessor ===
a1116 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1204 lastLocationAccess: - #next: v427  <|@  <|@
f <@~|@floating>@ <|@
tid v1060 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1117 
=== Succesors ===
=== Usages ===
v1175 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1117  <|@  <|@
f <@~|@floating>@ <|@
tid v1175 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1060 
index: - 
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1060 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v427 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1175 
lastLocationAccess: - 
=== Succesors ===
next: j429 
=== Usages ===
v1176 v430 
=== Predecessor ===
v1117 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1175 lastLocationAccess: - #next: j429  <|@  <|@
f <@~|@floating>@ <|@
tid v1176 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v427 
index: - 
=== Succesors ===
=== Usages ===
j429 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v427 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j429 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1176 
lastLocationAccess: - 
=== Succesors ===
next: i112 
=== Usages ===
v430 
=== Predecessor ===
v427 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1176 lastLocationAccess: - #next: i112  <|@  <|@
f <@~|@floating>@ <|@
tid a421 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1116 
=== Succesors ===
=== Usages ===
v430 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1116  <|@  <|@
tid v430 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j429 
metaspaceMethod: v427 
arguments: a421 a2 i3 a4 
=== Succesors ===
=== Usages ===
i112 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j429 metaspaceMethod: v427 arguments: a421 a2 i3 a4  <|@  <|@
tid ?912 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
i112 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: a296 a2 i3 a4 i238  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i112 <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v430 
stateDuring: ?912 
=== Succesors ===
next: v895 
=== Usages ===
v114 
=== Predecessor ===
j429 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v430 stateDuring: ?912 #next: v895  <|@  <|@
f <@~|@floating>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i112 
y: i19 
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i112 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v895 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v114 
=== Succesors ===
trueSuccessor: v894 
falseSuccessor: v116 
=== Usages ===
=== Predecessor ===
i112 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v114 #trueSuccessor: v894 #falseSuccessor: v116  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v894 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v893 
=== Usages ===
=== Predecessor ===
v895 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v893  <|@  <|@
tid ?113 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: i19 a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
v893 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: i19 a296 a2 i3 a4 i238  <|@  <|@
f <@*|@fixed>@ <|@
tid v893 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: UnreachedCode
speculation: {0x0000000000000514[index: 40, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?113 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v894 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?113  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v106 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1118 
=== Usages ===
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1118  <|@  <|@
f <@~|@floating>@ <|@
tid v1205 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1114 
=== Succesors ===
=== Usages ===
v1118 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1114  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1118 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1205 
lastLocationAccess: - 
=== Succesors ===
next: v807 
=== Usages ===
v1083 
=== Predecessor ===
v106 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1205 lastLocationAccess: - #next: v807  <|@  <|@
f <@~|@floating>@ <|@
tid v1083 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1118 
y: v1081 
=== Succesors ===
=== Usages ===
v807 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1118 y: v1081  <|@  <|@
f <@*|@fixed>@ <|@
tid v807 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1083 
=== Succesors ===
trueSuccessor: v804 
falseSuccessor: v806 
=== Usages ===
=== Predecessor ===
v1118 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1083 #trueSuccessor: v804 #falseSuccessor: v806  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v804 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1119 
=== Usages ===
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1119  <|@  <|@
f <@~|@floating>@ <|@
tid v1178 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a243 
index: - 
=== Succesors ===
=== Usages ===
i1119 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a243 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1119 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-114187|0xfffffffffffe41f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1178 
lastLocationAccess: - 
=== Succesors ===
next: i1120 
=== Usages ===
v459 
=== Predecessor ===
v804 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1178 lastLocationAccess: - #next: i1120  <|@  <|@
f <@~|@floating>@ <|@
tid v1177 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1114 
=== Succesors ===
=== Usages ===
i1120 i1126 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1114  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1120 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1177 
lastLocationAccess: - 
=== Succesors ===
next: v815 
=== Usages ===
v459 j638 
=== Predecessor ===
i1119 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1177 lastLocationAccess: - #next: v815  <|@  <|@
f <@~|@floating>@ <|@
tid v459 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1120 
y: i1119 
=== Succesors ===
=== Usages ===
v815 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1120 y: i1119  <|@  <|@
f <@*|@fixed>@ <|@
tid v815 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v459 
=== Succesors ===
trueSuccessor: v812 
falseSuccessor: v814 
=== Usages ===
=== Predecessor ===
i1120 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v459 #trueSuccessor: v812 #falseSuccessor: v814  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v812 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1121 
=== Usages ===
v466 
=== Predecessor ===
v815 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1121  <|@  <|@
f <@~|@floating>@ <|@
tid v1180 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1114 
=== Succesors ===
=== Usages ===
a1121 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1114  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1121 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1180 
lastLocationAccess: - 
=== Succesors ===
next: v1122 
=== Usages ===
a469 v1206 
=== Predecessor ===
v812 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1180 lastLocationAccess: - #next: v1122  <|@  <|@
f <@~|@floating>@ <|@
tid v1206 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1121 
=== Succesors ===
=== Usages ===
v1122 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1121  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1122 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-120587|0xfffffffffffe28f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1206 
lastLocationAccess: - 
=== Succesors ===
next: i1123 
=== Usages ===
v1067 
=== Predecessor ===
a1121 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1206 lastLocationAccess: - #next: i1123  <|@  <|@
f <@~|@floating>@ <|@
tid j638 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1120 
=== Succesors ===
=== Usages ===
v1179 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1120  <|@  <|@
f <@~|@floating>@ <|@
tid v1179 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a243 
index: j638 
=== Succesors ===
=== Usages ===
v466 i1123 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a243 index: j638  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1123 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1179 
lastLocationAccess: - 
=== Succesors ===
next: v466 
=== Usages ===
?913 ?142 v494 
=== Predecessor ===
v1122 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1179 lastLocationAccess: - #next: v466  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v812 
address: v1179 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v475 
=== Usages ===
=== Predecessor ===
i1123 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v812 address: v1179 lastLocationAccess: - value: i3 stateAfter: - #next: v475  <|@  <|@
f <@~|@floating>@ <|@
tid v1067 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1122 
=== Succesors ===
=== Usages ===
v1181 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1122  <|@  <|@
f <@~|@floating>@ <|@
tid v1181 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1067 
index: - 
=== Succesors ===
=== Usages ===
v475 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1067 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v475 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1181 
lastLocationAccess: - 
=== Succesors ===
next: j477 
=== Usages ===
v1182 v478 
=== Predecessor ===
v466 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1181 lastLocationAccess: - #next: j477  <|@  <|@
f <@~|@floating>@ <|@
tid v1182 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v475 
index: - 
=== Succesors ===
=== Usages ===
j477 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v475 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j477 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1182 
lastLocationAccess: - 
=== Succesors ===
next: i141 
=== Usages ===
v478 
=== Predecessor ===
v475 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1182 lastLocationAccess: - #next: i141  <|@  <|@
f <@~|@floating>@ <|@
tid a469 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1121 
=== Succesors ===
=== Usages ===
v478 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1121  <|@  <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j477 
metaspaceMethod: v475 
arguments: a469 a2 i3 a4 
=== Succesors ===
=== Usages ===
i141 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j477 metaspaceMethod: v475 arguments: a469 a2 i3 a4  <|@  <|@
tid ?147 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
?913 ?142 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: a296 a2 i3 a4 i238  <|@  <|@
f <@~|@floating>@ <|@
tid a440 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1114 
=== Succesors ===
=== Usages ===
?142 ?913 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1114  <|@  <|@
tid ?913 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?147 
values: a440 a2 - - i1123 
=== Succesors ===
=== Usages ===
i141 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?147 values: a440 a2 - - i1123  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i141 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v478 
stateDuring: ?913 
=== Succesors ===
next: a1124 
=== Usages ===
v120 ?142 
=== Predecessor ===
j477 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v478 stateDuring: ?913 #next: a1124  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1124 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1125 
=== Usages ===
a480 v1183 
=== Predecessor ===
i141 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1125  <|@  <|@
tid ?142 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?147 
values: i141 a440 a2 - - i1123 
=== Succesors ===
=== Usages ===
v1212 i1125 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?147 values: i141 a440 a2 - - i1123  <|@  <|@
f <@~|@floating>@ <|@
tid v1183 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1124 
=== Succesors ===
=== Usages ===
i1125 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1124  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1125 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-123659|0xfffffffffffe1cf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?142 
guard: - 
address: v1183 
lastLocationAccess: - 
=== Succesors ===
next: i1126 
=== Usages ===
v487 
=== Predecessor ===
a1124 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?142 guard: - address: v1183 lastLocationAccess: - #next: i1126  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1126 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1177 
lastLocationAccess: - 
=== Succesors ===
next: v827 
=== Usages ===
j639 v487 
=== Predecessor ===
i1125 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1177 lastLocationAccess: - #next: v827  <|@  <|@
f <@~|@floating>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1126 
y: i1125 
=== Succesors ===
=== Usages ===
v827 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1126 y: i1125  <|@  <|@
f <@*|@fixed>@ <|@
tid v827 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v487 
=== Succesors ===
trueSuccessor: v824 
falseSuccessor: v826 
=== Usages ===
=== Predecessor ===
i1126 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v487 #trueSuccessor: v824 #falseSuccessor: v826  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v824 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v494 
=== Usages ===
v494 
=== Predecessor ===
v827 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v494  <|@  <|@
f <@~|@floating>@ <|@
tid a480 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1124 
=== Succesors ===
=== Usages ===
v1184 a243 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1124  <|@  <|@
f <@~|@floating>@ <|@
tid j639 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1126 
=== Succesors ===
=== Usages ===
v1184 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1126  <|@  <|@
f <@~|@floating>@ <|@
tid v1184 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a480 
index: j639 
=== Succesors ===
=== Usages ===
v494 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a480 index: j639  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v494 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v824 
address: v1184 
lastLocationAccess: - 
value: i1123 
stateAfter: - 
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v824 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v824 address: v1184 lastLocationAccess: - value: i1123 stateAfter: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i141 
y: i19 
=== Succesors ===
=== Usages ===
v124 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i141 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v120 
=== Succesors ===
trueSuccessor: v123 
falseSuccessor: v121 
=== Usages ===
=== Predecessor ===
v494 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v120 #trueSuccessor: v123 #falseSuccessor: v121  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v123 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v126 
=== Usages ===
=== Predecessor ===
v124 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v126  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
=== Inputs ===
x: i238 
y: i51 
=== Succesors ===
=== Usages ===
i238 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i238 y: i51  <|@  <|@
f <@*|@fixed>@ <|@
tid v126 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
loopBegin: v94 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v123 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v94  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v94 
=== Succesors ===
next: v163 
=== Usages ===
=== Predecessor ===
v124 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v94 #next: v163  <|@  <|@
f <@*|@fixed>@ <|@
tid v163 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v121 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v116 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v94 
=== Succesors ===
next: v81 
=== Usages ===
=== Predecessor ===
v895 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v94 #next: v81  <|@  <|@
f <@*|@fixed>@ <|@
tid v81 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v116 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v826 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1212 
=== Usages ===
=== Predecessor ===
v827 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1212  <|@  <|@
f <@*|@fixed>@ <|@
tid v1212 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 488
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?142 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v826 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?142  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v814 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1016 
=== Usages ===
=== Predecessor ===
v815 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1016  <|@  <|@
f <@~|@floating>@ <|@
tid i1017 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -117787
stableDimension: 0
stamp: i32 [-117787]
stampKind: i32
value: int[-117787|0xfffffffffffe33e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1016 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v814 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v806 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1012 
=== Usages ===
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1012  <|@  <|@
f <@~|@floating>@ <|@
tid i1013 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -113203
stableDimension: 0
stamp: i32 [-113203]
stampKind: i32
value: int[-113203|0xfffffffffffe45cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1012 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v806 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v890 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1006 
=== Usages ===
=== Predecessor ===
v891 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1006  <|@  <|@
f <@~|@floating>@ <|@
tid i1007 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -227347
stableDimension: 0
stamp: i32 [-227347]
stampKind: i32
value: int[-227347|0xfffffffffffc87ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1006 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v890 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v794 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1004 
=== Usages ===
=== Predecessor ===
v795 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1004  <|@  <|@
f <@~|@floating>@ <|@
tid i1005 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -103963
stableDimension: 0
stamp: i32 [-103963]
stampKind: i32
value: int[-103963|0xfffffffffffe69e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1004 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v794 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i999 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [-227347 - -103963] bits:1...1x0xxxxxxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v996 
values: i1005 i1007 i1013 i1017 
=== Succesors ===
=== Usages ===
v1001 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v996 values: i1005 i1007 i1013 i1017  <|@  <|@
f <@~|@floating>@ <|@
tid j1000 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64 [0 - 1940] bits:0...0xxxx00x0x00
valueDescription: i64
=== Inputs ===
merge: v996 
values: j934 j949 j956 j934 
=== Succesors ===
=== Usages ===
v1001 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v996 values: j934 j949 j956 j934  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v996 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1004 v1006 v1012 v1016 
=== Succesors ===
next: v1001 
=== Usages ===
i999 j1000 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v1004 v1006 v1012 v1016 #next: v1001  <|@  <|@
f <@*|@fixed>@ <|@
tid v1001 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateBefore: ?96 
actionAndReason: i999 
speculation: j1000 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v996 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?96 actionAndReason: i999 speculation: j1000  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v190 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v241 
=== Usages ===
=== Predecessor ===
v192 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v241  <|@  <|@
f <@*|@fixed>@ <|@
tid v241 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v190 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v786 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1214 
=== Usages ===
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1214  <|@  <|@
f <@*|@fixed>@ <|@
tid v1214 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 390
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?210 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v786 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?210  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v774 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v986 
=== Usages ===
=== Predecessor ===
v775 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v986  <|@  <|@
f <@~|@floating>@ <|@
tid i987 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -92699
stableDimension: 0
stamp: i32 [-92699]
stampKind: i32
value: int[-92699|0xfffffffffffe95e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v986 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v774 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v762 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v982 
=== Usages ===
=== Predecessor ===
v763 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v982  <|@  <|@
f <@~|@floating>@ <|@
tid i983 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -86579
stableDimension: 0
stamp: i32 [-86579]
stampKind: i32
value: int[-86579|0xfffffffffffeadcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v982 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v762 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v82 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: i1127 
=== Usages ===
=== Predecessor ===
v90 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1127  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1127 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-129035|0xfffffffffffe07f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: i1128 
=== Usages ===
v517 
=== Predecessor ===
v82 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1165 lastLocationAccess: - #next: i1128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1128 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v839 
=== Usages ===
v517 j641 
=== Predecessor ===
i1127 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v839  <|@  <|@
f <@~|@floating>@ <|@
tid v517 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1128 
y: i1127 
=== Succesors ===
=== Usages ===
v839 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1128 y: i1127  <|@  <|@
f <@*|@fixed>@ <|@
tid v839 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v517 
=== Succesors ===
trueSuccessor: v836 
falseSuccessor: v838 
=== Usages ===
=== Predecessor ===
i1128 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v517 #trueSuccessor: v836 #falseSuccessor: v838  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v836 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1129 
=== Usages ===
v524 
=== Predecessor ===
v839 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1129  <|@  <|@
f <@~|@floating>@ <|@
tid v1186 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
a1129 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1129 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1186 
lastLocationAccess: - 
=== Succesors ===
next: v1130 
=== Usages ===
a527 v1207 
=== Predecessor ===
v836 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1186 lastLocationAccess: - #next: v1130  <|@  <|@
f <@~|@floating>@ <|@
tid v1207 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1129 
=== Succesors ===
=== Usages ===
v1130 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1129  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1130 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-135435|0xfffffffffffdeef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1207 
lastLocationAccess: - 
=== Succesors ===
next: i1131 
=== Usages ===
v1071 
=== Predecessor ===
a1129 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1207 lastLocationAccess: - #next: i1131  <|@  <|@
f <@~|@floating>@ <|@
tid j641 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1128 
=== Succesors ===
=== Usages ===
v1185 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1128  <|@  <|@
f <@~|@floating>@ <|@
tid v1185 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a569 
index: j641 
=== Succesors ===
=== Usages ===
v524 i1131 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a569 index: j641  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1131 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1185 
lastLocationAccess: - 
=== Succesors ===
next: v524 
=== Usages ===
?909 ?157 v552 ?161 
=== Predecessor ===
v1130 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1185 lastLocationAccess: - #next: v524  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v524 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v836 
address: v1185 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v533 
=== Usages ===
=== Predecessor ===
i1131 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v836 address: v1185 lastLocationAccess: - value: i3 stateAfter: - #next: v533  <|@  <|@
f <@~|@floating>@ <|@
tid v1071 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1130 
=== Succesors ===
=== Usages ===
v1187 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1130  <|@  <|@
f <@~|@floating>@ <|@
tid v1187 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1071 
index: - 
=== Succesors ===
=== Usages ===
v533 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1071 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v533 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1187 
lastLocationAccess: - 
=== Succesors ===
next: j535 
=== Usages ===
v1188 v536 
=== Predecessor ===
v524 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1187 lastLocationAccess: - #next: j535  <|@  <|@
f <@~|@floating>@ <|@
tid v1188 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v533 
index: - 
=== Succesors ===
=== Usages ===
j535 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v533 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j535 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1188 
lastLocationAccess: - 
=== Succesors ===
next: i156 
=== Usages ===
v536 
=== Predecessor ===
v533 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1188 lastLocationAccess: - #next: i156  <|@  <|@
f <@~|@floating>@ <|@
tid a527 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1129 
=== Succesors ===
=== Usages ===
v536 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1129  <|@  <|@
tid v536 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j535 
metaspaceMethod: v533 
arguments: a527 a2 i3 a4 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j535 metaspaceMethod: v533 arguments: a527 a2 i3 a4  <|@  <|@
tid ?162 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?909 ?157 ?161 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
tid ?909 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?162 
values: a296 a2 - - i1131 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?162 values: a296 a2 - - i1131  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v536 
stateDuring: ?909 
=== Succesors ===
next: a1132 
=== Usages ===
v40 ?157 
=== Predecessor ===
j535 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v536 stateDuring: ?909 #next: a1132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1132 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1133 
=== Usages ===
a538 v1189 
=== Predecessor ===
i156 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1133  <|@  <|@
tid ?157 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?162 
values: i156 a296 a2 - - i1131 
=== Succesors ===
=== Usages ===
v1213 i1133 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?162 values: i156 a296 a2 - - i1131  <|@  <|@
f <@~|@floating>@ <|@
tid v1189 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1132 
=== Succesors ===
=== Usages ===
i1133 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1133 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-138507|0xfffffffffffde2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?157 
guard: - 
address: v1189 
lastLocationAccess: - 
=== Succesors ===
next: i1134 
=== Usages ===
v545 
=== Predecessor ===
a1132 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?157 guard: - address: v1189 lastLocationAccess: - #next: i1134  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1134 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v851 
=== Usages ===
j642 v545 
=== Predecessor ===
i1133 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v851  <|@  <|@
f <@~|@floating>@ <|@
tid v545 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1134 
y: i1133 
=== Succesors ===
=== Usages ===
v851 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1134 y: i1133  <|@  <|@
f <@*|@fixed>@ <|@
tid v851 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v545 
=== Succesors ===
trueSuccessor: v848 
falseSuccessor: v850 
=== Usages ===
=== Predecessor ===
i1134 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v545 #trueSuccessor: v848 #falseSuccessor: v850  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v848 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v552 
=== Usages ===
v552 
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v552  <|@  <|@
f <@~|@floating>@ <|@
tid a538 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1132 
=== Succesors ===
=== Usages ===
v1190 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1132  <|@  <|@
f <@~|@floating>@ <|@
tid j642 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1134 
=== Succesors ===
=== Usages ===
v1190 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1134  <|@  <|@
f <@~|@floating>@ <|@
tid v1190 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a538 
index: j642 
=== Succesors ===
=== Usages ===
v552 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a538 index: j642  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v552 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v848 
address: v1190 
lastLocationAccess: - 
value: i1131 
stateAfter: - 
=== Succesors ===
next: v900 
=== Usages ===
=== Predecessor ===
v848 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v848 address: v1190 lastLocationAccess: - value: i1131 stateAfter: - #next: v900  <|@  <|@
f <@~|@floating>@ <|@
tid v40 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i156 
y: i19 
=== Succesors ===
=== Usages ===
v900 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i156 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v900 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v40 
=== Succesors ===
trueSuccessor: v899 
falseSuccessor: v903 
=== Usages ===
=== Predecessor ===
v552 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v40 #trueSuccessor: v899 #falseSuccessor: v903  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v899 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v898 
=== Usages ===
=== Predecessor ===
v900 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v898  <|@  <|@
tid ?161 <|@
d <@d|@=== Debug Properties ===
bci: 44
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4971
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?162 
values: a296 a2 - - i1131 i19 
=== Succesors ===
=== Usages ===
v898 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?162 values: a296 a2 - - i1131 i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v898 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: UnreachedCode
speculation: {0x0000000000000514[index: 40, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?161 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v899 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?161  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v903 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v904 
=== Usages ===
=== Predecessor ===
v900 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v904  <|@  <|@
f <@*|@fixed>@ <|@
tid v904 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v903 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v902 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v904 v81 v163 v241 v242 
=== Succesors ===
next: v42 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v904 v81 v163 v241 v242 #next: v42  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v850 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1213 
=== Usages ===
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1213  <|@  <|@
f <@*|@fixed>@ <|@
tid v1213 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 546
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?157 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v850 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?157  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v838 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v974 
=== Usages ===
=== Predecessor ===
v839 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v974  <|@  <|@
f <@~|@floating>@ <|@
tid i975 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -132635
stableDimension: 0
stamp: i32 [-132635]
stampKind: i32
value: int[-132635|0xfffffffffffdf9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v974 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v838 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v85 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v965 
=== Usages ===
=== Predecessor ===
v90 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v965  <|@  <|@
f <@~|@floating>@ <|@
tid j967 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 4500
stableDimension: 0
stamp: i64 [4500]
stampKind: i64
value: long[4500|0x1194]
=== Inputs ===
=== Succesors ===
=== Usages ===
j941 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i966 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -21555
stableDimension: 0
stamp: i32 [-21555]
stampKind: i32
value: int[-21555|0xffffffffffffabcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v965 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v85 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1135 
=== Usages ===
=== Predecessor ===
v35 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1135  <|@  <|@
f <@~|@floating>@ <|@
tid v1208 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1090 
=== Succesors ===
=== Usages ===
v1135 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1090  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1135 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1208 
lastLocationAccess: - 
=== Succesors ===
next: v855 
=== Usages ===
v1084 
=== Predecessor ===
v33 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1208 lastLocationAccess: - #next: v855  <|@  <|@
f <@~|@floating>@ <|@
tid v1084 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1135 
y: v1081 
=== Succesors ===
=== Usages ===
v855 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1135 y: v1081  <|@  <|@
f <@*|@fixed>@ <|@
tid v855 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1084 
=== Succesors ===
trueSuccessor: v852 
falseSuccessor: v854 
=== Usages ===
=== Predecessor ===
v1135 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1084 #trueSuccessor: v852 #falseSuccessor: v854  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v852 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1136 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1136  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1136 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-146699|0xfffffffffffdc2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: i1137 
=== Usages ===
v586 
=== Predecessor ===
v852 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1165 lastLocationAccess: - #next: i1137  <|@  <|@
f <@~|@floating>@ <|@
tid v1192 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1090 
=== Succesors ===
=== Usages ===
i1137 i1143 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1090  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1137 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1192 
lastLocationAccess: - 
=== Succesors ===
next: v863 
=== Usages ===
v586 j646 
=== Predecessor ===
i1136 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1192 lastLocationAccess: - #next: v863  <|@  <|@
f <@~|@floating>@ <|@
tid v586 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1137 
y: i1136 
=== Succesors ===
=== Usages ===
v863 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1137 y: i1136  <|@  <|@
f <@*|@fixed>@ <|@
tid v863 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v586 
=== Succesors ===
trueSuccessor: v860 
falseSuccessor: v862 
=== Usages ===
=== Predecessor ===
i1137 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v586 #trueSuccessor: v860 #falseSuccessor: v862  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v860 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1138 
=== Usages ===
v593 
=== Predecessor ===
v863 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1138  <|@  <|@
f <@~|@floating>@ <|@
tid v1194 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1090 
=== Succesors ===
=== Usages ===
a1138 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1090  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1138 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1194 
lastLocationAccess: - 
=== Succesors ===
next: v1139 
=== Usages ===
a596 v1209 
=== Predecessor ===
v860 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1194 lastLocationAccess: - #next: v1139  <|@  <|@
f <@~|@floating>@ <|@
tid v1209 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1138 
=== Succesors ===
=== Usages ===
v1139 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1138  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1139 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-153099|0xfffffffffffda9f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1209 
lastLocationAccess: - 
=== Succesors ===
next: i1140 
=== Usages ===
v1077 
=== Predecessor ===
a1138 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1209 lastLocationAccess: - #next: i1140  <|@  <|@
f <@~|@floating>@ <|@
tid j646 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1137 
=== Succesors ===
=== Usages ===
v1193 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1137  <|@  <|@
f <@~|@floating>@ <|@
tid v1193 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a569 
index: j646 
=== Succesors ===
=== Usages ===
v593 i1140 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a569 index: j646  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1140 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1193 
lastLocationAccess: - 
=== Succesors ===
next: v593 
=== Usages ===
?908 ?72 v621 
=== Predecessor ===
v1139 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1193 lastLocationAccess: - #next: v593  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v593 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v860 
address: v1193 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v602 
=== Usages ===
=== Predecessor ===
i1140 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v860 address: v1193 lastLocationAccess: - value: i3 stateAfter: - #next: v602  <|@  <|@
f <@~|@floating>@ <|@
tid v1077 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1139 
=== Succesors ===
=== Usages ===
v1195 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1139  <|@  <|@
f <@~|@floating>@ <|@
tid v1195 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1077 
index: - 
=== Succesors ===
=== Usages ===
v602 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1077 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v602 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1195 
lastLocationAccess: - 
=== Succesors ===
next: j604 
=== Usages ===
v1196 v605 
=== Predecessor ===
v593 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1195 lastLocationAccess: - #next: j604  <|@  <|@
f <@~|@floating>@ <|@
tid v1196 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v602 
index: - 
=== Succesors ===
=== Usages ===
j604 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v602 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j604 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1196 
lastLocationAccess: - 
=== Succesors ===
next: i71 
=== Usages ===
v605 
=== Predecessor ===
v602 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1196 lastLocationAccess: - #next: i71  <|@  <|@
f <@~|@floating>@ <|@
tid a596 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1138 
=== Succesors ===
=== Usages ===
v605 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1138  <|@  <|@
tid v605 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j604 
metaspaceMethod: v602 
arguments: a596 a2 i3 a4 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j604 metaspaceMethod: v602 arguments: a596 a2 i3 a4  <|@  <|@
tid ?77 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?908 ?72 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
f <@~|@floating>@ <|@
tid a562 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1090 
=== Succesors ===
=== Usages ===
?72 ?908 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1090  <|@  <|@
tid ?908 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?77 
values: a562 a2 - - i1140 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?77 values: a562 a2 - - i1140  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i71 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v605 
stateDuring: ?908 
=== Succesors ===
next: a1141 
=== Usages ===
v46 ?72 
=== Predecessor ===
j604 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v605 stateDuring: ?908 #next: a1141  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1141 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1142 
=== Usages ===
a607 v1197 
=== Predecessor ===
i71 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1142  <|@  <|@
tid ?72 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?77 
values: i71 a562 a2 - - i1140 
=== Succesors ===
=== Usages ===
v1211 i1142 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?77 values: i71 a562 a2 - - i1140  <|@  <|@
f <@~|@floating>@ <|@
tid v1197 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1141 
=== Succesors ===
=== Usages ===
i1142 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1141  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1142 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-156171|0xfffffffffffd9df5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?72 
guard: - 
address: v1197 
lastLocationAccess: - 
=== Succesors ===
next: i1143 
=== Usages ===
v614 
=== Predecessor ===
a1141 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?72 guard: - address: v1197 lastLocationAccess: - #next: i1143  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1143 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1192 
lastLocationAccess: - 
=== Succesors ===
next: v875 
=== Usages ===
j647 v614 
=== Predecessor ===
i1142 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1192 lastLocationAccess: - #next: v875  <|@  <|@
f <@~|@floating>@ <|@
tid v614 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1143 
y: i1142 
=== Succesors ===
=== Usages ===
v875 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1143 y: i1142  <|@  <|@
f <@*|@fixed>@ <|@
tid v875 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v614 
=== Succesors ===
trueSuccessor: v872 
falseSuccessor: v874 
=== Usages ===
=== Predecessor ===
i1143 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v614 #trueSuccessor: v872 #falseSuccessor: v874  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v872 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v621 
=== Usages ===
v621 
=== Predecessor ===
v875 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v621  <|@  <|@
f <@~|@floating>@ <|@
tid a607 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1141 
=== Succesors ===
=== Usages ===
v1198 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1141  <|@  <|@
f <@~|@floating>@ <|@
tid j647 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1143 
=== Succesors ===
=== Usages ===
v1198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1143  <|@  <|@
f <@~|@floating>@ <|@
tid v1198 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a607 
index: j647 
=== Succesors ===
=== Usages ===
v621 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a607 index: j647  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v621 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v872 
address: v1198 
lastLocationAccess: - 
value: i1140 
stateAfter: - 
=== Succesors ===
next: v50 
=== Usages ===
=== Predecessor ===
v872 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v872 address: v1198 lastLocationAccess: - value: i1140 stateAfter: - #next: v50  <|@  <|@
f <@~|@floating>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i71 
y: i19 
=== Succesors ===
=== Usages ===
v50 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i71 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v46 
=== Succesors ===
trueSuccessor: v49 
falseSuccessor: v47 
=== Usages ===
=== Predecessor ===
v621 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v46 #trueSuccessor: v49 #falseSuccessor: v47  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v53 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v53  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
=== Inputs ===
x: i22 
y: i51 
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i22 y: i51  <|@  <|@
f <@*|@fixed>@ <|@
tid v53 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
loopBegin: v21 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v49 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v21  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v21 
=== Succesors ===
next: v167 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v21 #next: v167  <|@  <|@
f <@*|@fixed>@ <|@
tid v167 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v165 
=== Predecessor ===
v47 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v42 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v21 
=== Succesors ===
next: v166 
=== Usages ===
=== Predecessor ===
v902 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v21 #next: v166  <|@  <|@
f <@*|@fixed>@ <|@
tid v166 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v165 
=== Predecessor ===
v42 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
ends: v166 v167 
=== Succesors ===
next: v10 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v166 v167 #next: v10  <|@  <|@
f <@*|@fixed>@ <|@
tid v10 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 10]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v165 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v874 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1211 
=== Usages ===
=== Predecessor ===
v875 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1211  <|@  <|@
f <@*|@fixed>@ <|@
tid v1211 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 615
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?72 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v874 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?72  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v862 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v961 
=== Usages ===
=== Predecessor ===
v863 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v961  <|@  <|@
f <@~|@floating>@ <|@
tid i962 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -150299
stableDimension: 0
stamp: i32 [-150299]
stampKind: i32
value: int[-150299|0xfffffffffffdb4e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v961 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v862 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v854 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v954 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v954  <|@  <|@
f <@~|@floating>@ <|@
tid i955 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -144435
stableDimension: 0
stamp: i32 [-144435]
stampKind: i32
value: int[-144435|0xfffffffffffdcbcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v954 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v854 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v878 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v947 
=== Usages ===
=== Predecessor ===
v879 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v947  <|@  <|@
f <@~|@floating>@ <|@
tid i948 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -224275
stableDimension: 0
stamp: i32 [-224275]
stampKind: i32
value: int[-224275|0xfffffffffffc93ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v947 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v878 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v734 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v945 
=== Usages ===
=== Predecessor ===
v735 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v945  <|@  <|@
f <@~|@floating>@ <|@
tid i946 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -71195
stableDimension: 0
stamp: i32 [-71195]
stampKind: i32
value: int[-71195|0xfffffffffffee9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v945 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v734 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i940 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [-225299 - -21555] bits:1...1xx1xxxxxxx11x0x101
valueDescription: i32
=== Inputs ===
merge: v937 
values: i946 i948 i955 i962 i966 i969 i973 i975 i983 i987 
=== Succesors ===
=== Usages ===
v942 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v937 values: i946 i948 i955 i962 i966 i969 i973 i975 i983 i987  <|@  <|@
f <@~|@floating>@ <|@
tid j941 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64 [0 - 4500] bits:0...0x0xxxx00x0x00
valueDescription: i64
=== Inputs ===
merge: v937 
values: j934 j949 j956 j934 j967 j934 j949 j934 j956 j934 
=== Succesors ===
=== Usages ===
v942 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v937 values: j934 j949 j956 j934 j967 j934 j949 j934 j956 j934  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v937 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v945 v947 v954 v961 v965 v968 v972 v974 v982 v986 
=== Succesors ===
next: v942 
=== Usages ===
i940 j941 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v945 v947 v954 v961 v965 v968 v972 v974 v982 v986 #next: v942  <|@  <|@
f <@*|@fixed>@ <|@
tid v942 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateBefore: ?23 
actionAndReason: i940 
speculation: j941 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v937 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?23 actionAndReason: i940 speculation: j941  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v726 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1210 
=== Usages ===
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1210  <|@  <|@
f <@*|@fixed>@ <|@
tid v1210 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 264
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: TypeCheckedInliningViolated
speculation: {0x0000000000000014[index: 0, len: 20, hash: 0x65c1a1a0]: FallbackDeopt@9[HotSpotMethod<Pattern$BranchConn.match(Matcher, int, CharSequence)>, 7, FALSE, jdk.graal.compiler.phases.common.inlining.InliningUtil$ReceiverTypeSpeculationContext, HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>]}
stamp: void
=== Inputs ===
stateBefore: ?5 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v726 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?5  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr   -1  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v1148 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v1148  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$BranchConn
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v1149 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?162 ?23 ?161 ?912 v1191 ?913 v605 ?72 ?215 v380 ?77 ?96 v430 ?113 ?210 ?908 v478 ?142 ?909 ?910 ?147 ?148 v1148 ?911 v536 ?157 ?216 v336 ?183 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?162 ?23 v536 v380 v593 ?215 v605 ?77 ?96 v430 ?113 v466 ?216 v478 ?147 ?148 v524 ?910 v336 ?183 v368 ?912 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
result v3|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?162 ?23 v536 v380 ?215 v605 ?77 ?96 v430 ?113 ?216 v478 ?147 ?148 ?910 v336 ?183 ?912 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v1210 v1148 v1086 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1148 <|@
d <@d|@=== Debug Properties ===
deoptReasonAndAction: int[-144651|0xfffffffffffdcaf5]
deoptSpeculation: long[5144|0x1418]
stamp: void
=== Inputs ===
stateBefore: ?5 
object: a2 
=== Succesors ===
next: a1085 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@NullCheck|@jdk.graal.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?5 object: a2 #next: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid v1149 <|@
result [v0|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a1085 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1085 <|@
result v4|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1149 
lastLocationAccess: - 
=== Succesors ===
next: v1086 
=== Usages ===
a262 v1150 v1151 v1154 v1199 
=== Predecessor ===
v1148 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1149 lastLocationAccess: - #next: v1086  <|@  <|@
f <@~|@floating>@ <|@
tid v1199 <|@
result [v4|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
v1086 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1086 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-67339|0xfffffffffffef8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1199 
lastLocationAccess: - 
=== Succesors ===
next: v727 
=== Usages ===
v1080 
=== Predecessor ===
a1085 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1199 lastLocationAccess: - #next: v727  <|@  <|@
f <@~|@floating>@ <|@
tid v1079 <|@
result meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1080 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1080 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1086 
y: v1079 
=== Succesors ===
=== Usages ===
v727 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1086 y: v1079  <|@  <|@
f <@*|@fixed>@ <|@
tid v727 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1080 
=== Succesors ===
trueSuccessor: v724 
falseSuccessor: v726 
=== Usages ===
=== Predecessor ===
v1086 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1080 #trueSuccessor: v724 #falseSuccessor: v726  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v724 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v20 
=== Usages ===
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v20  <|@  <|@
f <@~|@floating>@ <|@
tid v1150 <|@
result [v4|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
i1089 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid a262 <|@
result v5|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1085 
=== Succesors ===
=== Usages ===
?148 ?77 ?162 ?23 ?216 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid v1151 <|@
result [v4|DWORD[_] * 8 + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
a1087 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@~|@floating>@ <|@
tid j949 <|@
result long[660|0x294] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 660
stableDimension: 0
stamp: i64 [660]
stampKind: i64
value: long[660|0x294]
=== Inputs ===
=== Succesors ===
=== Usages ===
j941 j941 j1000 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j956 <|@
result long[1940|0x794] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 1940
stableDimension: 0
stamp: i64 [1940]
stampKind: i64
value: long[1940|0x794]
=== Inputs ===
=== Succesors ===
=== Usages ===
j941 j941 j1000 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j934 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j1000 j1000 j941 j941 j941 j941 j941 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1081 <|@
result meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1082 v1083 v1084 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i51 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i52 i125 v10 i238 v239 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1191 <|@
result [v1|QWORD[.] + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a1091 a1141 a1124 a1108 a1132 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
tid ?164 <|@
d <@d|@=== Debug Properties ===
bci: 7
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
=== Succesors ===
=== Usages ===
?23 ?77 ?148 ?162 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: -  <|@  <|@
f <@~|@floating>@ <|@
tid i19 <|@
result int[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i22 v40 v46 ?215 v114 v120 v189 v308 ?183 v184 ?910 ?183 ?113 ?161 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v20 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v21 
=== Predecessor ===
v724 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i22 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v21 
values: i19 i52 
=== Succesors ===
=== Usages ===
?23 v25 j624 ?216 v554 i52 ?77 ?148 ?162 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v21 values: i19 i52  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
osrLoop: false
peelings: 0
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v20 
=== Succesors ===
next: a1087 
=== Usages ===
i22 v42 v47 v53 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v20 #next: a1087  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1087 <|@
result v7|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1151 
lastLocationAccess: - 
=== Succesors ===
next: i1088 
=== Usages ===
a271 v1152 
=== Predecessor ===
v21 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1151 lastLocationAccess: - #next: i1088  <|@  <|@
tid ?23 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
v942 i1088 a1093 i1136 v1094 v1139 i1096 i1127 v1130 a1100 i1103 v1101 v1106 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
f <@~|@floating>@ <|@
tid v1152 <|@
result [v7|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1087 
=== Succesors ===
=== Usages ===
i1088 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1087  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1088 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-69899|0xfffffffffffeeef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1152 
lastLocationAccess: - 
=== Succesors ===
next: v735 
=== Usages ===
v554 
=== Predecessor ===
a1087 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1152 lastLocationAccess: - #next: v735  <|@  <|@
f <@~|@floating>@ <|@
tid v554 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i22 
y: i1088 
=== Succesors ===
=== Usages ===
v735 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i22 y: i1088  <|@  <|@
f <@*|@fixed>@ <|@
tid v735 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v554 
=== Succesors ===
trueSuccessor: v732 
falseSuccessor: v734 
=== Usages ===
=== Predecessor ===
i1088 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v554 #trueSuccessor: v732 #falseSuccessor: v734  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v732 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1089 
=== Usages ===
=== Predecessor ===
v735 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1089  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1089 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1150 
lastLocationAccess: - 
=== Succesors ===
next: v879 
=== Usages ===
v25 
=== Predecessor ===
v732 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1150 lastLocationAccess: - #next: v879  <|@  <|@
f <@~|@floating>@ <|@
tid v25 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i22 
y: i1089 
=== Succesors ===
=== Usages ===
v879 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i22 y: i1089  <|@  <|@
f <@*|@fixed>@ <|@
tid v879 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v25 
=== Succesors ===
trueSuccessor: v877 
falseSuccessor: v878 
=== Usages ===
=== Predecessor ===
i1089 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v25 #trueSuccessor: v877 #falseSuccessor: v878  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v877 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1090 
=== Usages ===
=== Predecessor ===
v879 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1090  <|@  <|@
f <@~|@floating>@ <|@
tid a271 <|@
result v8|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1087 
=== Succesors ===
=== Usages ===
v1153 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1087  <|@  <|@
f <@~|@floating>@ <|@
tid j624 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i22 
=== Succesors ===
=== Usages ===
v1153 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i22  <|@  <|@
f <@~|@floating>@ <|@
tid v1153 <|@
result [v8|QWORD[.] + v6|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a271 
index: j624 
=== Succesors ===
=== Usages ===
a1090 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a271 index: j624  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1090 <|@
result v9|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1153 
lastLocationAccess: - 
=== Succesors ===
next: a1091 
=== Usages ===
v625 a562 v1192 v1194 v1208 
=== Predecessor ===
v877 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1153 lastLocationAccess: - #next: a1091  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1091 <|@
result v10|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: v35 
=== Usages ===
a569 v1165 
=== Predecessor ===
a1090 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: v35  <|@  <|@
f <@~|@floating>@ <|@
tid a569 <|@
result v11|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1091 
=== Succesors ===
=== Usages ===
v1193 v1166 v1185 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1091  <|@  <|@
f <@~|@floating>@ <|@
tid v1165 <|@
result [v10|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1091 
=== Succesors ===
=== Usages ===
i1103 i1127 i1136 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1091  <|@  <|@
f <@~|@floating>@ <|@
tid v625 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1090 
=== Succesors ===
=== Usages ===
v35 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1090  <|@  <|@
f <@*|@fixed>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v625 
=== Succesors ===
trueSuccessor: v34 
falseSuccessor: v33 
=== Usages ===
=== Predecessor ===
a1091 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v625 #trueSuccessor: v34 #falseSuccessor: v33  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1092 
=== Usages ===
=== Predecessor ===
v35 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1092  <|@  <|@
f <@~|@floating>@ <|@
tid v1154 <|@
result [v4|DWORD[_] * 8 + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1085 
=== Succesors ===
=== Usages ===
a1092 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1085  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1092 <|@
result v12|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1154 
lastLocationAccess: - 
=== Succesors ===
next: a1093 
=== Usages ===
v1155 
=== Predecessor ===
v34 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1154 lastLocationAccess: - #next: a1093  <|@  <|@
f <@~|@floating>@ <|@
tid v1155 <|@
result [v12|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1092 
=== Succesors ===
=== Usages ===
a1093 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1092  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1093 <|@
result v13|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-74763|0xfffffffffffedbf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1155 
lastLocationAccess: - 
=== Succesors ===
next: v1094 
=== Usages ===
a296 v1156 v1157 v1160 v1186 v1200 
=== Predecessor ===
a1092 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1155 lastLocationAccess: - #next: v1094  <|@  <|@
f <@~|@floating>@ <|@
tid v1200 <|@
result [v13|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
v1094 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1094 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-76043|0xfffffffffffed6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1200 
lastLocationAccess: - 
=== Succesors ===
next: v90 
=== Usages ===
v1048 
=== Predecessor ===
a1093 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1200 lastLocationAccess: - #next: v90  <|@  <|@
f <@~|@floating>@ <|@
tid v1048 <|@
result v15|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1094 
=== Succesors ===
=== Usages ===
v90 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1094  <|@  <|@
f <@~|@floating>@ <|@
tid a296 <|@
result v17|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1093 
=== Succesors ===
=== Usages ===
?161 ?157 ?912 ?96 ?183 ?909 ?910 ?113 ?215 ?147 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1093  <|@  <|@
f <@~|@floating>@ <|@
tid v1156 <|@
result [v13|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
i1097 i1113 i1128 i1134 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@*|@fixed>@ <|@
tid v90 <|@
d <@d|@=== Debug Properties ===
hubs: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}]
keySuccessors: [I@3b7ec611
keys: [HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>, HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>]
profileData: PROFILED keyProbabilities: [0.6666288834409075, 0.3333711165590924, 0.0]
stamp: void
=== Inputs ===
value: v1048 
=== Succesors ===
successors: v80 v82 v85 
=== Usages ===
=== Predecessor ===
v1094 >@ <|@
instruction <@TypeSwitch|@jdk.graal.compiler.nodes.java.TypeSwitchNode>@ value: v1048 #successors: v80 v82 v85  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v80 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: a1095 
=== Usages ===
=== Predecessor ===
v90 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1095  <|@  <|@
f <@~|@floating>@ <|@
tid v1157 <|@
result [v13|DWORD[_] * 8 + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
a1095 a1111 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1095 <|@
result v18|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1157 
lastLocationAccess: - 
=== Succesors ===
next: i1096 
=== Usages ===
v1159 v1158 
=== Predecessor ===
v80 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1157 lastLocationAccess: - #next: i1096  <|@  <|@
f <@~|@floating>@ <|@
tid v1158 <|@
result [v18|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1095 
=== Succesors ===
=== Usages ===
i1096 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1095  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1096 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-77835|0xfffffffffffecff5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1158 
lastLocationAccess: - 
=== Succesors ===
next: v751 
=== Usages ===
v308 
=== Predecessor ===
a1095 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1158 lastLocationAccess: - #next: v751  <|@  <|@
f <@~|@floating>@ <|@
tid v308 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1096 
y: i19 
=== Succesors ===
=== Usages ===
v751 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i1096 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v751 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v308 
=== Succesors ===
trueSuccessor: v750 
falseSuccessor: v748 
=== Usages ===
=== Predecessor ===
i1096 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v308 #trueSuccessor: v750 #falseSuccessor: v748  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v750 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v968 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v968  <|@  <|@
f <@~|@floating>@ <|@
tid i969 <|@
result int[-160539|0xfffffffffffd8ce5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -160539
stableDimension: 0
stamp: i32 [-160539]
stampKind: i32
value: int[-160539|0xfffffffffffd8ce5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v968 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v750 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v748 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1097 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1097  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1097 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v883 
=== Usages ===
v239 
=== Predecessor ===
v748 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v883  <|@  <|@
f <@~|@floating>@ <|@
tid v239 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1097 
y: i51 
=== Succesors ===
=== Usages ===
v883 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i1097 y: i51  <|@  <|@
f <@*|@fixed>@ <|@
tid v883 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v239 
=== Succesors ===
trueSuccessor: v881 
falseSuccessor: v882 
=== Usages ===
=== Predecessor ===
i1097 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v239 #trueSuccessor: v881 #falseSuccessor: v882  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v881 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v972 
=== Usages ===
=== Predecessor ===
v883 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v972  <|@  <|@
f <@~|@floating>@ <|@
tid i973 <|@
result int[-225299|0xfffffffffffc8fed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -225299
stableDimension: 0
stamp: i32 [-225299]
stampKind: i32
value: int[-225299|0xfffffffffffc8fed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v972 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v881 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v882 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1098 
=== Usages ===
=== Predecessor ===
v883 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1098  <|@  <|@
f <@~|@floating>@ <|@
tid v1159 <|@
result [v18|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1095 
=== Succesors ===
=== Usages ===
a1098 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1095  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1098 <|@
result v19|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1159 
lastLocationAccess: - 
=== Succesors ===
next: v178 
=== Usages ===
a316 v629 v1164 v1167 v1202 
=== Predecessor ===
v882 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1159 lastLocationAccess: - #next: v178  <|@  <|@
f <@~|@floating>@ <|@
tid v629 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1098 
=== Succesors ===
=== Usages ===
v178 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1098  <|@  <|@
f <@~|@floating>@ <|@
tid v1160 <|@
result [v13|DWORD[_] * 8 + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
a1099 a1115 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
tid ?217 <|@
d <@d|@=== Debug Properties ===
bci: 7
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
=== Succesors ===
=== Usages ===
?216 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: -  <|@  <|@
tid ?216 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?217 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?183 ?215 ?910 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?217 values: a262 a2 i3 a4 i22  <|@  <|@
f <@*|@fixed>@ <|@
tid v178 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v629 
=== Succesors ===
trueSuccessor: v177 
falseSuccessor: v176 
=== Usages ===
=== Predecessor ===
a1098 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v629 #trueSuccessor: v177 #falseSuccessor: v176  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v177 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1099 
=== Usages ===
=== Predecessor ===
v178 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1099  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1099 <|@
result v20|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1160 
lastLocationAccess: - 
=== Succesors ===
next: a1100 
=== Usages ===
v1161 
=== Predecessor ===
v177 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1160 lastLocationAccess: - #next: a1100  <|@  <|@
f <@~|@floating>@ <|@
tid v1161 <|@
result [v20|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1099 
=== Succesors ===
=== Usages ===
a1100 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1099  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1100 <|@
result v21|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-82187|0xfffffffffffebef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1161 
lastLocationAccess: - 
=== Succesors ===
next: v1101 
=== Usages ===
a325 v1201 
=== Predecessor ===
a1099 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1161 lastLocationAccess: - #next: v1101  <|@  <|@
f <@~|@floating>@ <|@
tid v1201 <|@
result [v21|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1100 
=== Succesors ===
=== Usages ===
v1101 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1100  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1101 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-83723|0xfffffffffffeb8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1201 
lastLocationAccess: - 
=== Succesors ===
next: v332 
=== Usages ===
v1051 
=== Predecessor ===
a1100 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1201 lastLocationAccess: - #next: v332  <|@  <|@
f <@~|@floating>@ <|@
tid v1051 <|@
result v23|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1101 
=== Succesors ===
=== Usages ===
v1162 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1101  <|@  <|@
f <@~|@floating>@ <|@
tid v1162 <|@
result [v23|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1051 
index: - 
=== Succesors ===
=== Usages ===
v332 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1051 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v332 <|@
result v25|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1162 
lastLocationAccess: - 
=== Succesors ===
next: j335 
=== Usages ===
v1163 v336 
=== Predecessor ===
v1101 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1162 lastLocationAccess: - #next: j335  <|@  <|@
f <@~|@floating>@ <|@
tid v1163 <|@
result [v25|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v332 
index: - 
=== Succesors ===
=== Usages ===
j335 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v332 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j335 <|@
result v26|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1163 
lastLocationAccess: - 
=== Succesors ===
next: i182 
=== Usages ===
v336 
=== Predecessor ===
v332 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1163 lastLocationAccess: - #next: i182  <|@  <|@
f <@~|@floating>@ <|@
tid a325 <|@
result v27|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1100 
=== Succesors ===
=== Usages ===
v336 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1100  <|@  <|@
tid v336 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j335 
metaspaceMethod: v332 
arguments: a325 a2 i3 a4 
=== Succesors ===
=== Usages ===
i182 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j335 metaspaceMethod: v332 arguments: a325 a2 i3 a4  <|@  <|@
tid ?910 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?216 
values: a296 a2 i3 a4 i19 
=== Succesors ===
=== Usages ===
i182 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?216 values: a296 a2 i3 a4 i19  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i182 <|@
result v28|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v336 
stateDuring: ?910 
=== Succesors ===
next: v887 
=== Usages ===
v184 
=== Predecessor ===
j335 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v336 stateDuring: ?910 #next: v887  <|@  <|@
f <@~|@floating>@ <|@
tid v184 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i182 
y: i19 
=== Succesors ===
=== Usages ===
v887 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i182 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v887 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v184 
=== Succesors ===
trueSuccessor: v885 
falseSuccessor: v886 
=== Usages ===
=== Predecessor ===
i182 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v184 #trueSuccessor: v885 #falseSuccessor: v886  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v885 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v884 
=== Usages ===
=== Predecessor ===
v887 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v884  <|@  <|@
tid ?183 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?216 
values: i19 a296 a2 i3 a4 i19 
=== Succesors ===
=== Usages ===
v884 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?216 values: i19 a296 a2 i3 a4 i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v884 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: UnreachedCode
speculation: {0x0000000000000514[index: 40, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?183 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v885 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?183  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v886 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v242 
=== Usages ===
=== Predecessor ===
v887 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v242  <|@  <|@
f <@*|@fixed>@ <|@
tid v242 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v886 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v176 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1102 
=== Usages ===
=== Predecessor ===
v178 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1102  <|@  <|@
f <@~|@floating>@ <|@
tid v1202 <|@
result [v19|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
v1102 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1102 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1202 
lastLocationAccess: - 
=== Succesors ===
next: v763 
=== Usages ===
v1082 
=== Predecessor ===
v176 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1202 lastLocationAccess: - #next: v763  <|@  <|@
f <@~|@floating>@ <|@
tid v1082 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1102 
y: v1081 
=== Succesors ===
=== Usages ===
v763 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1102 y: v1081  <|@  <|@
f <@*|@fixed>@ <|@
tid v763 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1082 
=== Succesors ===
trueSuccessor: v760 
falseSuccessor: v762 
=== Usages ===
=== Predecessor ===
v1102 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1082 #trueSuccessor: v760 #falseSuccessor: v762  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v760 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1103 
=== Usages ===
=== Predecessor ===
v763 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1103  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1103 <|@
result v29|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-89099|0xfffffffffffea3f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: i1104 
=== Usages ===
v361 
=== Predecessor ===
v760 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1165 lastLocationAccess: - #next: i1104  <|@  <|@
f <@~|@floating>@ <|@
tid v1164 <|@
result [v19|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
i1104 i1110 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1104 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1164 
lastLocationAccess: - 
=== Succesors ===
next: v775 
=== Usages ===
v361 j631 
=== Predecessor ===
i1103 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1164 lastLocationAccess: - #next: v775  <|@  <|@
f <@~|@floating>@ <|@
tid v361 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1104 
y: i1103 
=== Succesors ===
=== Usages ===
v775 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1104 y: i1103  <|@  <|@
f <@*|@fixed>@ <|@
tid v775 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v361 
=== Succesors ===
trueSuccessor: v772 
falseSuccessor: v774 
=== Usages ===
=== Predecessor ===
i1104 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v361 #trueSuccessor: v772 #falseSuccessor: v774  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v772 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1105 
=== Usages ===
v368 
=== Predecessor ===
v775 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1105  <|@  <|@
f <@~|@floating>@ <|@
tid v1167 <|@
result [v19|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
a1105 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1105 <|@
result v31|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1167 
lastLocationAccess: - 
=== Succesors ===
next: v1106 
=== Usages ===
a371 v1203 
=== Predecessor ===
v772 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1167 lastLocationAccess: - #next: v1106  <|@  <|@
f <@~|@floating>@ <|@
tid v1203 <|@
result [v31|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1105 
=== Succesors ===
=== Usages ===
v1106 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1105  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1106 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-95499|0xfffffffffffe8af5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1203 
lastLocationAccess: - 
=== Succesors ===
next: i1107 
=== Usages ===
v1057 
=== Predecessor ===
a1105 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1203 lastLocationAccess: - #next: i1107  <|@  <|@
f <@~|@floating>@ <|@
tid j631 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1104 
=== Succesors ===
=== Usages ===
v1166 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1104  <|@  <|@
f <@~|@floating>@ <|@
tid v1166 <|@
result [v11|QWORD[.] + v30|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a569 
index: j631 
=== Succesors ===
=== Usages ===
v368 i1107 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a569 index: j631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1107 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1166 
lastLocationAccess: - 
=== Succesors ===
next: v368 
=== Usages ===
?911 ?210 v396 
=== Predecessor ===
v1106 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1166 lastLocationAccess: - #next: v368  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v368 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v772 
address: v1166 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v377 
=== Usages ===
=== Predecessor ===
i1107 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v772 address: v1166 lastLocationAccess: - value: i3 stateAfter: - #next: v377  <|@  <|@
f <@~|@floating>@ <|@
tid v1057 <|@
result v34|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1106 
=== Succesors ===
=== Usages ===
v1168 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1106  <|@  <|@
f <@~|@floating>@ <|@
tid v1168 <|@
result [v34|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1057 
index: - 
=== Succesors ===
=== Usages ===
v377 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1057 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v377 <|@
result v36|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1168 
lastLocationAccess: - 
=== Succesors ===
next: j379 
=== Usages ===
v1169 v380 
=== Predecessor ===
v368 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1168 lastLocationAccess: - #next: j379  <|@  <|@
f <@~|@floating>@ <|@
tid v1169 <|@
result [v36|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v377 
index: - 
=== Succesors ===
=== Usages ===
j379 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v377 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j379 <|@
result v37|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1169 
lastLocationAccess: - 
=== Succesors ===
next: i209 
=== Usages ===
v380 
=== Predecessor ===
v377 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1169 lastLocationAccess: - #next: i209  <|@  <|@
f <@~|@floating>@ <|@
tid a371 <|@
result v38|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1105 
=== Succesors ===
=== Usages ===
v380 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1105  <|@  <|@
tid v380 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j379 
metaspaceMethod: v377 
arguments: a371 a2 i3 a4 
=== Succesors ===
=== Usages ===
i209 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j379 metaspaceMethod: v377 arguments: a371 a2 i3 a4  <|@  <|@
tid ?215 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?216 
values: a296 a2 i3 a4 i19 
=== Succesors ===
=== Usages ===
?911 ?210 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?216 values: a296 a2 i3 a4 i19  <|@  <|@
f <@~|@floating>@ <|@
tid a316 <|@
result v39|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1098 
=== Succesors ===
=== Usages ===
?210 ?911 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1098  <|@  <|@
tid ?911 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?215 
values: a316 a2 - - i1107 
=== Succesors ===
=== Usages ===
i209 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?215 values: a316 a2 - - i1107  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i209 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v380 
stateDuring: ?911 
=== Succesors ===
next: a1108 
=== Usages ===
v189 ?210 
=== Predecessor ===
j379 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v380 stateDuring: ?911 #next: a1108  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1108 <|@
result v41|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1109 
=== Usages ===
a382 v1170 
=== Predecessor ===
i209 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1109  <|@  <|@
tid ?210 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?215 
values: i209 a316 a2 - - i1107 
=== Succesors ===
=== Usages ===
v1214 i1109 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?215 values: i209 a316 a2 - - i1107  <|@  <|@
f <@~|@floating>@ <|@
tid v1170 <|@
result [v41|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1108 
=== Succesors ===
=== Usages ===
i1109 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1108  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1109 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-98571|0xfffffffffffe7ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?210 
guard: - 
address: v1170 
lastLocationAccess: - 
=== Succesors ===
next: i1110 
=== Usages ===
v389 
=== Predecessor ===
a1108 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?210 guard: - address: v1170 lastLocationAccess: - #next: i1110  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1110 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1164 
lastLocationAccess: - 
=== Succesors ===
next: v787 
=== Usages ===
j632 v389 
=== Predecessor ===
i1109 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1164 lastLocationAccess: - #next: v787  <|@  <|@
f <@~|@floating>@ <|@
tid v389 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1110 
y: i1109 
=== Succesors ===
=== Usages ===
v787 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1110 y: i1109  <|@  <|@
f <@*|@fixed>@ <|@
tid v787 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v389 
=== Succesors ===
trueSuccessor: v784 
falseSuccessor: v786 
=== Usages ===
=== Predecessor ===
i1110 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v389 #trueSuccessor: v784 #falseSuccessor: v786  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v784 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v396 
=== Usages ===
v396 
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v396  <|@  <|@
f <@~|@floating>@ <|@
tid a382 <|@
result v44|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1108 
=== Succesors ===
=== Usages ===
v1171 a243 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1108  <|@  <|@
f <@~|@floating>@ <|@
tid j632 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1110 
=== Succesors ===
=== Usages ===
v1171 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1110  <|@  <|@
f <@~|@floating>@ <|@
tid v1171 <|@
result [v44|QWORD[.] + v43|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a382 
index: j632 
=== Succesors ===
=== Usages ===
v396 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a382 index: j632  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v396 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v784 
address: v1171 
lastLocationAccess: - 
value: i1107 
stateAfter: - 
=== Succesors ===
next: v192 
=== Usages ===
=== Predecessor ===
v784 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v784 address: v1171 lastLocationAccess: - value: i1107 stateAfter: - #next: v192  <|@  <|@
f <@~|@floating>@ <|@
tid v189 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i209 
y: i19 
=== Succesors ===
=== Usages ===
v192 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i209 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v192 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v189 
=== Succesors ===
trueSuccessor: v191 
falseSuccessor: v190 
=== Usages ===
=== Predecessor ===
v396 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v189 #trueSuccessor: v191 #falseSuccessor: v190  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v191 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v93 
=== Usages ===
=== Predecessor ===
v192 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v93  <|@  <|@
f <@*|@fixed>@ <|@
tid v93 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v94 
=== Predecessor ===
v191 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i238 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v94 
values: i51 i125 
=== Succesors ===
=== Usages ===
?96 v98 j633 ?113 v432 i125 ?147 ?912 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v94 values: i51 i125  <|@  <|@
f <@~|@floating>@ <|@
tid a243 <|@
result v46|QWORD[.] <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v94 
values: a382 a480 
=== Succesors ===
=== Usages ===
v1178 v1179 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v94 values: a382 a480  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 96
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v93 
=== Succesors ===
next: a1111 
=== Usages ===
i238 v116 v121 v126 a243 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v93 #next: a1111  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1111 <|@
result v47|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1157 
lastLocationAccess: - 
=== Succesors ===
next: i1112 
=== Usages ===
a399 v1172 
=== Predecessor ===
v94 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1157 lastLocationAccess: - #next: i1112  <|@  <|@
tid ?148 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?96 ?113 ?147 ?912 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
tid ?96 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
v1001 i1112 a1116 i1119 v1117 v1122 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: a296 a2 i3 a4 i238  <|@  <|@
f <@~|@floating>@ <|@
tid v1172 <|@
result [v47|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1111 
=== Succesors ===
=== Usages ===
i1112 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1111  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1112 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-102667|0xfffffffffffe6ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1172 
lastLocationAccess: - 
=== Succesors ===
next: v795 
=== Usages ===
v432 
=== Predecessor ===
a1111 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1172 lastLocationAccess: - #next: v795  <|@  <|@
f <@~|@floating>@ <|@
tid v432 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i238 
y: i1112 
=== Succesors ===
=== Usages ===
v795 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i238 y: i1112  <|@  <|@
f <@*|@fixed>@ <|@
tid v795 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v432 
=== Succesors ===
trueSuccessor: v792 
falseSuccessor: v794 
=== Usages ===
=== Predecessor ===
i1112 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v432 #trueSuccessor: v792 #falseSuccessor: v794  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v792 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1113 
=== Usages ===
=== Predecessor ===
v795 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1113  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1113 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v891 
=== Usages ===
v98 
=== Predecessor ===
v792 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v891  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i238 
y: i1113 
=== Succesors ===
=== Usages ===
v891 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i238 y: i1113  <|@  <|@
f <@*|@fixed>@ <|@
tid v891 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v889 
falseSuccessor: v890 
=== Usages ===
=== Predecessor ===
i1113 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v889 #falseSuccessor: v890  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v889 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1114 
=== Usages ===
=== Predecessor ===
v891 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1114  <|@  <|@
f <@~|@floating>@ <|@
tid a399 <|@
result v48|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1111 
=== Succesors ===
=== Usages ===
v1173 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1111  <|@  <|@
f <@~|@floating>@ <|@
tid j633 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i238 
=== Succesors ===
=== Usages ===
v1173 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i238  <|@  <|@
f <@~|@floating>@ <|@
tid v1173 <|@
result [v48|QWORD[.] + v45|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a399 
index: j633 
=== Succesors ===
=== Usages ===
a1114 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a399 index: j633  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1114 <|@
result v49|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1173 
lastLocationAccess: - 
=== Succesors ===
next: v108 
=== Usages ===
v634 a440 v1177 v1180 v1205 
=== Predecessor ===
v889 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1173 lastLocationAccess: - #next: v108  <|@  <|@
f <@~|@floating>@ <|@
tid v634 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1114 
=== Succesors ===
=== Usages ===
v108 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1114  <|@  <|@
f <@*|@fixed>@ <|@
tid v108 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v634 
=== Succesors ===
trueSuccessor: v107 
falseSuccessor: v106 
=== Usages ===
=== Predecessor ===
a1114 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v634 #trueSuccessor: v107 #falseSuccessor: v106  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v107 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1115 
=== Usages ===
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1115  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1115 <|@
result v50|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1160 
lastLocationAccess: - 
=== Succesors ===
next: a1116 
=== Usages ===
v1174 
=== Predecessor ===
v107 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1160 lastLocationAccess: - #next: a1116  <|@  <|@
f <@~|@floating>@ <|@
tid v1174 <|@
result [v50|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1115 
=== Succesors ===
=== Usages ===
a1116 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1115  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1116 <|@
result v51|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-106763|0xfffffffffffe5ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1174 
lastLocationAccess: - 
=== Succesors ===
next: v1117 
=== Usages ===
a421 v1204 
=== Predecessor ===
a1115 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1174 lastLocationAccess: - #next: v1117  <|@  <|@
f <@~|@floating>@ <|@
tid v1204 <|@
result [v51|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1116 
=== Succesors ===
=== Usages ===
v1117 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1116  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1117 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-108299|0xfffffffffffe58f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1204 
lastLocationAccess: - 
=== Succesors ===
next: v427 
=== Usages ===
v1060 
=== Predecessor ===
a1116 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1204 lastLocationAccess: - #next: v427  <|@  <|@
f <@~|@floating>@ <|@
tid v1060 <|@
result v53|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1117 
=== Succesors ===
=== Usages ===
v1175 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1117  <|@  <|@
f <@~|@floating>@ <|@
tid v1175 <|@
result [v53|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1060 
index: - 
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1060 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v427 <|@
result v55|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1175 
lastLocationAccess: - 
=== Succesors ===
next: j429 
=== Usages ===
v1176 v430 
=== Predecessor ===
v1117 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1175 lastLocationAccess: - #next: j429  <|@  <|@
f <@~|@floating>@ <|@
tid v1176 <|@
result [v55|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v427 
index: - 
=== Succesors ===
=== Usages ===
j429 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v427 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j429 <|@
result v56|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1176 
lastLocationAccess: - 
=== Succesors ===
next: i112 
=== Usages ===
v430 
=== Predecessor ===
v427 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1176 lastLocationAccess: - #next: i112  <|@  <|@
f <@~|@floating>@ <|@
tid a421 <|@
result v57|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1116 
=== Succesors ===
=== Usages ===
v430 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1116  <|@  <|@
tid v430 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j429 
metaspaceMethod: v427 
arguments: a421 a2 i3 a4 
=== Succesors ===
=== Usages ===
i112 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j429 metaspaceMethod: v427 arguments: a421 a2 i3 a4  <|@  <|@
tid ?912 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
i112 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: a296 a2 i3 a4 i238  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i112 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v430 
stateDuring: ?912 
=== Succesors ===
next: v895 
=== Usages ===
v114 
=== Predecessor ===
j429 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v430 stateDuring: ?912 #next: v895  <|@  <|@
f <@~|@floating>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i112 
y: i19 
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i112 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v895 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v114 
=== Succesors ===
trueSuccessor: v894 
falseSuccessor: v116 
=== Usages ===
=== Predecessor ===
i112 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v114 #trueSuccessor: v894 #falseSuccessor: v116  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v894 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v893 
=== Usages ===
=== Predecessor ===
v895 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v893  <|@  <|@
tid ?113 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: i19 a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
v893 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: i19 a296 a2 i3 a4 i238  <|@  <|@
f <@*|@fixed>@ <|@
tid v893 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: UnreachedCode
speculation: {0x0000000000000514[index: 40, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?113 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v894 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?113  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v106 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1118 
=== Usages ===
=== Predecessor ===
v108 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1118  <|@  <|@
f <@~|@floating>@ <|@
tid v1205 <|@
result [v49|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1114 
=== Succesors ===
=== Usages ===
v1118 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1114  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1118 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1205 
lastLocationAccess: - 
=== Succesors ===
next: v807 
=== Usages ===
v1083 
=== Predecessor ===
v106 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1205 lastLocationAccess: - #next: v807  <|@  <|@
f <@~|@floating>@ <|@
tid v1083 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1118 
y: v1081 
=== Succesors ===
=== Usages ===
v807 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1118 y: v1081  <|@  <|@
f <@*|@fixed>@ <|@
tid v807 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1083 
=== Succesors ===
trueSuccessor: v804 
falseSuccessor: v806 
=== Usages ===
=== Predecessor ===
v1118 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1083 #trueSuccessor: v804 #falseSuccessor: v806  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v804 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1119 
=== Usages ===
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1119  <|@  <|@
f <@~|@floating>@ <|@
tid v1178 <|@
result [v46|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a243 
index: - 
=== Succesors ===
=== Usages ===
i1119 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a243 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1119 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-114187|0xfffffffffffe41f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1178 
lastLocationAccess: - 
=== Succesors ===
next: i1120 
=== Usages ===
v459 
=== Predecessor ===
v804 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1178 lastLocationAccess: - #next: i1120  <|@  <|@
f <@~|@floating>@ <|@
tid v1177 <|@
result [v49|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1114 
=== Succesors ===
=== Usages ===
i1120 i1126 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1114  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1120 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1177 
lastLocationAccess: - 
=== Succesors ===
next: v815 
=== Usages ===
v459 j638 
=== Predecessor ===
i1119 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1177 lastLocationAccess: - #next: v815  <|@  <|@
f <@~|@floating>@ <|@
tid v459 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1120 
y: i1119 
=== Succesors ===
=== Usages ===
v815 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1120 y: i1119  <|@  <|@
f <@*|@fixed>@ <|@
tid v815 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v459 
=== Succesors ===
trueSuccessor: v812 
falseSuccessor: v814 
=== Usages ===
=== Predecessor ===
i1120 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v459 #trueSuccessor: v812 #falseSuccessor: v814  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v812 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1121 
=== Usages ===
v466 
=== Predecessor ===
v815 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1121  <|@  <|@
f <@~|@floating>@ <|@
tid v1180 <|@
result [v49|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1114 
=== Succesors ===
=== Usages ===
a1121 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1114  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1121 <|@
result v61|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1180 
lastLocationAccess: - 
=== Succesors ===
next: v1122 
=== Usages ===
a469 v1206 
=== Predecessor ===
v812 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1180 lastLocationAccess: - #next: v1122  <|@  <|@
f <@~|@floating>@ <|@
tid v1206 <|@
result [v61|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1121 
=== Succesors ===
=== Usages ===
v1122 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1121  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1122 <|@
result v62|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-120587|0xfffffffffffe28f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?96 
guard: - 
address: v1206 
lastLocationAccess: - 
=== Succesors ===
next: i1123 
=== Usages ===
v1067 
=== Predecessor ===
a1121 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?96 guard: - address: v1206 lastLocationAccess: - #next: i1123  <|@  <|@
f <@~|@floating>@ <|@
tid j638 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1120 
=== Succesors ===
=== Usages ===
v1179 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1120  <|@  <|@
f <@~|@floating>@ <|@
tid v1179 <|@
result [v46|QWORD[.] + v60|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a243 
index: j638 
=== Succesors ===
=== Usages ===
v466 i1123 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a243 index: j638  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1123 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1179 
lastLocationAccess: - 
=== Succesors ===
next: v466 
=== Usages ===
?913 ?142 v494 
=== Predecessor ===
v1122 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1179 lastLocationAccess: - #next: v466  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v812 
address: v1179 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v475 
=== Usages ===
=== Predecessor ===
i1123 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v812 address: v1179 lastLocationAccess: - value: i3 stateAfter: - #next: v475  <|@  <|@
f <@~|@floating>@ <|@
tid v1067 <|@
result v64|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1122 
=== Succesors ===
=== Usages ===
v1181 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1122  <|@  <|@
f <@~|@floating>@ <|@
tid v1181 <|@
result [v64|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1067 
index: - 
=== Succesors ===
=== Usages ===
v475 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1067 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v475 <|@
result v66|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1181 
lastLocationAccess: - 
=== Succesors ===
next: j477 
=== Usages ===
v1182 v478 
=== Predecessor ===
v466 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1181 lastLocationAccess: - #next: j477  <|@  <|@
f <@~|@floating>@ <|@
tid v1182 <|@
result [v66|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v475 
index: - 
=== Succesors ===
=== Usages ===
j477 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v475 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j477 <|@
result v67|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1182 
lastLocationAccess: - 
=== Succesors ===
next: i141 
=== Usages ===
v478 
=== Predecessor ===
v475 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1182 lastLocationAccess: - #next: i141  <|@  <|@
f <@~|@floating>@ <|@
tid a469 <|@
result v68|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1121 
=== Succesors ===
=== Usages ===
v478 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1121  <|@  <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j477 
metaspaceMethod: v475 
arguments: a469 a2 i3 a4 
=== Succesors ===
=== Usages ===
i141 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j477 metaspaceMethod: v475 arguments: a469 a2 i3 a4  <|@  <|@
tid ?147 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?148 
values: a296 a2 i3 a4 i238 
=== Succesors ===
=== Usages ===
?913 ?142 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?148 values: a296 a2 i3 a4 i238  <|@  <|@
f <@~|@floating>@ <|@
tid a440 <|@
result v69|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1114 
=== Succesors ===
=== Usages ===
?142 ?913 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1114  <|@  <|@
tid ?913 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?147 
values: a440 a2 - - i1123 
=== Succesors ===
=== Usages ===
i141 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?147 values: a440 a2 - - i1123  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i141 <|@
result v70|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v478 
stateDuring: ?913 
=== Succesors ===
next: a1124 
=== Usages ===
v120 ?142 
=== Predecessor ===
j477 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v478 stateDuring: ?913 #next: a1124  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1124 <|@
result v71|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1125 
=== Usages ===
a480 v1183 
=== Predecessor ===
i141 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1125  <|@  <|@
tid ?142 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?147 
values: i141 a440 a2 - - i1123 
=== Succesors ===
=== Usages ===
v1212 i1125 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?147 values: i141 a440 a2 - - i1123  <|@  <|@
f <@~|@floating>@ <|@
tid v1183 <|@
result [v71|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1124 
=== Succesors ===
=== Usages ===
i1125 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1124  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1125 <|@
result v72|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-123659|0xfffffffffffe1cf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?142 
guard: - 
address: v1183 
lastLocationAccess: - 
=== Succesors ===
next: i1126 
=== Usages ===
v487 
=== Predecessor ===
a1124 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?142 guard: - address: v1183 lastLocationAccess: - #next: i1126  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1126 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1177 
lastLocationAccess: - 
=== Succesors ===
next: v827 
=== Usages ===
j639 v487 
=== Predecessor ===
i1125 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1177 lastLocationAccess: - #next: v827  <|@  <|@
f <@~|@floating>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1126 
y: i1125 
=== Succesors ===
=== Usages ===
v827 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1126 y: i1125  <|@  <|@
f <@*|@fixed>@ <|@
tid v827 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v487 
=== Succesors ===
trueSuccessor: v824 
falseSuccessor: v826 
=== Usages ===
=== Predecessor ===
i1126 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v487 #trueSuccessor: v824 #falseSuccessor: v826  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v824 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v494 
=== Usages ===
v494 
=== Predecessor ===
v827 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v494  <|@  <|@
f <@~|@floating>@ <|@
tid a480 <|@
result v74|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1124 
=== Succesors ===
=== Usages ===
v1184 a243 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1124  <|@  <|@
f <@~|@floating>@ <|@
tid j639 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1126 
=== Succesors ===
=== Usages ===
v1184 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1126  <|@  <|@
f <@~|@floating>@ <|@
tid v1184 <|@
result [v74|QWORD[.] + v73|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a480 
index: j639 
=== Succesors ===
=== Usages ===
v494 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a480 index: j639  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v494 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v824 
address: v1184 
lastLocationAccess: - 
value: i1123 
stateAfter: - 
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v824 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v824 address: v1184 lastLocationAccess: - value: i1123 stateAfter: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i141 
y: i19 
=== Succesors ===
=== Usages ===
v124 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i141 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v120 
=== Succesors ===
trueSuccessor: v123 
falseSuccessor: v121 
=== Usages ===
=== Predecessor ===
v494 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v120 #trueSuccessor: v123 #falseSuccessor: v121  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v123 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v126 
=== Usages ===
=== Predecessor ===
v124 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v126  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
result v75|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
=== Inputs ===
x: i238 
y: i51 
=== Succesors ===
=== Usages ===
i238 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i238 y: i51  <|@  <|@
f <@*|@fixed>@ <|@
tid v126 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
loopBegin: v94 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v123 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v94  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v94 
=== Succesors ===
next: v163 
=== Usages ===
=== Predecessor ===
v124 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v94 #next: v163  <|@  <|@
f <@*|@fixed>@ <|@
tid v163 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v121 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v116 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v94 
=== Succesors ===
next: v81 
=== Usages ===
=== Predecessor ===
v895 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v94 #next: v81  <|@  <|@
f <@*|@fixed>@ <|@
tid v81 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v116 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v826 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1212 
=== Usages ===
=== Predecessor ===
v827 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1212  <|@  <|@
f <@*|@fixed>@ <|@
tid v1212 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 488
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?142 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v826 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?142  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v814 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1016 
=== Usages ===
=== Predecessor ===
v815 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1016  <|@  <|@
f <@~|@floating>@ <|@
tid i1017 <|@
result int[-117787|0xfffffffffffe33e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -117787
stableDimension: 0
stamp: i32 [-117787]
stampKind: i32
value: int[-117787|0xfffffffffffe33e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1016 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v814 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v806 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1012 
=== Usages ===
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1012  <|@  <|@
f <@~|@floating>@ <|@
tid i1013 <|@
result int[-113203|0xfffffffffffe45cd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -113203
stableDimension: 0
stamp: i32 [-113203]
stampKind: i32
value: int[-113203|0xfffffffffffe45cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1012 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v806 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v890 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1006 
=== Usages ===
=== Predecessor ===
v891 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1006  <|@  <|@
f <@~|@floating>@ <|@
tid i1007 <|@
result int[-227347|0xfffffffffffc87ed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -227347
stableDimension: 0
stamp: i32 [-227347]
stampKind: i32
value: int[-227347|0xfffffffffffc87ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1006 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v890 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v794 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1004 
=== Usages ===
=== Predecessor ===
v795 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1004  <|@  <|@
f <@~|@floating>@ <|@
tid i1005 <|@
result int[-103963|0xfffffffffffe69e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -103963
stableDimension: 0
stamp: i32 [-103963]
stampKind: i32
value: int[-103963|0xfffffffffffe69e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i999 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v1004 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v996 
=== Predecessor ===
v794 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i999 <|@
result v76|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [-227347 - -103963] bits:1...1x0xxxxxxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v996 
values: i1005 i1007 i1013 i1017 
=== Succesors ===
=== Usages ===
v1001 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v996 values: i1005 i1007 i1013 i1017  <|@  <|@
f <@~|@floating>@ <|@
tid j1000 <|@
result v77|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64 [0 - 1940] bits:0...0xxxx00x0x00
valueDescription: i64
=== Inputs ===
merge: v996 
values: j934 j949 j956 j934 
=== Succesors ===
=== Usages ===
v1001 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v996 values: j934 j949 j956 j934  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v996 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v1004 v1006 v1012 v1016 
=== Succesors ===
next: v1001 
=== Usages ===
i999 j1000 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v1004 v1006 v1012 v1016 #next: v1001  <|@  <|@
f <@*|@fixed>@ <|@
tid v1001 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateBefore: ?96 
actionAndReason: i999 
speculation: j1000 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v996 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?96 actionAndReason: i999 speculation: j1000  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v190 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v241 
=== Usages ===
=== Predecessor ===
v192 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v241  <|@  <|@
f <@*|@fixed>@ <|@
tid v241 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v190 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v786 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1214 
=== Usages ===
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1214  <|@  <|@
f <@*|@fixed>@ <|@
tid v1214 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 390
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?210 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v786 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?210  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v774 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v986 
=== Usages ===
=== Predecessor ===
v775 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v986  <|@  <|@
f <@~|@floating>@ <|@
tid i987 <|@
result int[-92699|0xfffffffffffe95e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -92699
stableDimension: 0
stamp: i32 [-92699]
stampKind: i32
value: int[-92699|0xfffffffffffe95e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v986 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v774 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v762 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v982 
=== Usages ===
=== Predecessor ===
v763 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v982  <|@  <|@
f <@~|@floating>@ <|@
tid i983 <|@
result int[-86579|0xfffffffffffeadcd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -86579
stableDimension: 0
stamp: i32 [-86579]
stampKind: i32
value: int[-86579|0xfffffffffffeadcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v982 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v762 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v82 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: i1127 
=== Usages ===
=== Predecessor ===
v90 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1127  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1127 <|@
result v78|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-129035|0xfffffffffffe07f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: i1128 
=== Usages ===
v517 
=== Predecessor ===
v82 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1165 lastLocationAccess: - #next: i1128  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1128 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v839 
=== Usages ===
v517 j641 
=== Predecessor ===
i1127 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v839  <|@  <|@
f <@~|@floating>@ <|@
tid v517 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1128 
y: i1127 
=== Succesors ===
=== Usages ===
v839 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1128 y: i1127  <|@  <|@
f <@*|@fixed>@ <|@
tid v839 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v517 
=== Succesors ===
trueSuccessor: v836 
falseSuccessor: v838 
=== Usages ===
=== Predecessor ===
i1128 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v517 #trueSuccessor: v836 #falseSuccessor: v838  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v836 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1129 
=== Usages ===
v524 
=== Predecessor ===
v839 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1129  <|@  <|@
f <@~|@floating>@ <|@
tid v1186 <|@
result [v13|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1093 
=== Succesors ===
=== Usages ===
a1129 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1129 <|@
result v80|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1186 
lastLocationAccess: - 
=== Succesors ===
next: v1130 
=== Usages ===
a527 v1207 
=== Predecessor ===
v836 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1186 lastLocationAccess: - #next: v1130  <|@  <|@
f <@~|@floating>@ <|@
tid v1207 <|@
result [v80|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1129 
=== Succesors ===
=== Usages ===
v1130 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1129  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1130 <|@
result v81|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-135435|0xfffffffffffdeef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1207 
lastLocationAccess: - 
=== Succesors ===
next: i1131 
=== Usages ===
v1071 
=== Predecessor ===
a1129 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1207 lastLocationAccess: - #next: i1131  <|@  <|@
f <@~|@floating>@ <|@
tid j641 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1128 
=== Succesors ===
=== Usages ===
v1185 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1128  <|@  <|@
f <@~|@floating>@ <|@
tid v1185 <|@
result [v11|QWORD[.] + v79|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a569 
index: j641 
=== Succesors ===
=== Usages ===
v524 i1131 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a569 index: j641  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1131 <|@
result v82|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1185 
lastLocationAccess: - 
=== Succesors ===
next: v524 
=== Usages ===
?909 ?157 v552 ?161 
=== Predecessor ===
v1130 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1185 lastLocationAccess: - #next: v524  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v524 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v836 
address: v1185 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v533 
=== Usages ===
=== Predecessor ===
i1131 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v836 address: v1185 lastLocationAccess: - value: i3 stateAfter: - #next: v533  <|@  <|@
f <@~|@floating>@ <|@
tid v1071 <|@
result v83|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1130 
=== Succesors ===
=== Usages ===
v1187 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1130  <|@  <|@
f <@~|@floating>@ <|@
tid v1187 <|@
result [v83|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1071 
index: - 
=== Succesors ===
=== Usages ===
v533 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1071 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v533 <|@
result v85|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1187 
lastLocationAccess: - 
=== Succesors ===
next: j535 
=== Usages ===
v1188 v536 
=== Predecessor ===
v524 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1187 lastLocationAccess: - #next: j535  <|@  <|@
f <@~|@floating>@ <|@
tid v1188 <|@
result [v85|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v533 
index: - 
=== Succesors ===
=== Usages ===
j535 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v533 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j535 <|@
result v86|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1188 
lastLocationAccess: - 
=== Succesors ===
next: i156 
=== Usages ===
v536 
=== Predecessor ===
v533 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1188 lastLocationAccess: - #next: i156  <|@  <|@
f <@~|@floating>@ <|@
tid a527 <|@
result v87|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1129 
=== Succesors ===
=== Usages ===
v536 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1129  <|@  <|@
tid v536 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j535 
metaspaceMethod: v533 
arguments: a527 a2 i3 a4 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j535 metaspaceMethod: v533 arguments: a527 a2 i3 a4  <|@  <|@
tid ?162 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?909 ?157 ?161 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
tid ?909 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?162 
values: a296 a2 - - i1131 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?162 values: a296 a2 - - i1131  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
result v88|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v536 
stateDuring: ?909 
=== Succesors ===
next: a1132 
=== Usages ===
v40 ?157 
=== Predecessor ===
j535 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v536 stateDuring: ?909 #next: a1132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1132 <|@
result v89|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1133 
=== Usages ===
a538 v1189 
=== Predecessor ===
i156 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1133  <|@  <|@
tid ?157 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?162 
values: i156 a296 a2 - - i1131 
=== Succesors ===
=== Usages ===
v1213 i1133 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?162 values: i156 a296 a2 - - i1131  <|@  <|@
f <@~|@floating>@ <|@
tid v1189 <|@
result [v89|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1132 
=== Succesors ===
=== Usages ===
i1133 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1133 <|@
result v90|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-138507|0xfffffffffffde2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?157 
guard: - 
address: v1189 
lastLocationAccess: - 
=== Succesors ===
next: i1134 
=== Usages ===
v545 
=== Predecessor ===
a1132 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?157 guard: - address: v1189 lastLocationAccess: - #next: i1134  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1134 <|@
result v91|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
=== Succesors ===
next: v851 
=== Usages ===
j642 v545 
=== Predecessor ===
i1133 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - #next: v851  <|@  <|@
f <@~|@floating>@ <|@
tid v545 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1134 
y: i1133 
=== Succesors ===
=== Usages ===
v851 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1134 y: i1133  <|@  <|@
f <@*|@fixed>@ <|@
tid v851 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v545 
=== Succesors ===
trueSuccessor: v848 
falseSuccessor: v850 
=== Usages ===
=== Predecessor ===
i1134 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v545 #trueSuccessor: v848 #falseSuccessor: v850  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v848 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v552 
=== Usages ===
v552 
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v552  <|@  <|@
f <@~|@floating>@ <|@
tid a538 <|@
result v92|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1132 
=== Succesors ===
=== Usages ===
v1190 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1132  <|@  <|@
f <@~|@floating>@ <|@
tid j642 <|@
result v91|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1134 
=== Succesors ===
=== Usages ===
v1190 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1134  <|@  <|@
f <@~|@floating>@ <|@
tid v1190 <|@
result [v92|QWORD[.] + v91|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a538 
index: j642 
=== Succesors ===
=== Usages ===
v552 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a538 index: j642  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v552 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v848 
address: v1190 
lastLocationAccess: - 
value: i1131 
stateAfter: - 
=== Succesors ===
next: v900 
=== Usages ===
=== Predecessor ===
v848 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v848 address: v1190 lastLocationAccess: - value: i1131 stateAfter: - #next: v900  <|@  <|@
f <@~|@floating>@ <|@
tid v40 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i156 
y: i19 
=== Succesors ===
=== Usages ===
v900 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i156 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v900 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v40 
=== Succesors ===
trueSuccessor: v899 
falseSuccessor: v903 
=== Usages ===
=== Predecessor ===
v552 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v40 #trueSuccessor: v899 #falseSuccessor: v903  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v899 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v898 
=== Usages ===
=== Predecessor ===
v900 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v898  <|@  <|@
tid ?161 <|@
d <@d|@=== Debug Properties ===
bci: 44
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4971
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?162 
values: a296 a2 - - i1131 i19 
=== Succesors ===
=== Usages ===
v898 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?162 values: a296 a2 - - i1131 i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v898 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: UnreachedCode
speculation: {0x0000000000000514[index: 40, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?161 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v899 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?161  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v903 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v904 
=== Usages ===
=== Predecessor ===
v900 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v904  <|@  <|@
f <@*|@fixed>@ <|@
tid v904 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v902 
=== Predecessor ===
v903 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v902 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v904 v81 v163 v241 v242 
=== Succesors ===
next: v42 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v904 v81 v163 v241 v242 #next: v42  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v850 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1213 
=== Usages ===
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1213  <|@  <|@
f <@*|@fixed>@ <|@
tid v1213 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 546
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?157 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v850 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?157  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v838 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v974 
=== Usages ===
=== Predecessor ===
v839 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v974  <|@  <|@
f <@~|@floating>@ <|@
tid i975 <|@
result int[-132635|0xfffffffffffdf9e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -132635
stableDimension: 0
stamp: i32 [-132635]
stampKind: i32
value: int[-132635|0xfffffffffffdf9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v974 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v838 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v85 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v965 
=== Usages ===
=== Predecessor ===
v90 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v965  <|@  <|@
f <@~|@floating>@ <|@
tid j967 <|@
result long[4500|0x1194] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: 4500
stableDimension: 0
stamp: i64 [4500]
stampKind: i64
value: long[4500|0x1194]
=== Inputs ===
=== Succesors ===
=== Usages ===
j941 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i966 <|@
result int[-21555|0xffffffffffffabcd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -21555
stableDimension: 0
stamp: i32 [-21555]
stampKind: i32
value: int[-21555|0xffffffffffffabcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v965 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v85 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1135 
=== Usages ===
=== Predecessor ===
v35 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1135  <|@  <|@
f <@~|@floating>@ <|@
tid v1208 <|@
result [v9|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1090 
=== Succesors ===
=== Usages ===
v1135 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1090  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1135 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1208 
lastLocationAccess: - 
=== Succesors ===
next: v855 
=== Usages ===
v1084 
=== Predecessor ===
v33 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1208 lastLocationAccess: - #next: v855  <|@  <|@
f <@~|@floating>@ <|@
tid v1084 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1135 
y: v1081 
=== Succesors ===
=== Usages ===
v855 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1135 y: v1081  <|@  <|@
f <@*|@fixed>@ <|@
tid v855 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1084 
=== Succesors ===
trueSuccessor: v852 
falseSuccessor: v854 
=== Usages ===
=== Predecessor ===
v1135 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1084 #trueSuccessor: v852 #falseSuccessor: v854  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v852 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1136 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1136  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1136 <|@
result v93|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-146699|0xfffffffffffdc2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: i1137 
=== Usages ===
v586 
=== Predecessor ===
v852 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1165 lastLocationAccess: - #next: i1137  <|@  <|@
f <@~|@floating>@ <|@
tid v1192 <|@
result [v9|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1090 
=== Succesors ===
=== Usages ===
i1137 i1143 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1090  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1137 <|@
result v94|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1192 
lastLocationAccess: - 
=== Succesors ===
next: v863 
=== Usages ===
v586 j646 
=== Predecessor ===
i1136 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1192 lastLocationAccess: - #next: v863  <|@  <|@
f <@~|@floating>@ <|@
tid v586 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1137 
y: i1136 
=== Succesors ===
=== Usages ===
v863 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1137 y: i1136  <|@  <|@
f <@*|@fixed>@ <|@
tid v863 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v586 
=== Succesors ===
trueSuccessor: v860 
falseSuccessor: v862 
=== Usages ===
=== Predecessor ===
i1137 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v586 #trueSuccessor: v860 #falseSuccessor: v862  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v860 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1138 
=== Usages ===
v593 
=== Predecessor ===
v863 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1138  <|@  <|@
f <@~|@floating>@ <|@
tid v1194 <|@
result [v9|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1090 
=== Succesors ===
=== Usages ===
a1138 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1090  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1138 <|@
result v95|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1194 
lastLocationAccess: - 
=== Succesors ===
next: v1139 
=== Usages ===
a596 v1209 
=== Predecessor ===
v860 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1194 lastLocationAccess: - #next: v1139  <|@  <|@
f <@~|@floating>@ <|@
tid v1209 <|@
result [v95|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1138 
=== Succesors ===
=== Usages ===
v1139 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1138  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1139 <|@
result v96|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-153099|0xfffffffffffda9f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?23 
guard: - 
address: v1209 
lastLocationAccess: - 
=== Succesors ===
next: i1140 
=== Usages ===
v1077 
=== Predecessor ===
a1138 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?23 guard: - address: v1209 lastLocationAccess: - #next: i1140  <|@  <|@
f <@~|@floating>@ <|@
tid j646 <|@
result v94|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1137 
=== Succesors ===
=== Usages ===
v1193 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1137  <|@  <|@
f <@~|@floating>@ <|@
tid v1193 <|@
result [v11|QWORD[.] + v94|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a569 
index: j646 
=== Succesors ===
=== Usages ===
v593 i1140 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a569 index: j646  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1140 <|@
result v97|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1193 
lastLocationAccess: - 
=== Succesors ===
next: v593 
=== Usages ===
?908 ?72 v621 
=== Predecessor ===
v1139 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1193 lastLocationAccess: - #next: v593  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v593 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v860 
address: v1193 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v602 
=== Usages ===
=== Predecessor ===
i1140 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v860 address: v1193 lastLocationAccess: - value: i3 stateAfter: - #next: v602  <|@  <|@
f <@~|@floating>@ <|@
tid v1077 <|@
result v98|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1139 
=== Succesors ===
=== Usages ===
v1195 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1139  <|@  <|@
f <@~|@floating>@ <|@
tid v1195 <|@
result [v98|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1077 
index: - 
=== Succesors ===
=== Usages ===
v602 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1077 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v602 <|@
result v100|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1195 
lastLocationAccess: - 
=== Succesors ===
next: j604 
=== Usages ===
v1196 v605 
=== Predecessor ===
v593 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1195 lastLocationAccess: - #next: j604  <|@  <|@
f <@~|@floating>@ <|@
tid v1196 <|@
result [v100|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v602 
index: - 
=== Succesors ===
=== Usages ===
j604 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v602 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j604 <|@
result v101|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1196 
lastLocationAccess: - 
=== Succesors ===
next: i71 
=== Usages ===
v605 
=== Predecessor ===
v602 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1196 lastLocationAccess: - #next: i71  <|@  <|@
f <@~|@floating>@ <|@
tid a596 <|@
result v102|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1138 
=== Succesors ===
=== Usages ===
v605 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1138  <|@  <|@
tid v605 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j604 
metaspaceMethod: v602 
arguments: a596 a2 i3 a4 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j604 metaspaceMethod: v602 arguments: a596 a2 i3 a4  <|@  <|@
tid ?77 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?164 
values: a262 a2 i3 a4 i22 
=== Succesors ===
=== Usages ===
?908 ?72 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?164 values: a262 a2 i3 a4 i22  <|@  <|@
f <@~|@floating>@ <|@
tid a562 <|@
result v103|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1090 
=== Succesors ===
=== Usages ===
?72 ?908 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1090  <|@  <|@
tid ?908 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?77 
values: a562 a2 - - i1140 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?77 values: a562 a2 - - i1140  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i71 <|@
result v104|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v605 
stateDuring: ?908 
=== Succesors ===
next: a1141 
=== Usages ===
v46 ?72 
=== Predecessor ===
j604 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v605 stateDuring: ?908 #next: a1141  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1141 <|@
result v105|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1191 
lastLocationAccess: - 
=== Succesors ===
next: i1142 
=== Usages ===
a607 v1197 
=== Predecessor ===
i71 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1191 lastLocationAccess: - #next: i1142  <|@  <|@
tid ?72 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?77 
values: i71 a562 a2 - - i1140 
=== Succesors ===
=== Usages ===
v1211 i1142 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?77 values: i71 a562 a2 - - i1140  <|@  <|@
f <@~|@floating>@ <|@
tid v1197 <|@
result [v105|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1141 
=== Succesors ===
=== Usages ===
i1142 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1141  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1142 <|@
result v106|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-156171|0xfffffffffffd9df5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?72 
guard: - 
address: v1197 
lastLocationAccess: - 
=== Succesors ===
next: i1143 
=== Usages ===
v614 
=== Predecessor ===
a1141 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?72 guard: - address: v1197 lastLocationAccess: - #next: i1143  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1143 <|@
result v107|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1192 
lastLocationAccess: - 
=== Succesors ===
next: v875 
=== Usages ===
j647 v614 
=== Predecessor ===
i1142 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1192 lastLocationAccess: - #next: v875  <|@  <|@
f <@~|@floating>@ <|@
tid v614 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1143 
y: i1142 
=== Succesors ===
=== Usages ===
v875 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1143 y: i1142  <|@  <|@
f <@*|@fixed>@ <|@
tid v875 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v614 
=== Succesors ===
trueSuccessor: v872 
falseSuccessor: v874 
=== Usages ===
=== Predecessor ===
i1143 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v614 #trueSuccessor: v872 #falseSuccessor: v874  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v872 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v621 
=== Usages ===
v621 
=== Predecessor ===
v875 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v621  <|@  <|@
f <@~|@floating>@ <|@
tid a607 <|@
result v108|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1141 
=== Succesors ===
=== Usages ===
v1198 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1141  <|@  <|@
f <@~|@floating>@ <|@
tid j647 <|@
result v107|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1143 
=== Succesors ===
=== Usages ===
v1198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1143  <|@  <|@
f <@~|@floating>@ <|@
tid v1198 <|@
result [v108|QWORD[.] + v107|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a607 
index: j647 
=== Succesors ===
=== Usages ===
v621 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a607 index: j647  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v621 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v872 
address: v1198 
lastLocationAccess: - 
value: i1140 
stateAfter: - 
=== Succesors ===
next: v50 
=== Usages ===
=== Predecessor ===
v872 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v872 address: v1198 lastLocationAccess: - value: i1140 stateAfter: - #next: v50  <|@  <|@
f <@~|@floating>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i71 
y: i19 
=== Succesors ===
=== Usages ===
v50 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i71 y: i19  <|@  <|@
f <@*|@fixed>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v46 
=== Succesors ===
trueSuccessor: v49 
falseSuccessor: v47 
=== Usages ===
=== Predecessor ===
v621 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v46 #trueSuccessor: v49 #falseSuccessor: v47  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v53 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v53  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
result v109|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32
=== Inputs ===
x: i22 
y: i51 
=== Succesors ===
=== Usages ===
i22 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i22 y: i51  <|@  <|@
f <@*|@fixed>@ <|@
tid v53 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
loopBegin: v21 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v49 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v21  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v21 
=== Succesors ===
next: v167 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v21 #next: v167  <|@  <|@
f <@*|@fixed>@ <|@
tid v167 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v165 
=== Predecessor ===
v47 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v42 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v21 
=== Succesors ===
next: v166 
=== Usages ===
=== Predecessor ===
v902 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v21 #next: v166  <|@  <|@
f <@*|@fixed>@ <|@
tid v166 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v165 
=== Predecessor ===
v42 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
ends: v166 v167 
=== Succesors ===
next: v10 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v166 v167 #next: v10  <|@  <|@
f <@*|@fixed>@ <|@
tid v10 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 10]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v165 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v874 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1211 
=== Usages ===
=== Predecessor ===
v875 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1211  <|@  <|@
f <@*|@fixed>@ <|@
tid v1211 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 615
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?72 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v874 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?72  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v862 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v961 
=== Usages ===
=== Predecessor ===
v863 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v961  <|@  <|@
f <@~|@floating>@ <|@
tid i962 <|@
result int[-150299|0xfffffffffffdb4e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -150299
stableDimension: 0
stamp: i32 [-150299]
stampKind: i32
value: int[-150299|0xfffffffffffdb4e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v961 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v862 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v854 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v954 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v954  <|@  <|@
f <@~|@floating>@ <|@
tid i955 <|@
result int[-144435|0xfffffffffffdcbcd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -144435
stableDimension: 0
stamp: i32 [-144435]
stampKind: i32
value: int[-144435|0xfffffffffffdcbcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v954 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v854 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v878 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v947 
=== Usages ===
=== Predecessor ===
v879 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v947  <|@  <|@
f <@~|@floating>@ <|@
tid i948 <|@
result int[-224275|0xfffffffffffc93ed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -224275
stableDimension: 0
stamp: i32 [-224275]
stampKind: i32
value: int[-224275|0xfffffffffffc93ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v947 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v878 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v734 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v945 
=== Usages ===
=== Predecessor ===
v735 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v945  <|@  <|@
f <@~|@floating>@ <|@
tid i946 <|@
result int[-71195|0xfffffffffffee9e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
rawvalue: -71195
stableDimension: 0
stamp: i32 [-71195]
stampKind: i32
value: int[-71195|0xfffffffffffee9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i940 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v945 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v937 
=== Predecessor ===
v734 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i940 <|@
result v110|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i32 [-225299 - -21555] bits:1...1xx1xxxxxxx11x0x101
valueDescription: i32
=== Inputs ===
merge: v937 
values: i946 i948 i955 i962 i966 i969 i973 i975 i983 i987 
=== Succesors ===
=== Usages ===
v942 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v937 values: i946 i948 i955 i962 i966 i969 i973 i975 i983 i987  <|@  <|@
f <@~|@floating>@ <|@
tid j941 <|@
result v111|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: i64 [0 - 4500] bits:0...0x0xxxx00x0x00
valueDescription: i64
=== Inputs ===
merge: v937 
values: j934 j949 j956 j934 j967 j934 j949 j934 j956 j934 
=== Succesors ===
=== Usages ===
v942 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v937 values: j934 j949 j956 j934 j967 j934 j949 j934 j956 j934  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v937 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v945 v947 v954 v961 v965 v968 v972 v974 v982 v986 
=== Succesors ===
next: v942 
=== Usages ===
i940 j941 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v945 v947 v954 v961 v965 v968 v972 v974 v982 v986 #next: v942  <|@  <|@
f <@*|@fixed>@ <|@
tid v942 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
stateBefore: ?23 
actionAndReason: i940 
speculation: j941 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v937 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?23 actionAndReason: i940 speculation: j941  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v726 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1210 
=== Usages ===
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1210  <|@  <|@
f <@*|@fixed>@ <|@
tid v1210 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 264
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
reason: TypeCheckedInliningViolated
speculation: {0x0000000000000014[index: 0, len: 20, hash: 0x65c1a1a0]: FallbackDeopt@9[HotSpotMethod<Pattern$BranchConn.match(Matcher, int, CharSequence)>, 7, FALSE, jdk.graal.compiler.phases.common.inlining.InliningUtil$ReceiverTypeSpeculationContext, HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>]}
stamp: void
=== Inputs ===
stateBefore: ?5 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v726 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?5  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGTSlowdown"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr   -1  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr   -1  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr   -1  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr   -1  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr   -1  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr  248  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  250  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr  254  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  518  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  520  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  524  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  732  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  738  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  740  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  744  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr  904  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  906  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr  910  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1012  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1020  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr 1022  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1026  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1116  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1124  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr 1126  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1130  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr  248  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  250  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr  254  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  518  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  520  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  524  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  732  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  738  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  740  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  744  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr  904  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  906  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr  910  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1012  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1020  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr 1022  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1026  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1116  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1124  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr 1126  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1130  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v101|q [0, 1[[244, 248[[514, 518[[734, 738[[900, 904[[1022, 1026[[1126, 1130[[1192, 1194[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 34[[238, 247[[508, 517[[728, 737[[894, 903[[1016, 1025[[1120, 1129[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 32[[236, 247[[506, 517[[726, 737[[892, 903[[1014, 1025[[1118, 1129[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v100|q [0, 1[[242, 247[[512, 517[[732, 737[[898, 903[[1020, 1025[[1124, 1129[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 26[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v102|q [0, 30[[234, 247[[504, 517[[724, 737[[890, 903[[1012, 1025[[1116, 1129[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 36[[240, 247[[510, 517[[730, 737[[896, 903[[1018, 1025[[1122, 1129[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  v0|q QWORD "[v0|q]" v0|q rsi|- [30, 44[[1400, 1421[30 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|- [32, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1555[32 MustHaveRegister 38 MustHaveRegister 114 MustHaveRegister 236 ShouldHaveRegister 250 MustHaveRegister 293 LiveAtLoopEnd 506 ShouldHaveRegister 520 MustHaveRegister 726 ShouldHaveRegister 740 MustHaveRegister 783 LiveAtLoopEnd 892 ShouldHaveRegister 906 MustHaveRegister 1014 ShouldHaveRegister 1118 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|- [34, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1555[34 MustHaveRegister 220 MustHaveRegister 238 ShouldHaveRegister 293 LiveAtLoopEnd 490 MustHaveRegister 508 ShouldHaveRegister 710 MustHaveRegister 728 ShouldHaveRegister 783 LiveAtLoopEnd 878 MustHaveRegister 894 ShouldHaveRegister 1016 ShouldHaveRegister 1120 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[v3|q]" v3|q r8|- [36, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1555[36 MustHaveRegister 240 ShouldHaveRegister 293 LiveAtLoopEnd 510 ShouldHaveRegister 730 ShouldHaveRegister 783 LiveAtLoopEnd 896 ShouldHaveRegister 1018 ShouldHaveRegister 1122 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d -1 [40, 332[40 MustHaveRegister 42 MustHaveRegister 56 MustHaveRegister 72 MustHaveRegister 86 MustHaveRegister 293 LiveAtLoopEnd 332 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[v5|q]" v5|q v4|d [56, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1555[56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d v109|d [60, 290[[294, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1555[74 MustHaveRegister 86 MustHaveRegister 112 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [72, 110[72 MustHaveRegister 74 MustHaveRegister 110 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[v8|q]" v8|q v7|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[v9|d]" v9|d -1 [112, 254[112 MustHaveRegister 118 MustHaveRegister 130 MustHaveRegister 148 MustHaveRegister 214 MustHaveRegister 232 MustHaveRegister 254 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[v10|d]" v10|d -1 [114, 146[[294, 416[[794, 808[114 MustHaveRegister 116 MustHaveRegister 146 MustHaveRegister 416 MustHaveRegister 808 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q v10|d [116, 220[[294, 490[[794, 878[116 MustHaveRegister 218 MustHaveRegister 220 MustHaveRegister 488 MustHaveRegister 490 MustHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d -1 [332, 334[332 MustHaveRegister 334 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[v13|d]" v13|d -1 [334, 784[[794, 910[[946, 996[[1050, 1100[334 MustHaveRegister 336 MustHaveRegister 342 MustHaveRegister 358 MustHaveRegister 372 MustHaveRegister 572 MustHaveRegister 586 MustHaveRegister 783 LiveAtLoopEnd 810 MustHaveRegister 872 MustHaveRegister 910 MustHaveRegister 996 MustHaveRegister 1100 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d -1 [336, 340[336 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[v15|q]" v15|q v14|d [340, 345[340 MustHaveRegister 344 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[v16|q]" v16|q -1 [338, 341[338 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[v17|q]" v17|q v13|d [342, 784[[794, 936[[946, 1030[[1050, 1134[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1492, 1513[342 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[v18|d]" v18|d -1 [358, 386[358 MustHaveRegister 360 MustHaveRegister 386 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[v19|d]" v19|d -1 [386, 524[386 MustHaveRegister 388 MustHaveRegister 400 MustHaveRegister 418 MustHaveRegister 484 MustHaveRegister 502 MustHaveRegister 524 MustHaveRegister  "NoSpillStore"
  v20|d DWORD "[v20|d]" v20|d -1 [996, 998[996 MustHaveRegister 998 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[v21|d]" v21|d -1 [998, 1010[998 MustHaveRegister 1000 MustHaveRegister 1010 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[v22|d]" v22|d -1 [1000, 1004[1000 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[v23|q]" v23|q v22|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[v24|q]" v24|q -1 [1002, 1005[1002 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[v25|q]" v25|q -1 [1006, 1020[1006 MustHaveRegister 1008 MustHaveRegister 1020 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[v26|q]" v26|q -1 [1008, 1022[1008 MustHaveRegister 1022 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[v27|q]" v27|q v21|d [1010, 1012[1010 MustHaveRegister 1012 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d rax|d [1026, 1028[1026 MustHaveRegister 1028 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d -1 [416, 420[416 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d -1 [418, 490[418 MustHaveRegister 420 ShouldHaveRegister 488 MustHaveRegister 490 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d -1 [484, 500[484 MustHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[v32|d]" v32|d -1 [486, 494[486 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d -1 [488, 546[[1218, 1239[488 MustHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v34|q QWORD "[v34|q]" v34|q v32|d [494, 496[494 MustHaveRegister 496 MustHaveRegister  "NoSpillStore"
  v35|q QWORD "[v35|q]" v35|q -1 [492, 495[492 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[v36|q]" v36|q -1 [496, 512[496 MustHaveRegister 498 MustHaveRegister 512 ShouldHaveRegister  "NoSpillStore"
  v37|q QWORD "[v37|q]" v37|q -1 [498, 514[498 MustHaveRegister 514 ShouldHaveRegister  "NoSpillStore"
  v38|q QWORD "[v38|q]" v38|q v31|d [500, 504[500 MustHaveRegister 504 ShouldHaveRegister  "NoSpillStore"
  v39|q QWORD "[v39|q]" v39|q v19|d [502, 528[[1218, 1239[502 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d rax|d [518, 548[[1218, 1239[518 MustHaveRegister 548 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d -1 [520, 544[520 MustHaveRegister 522 MustHaveRegister 544 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d -1 [522, 526[522 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [524, 546[524 MustHaveRegister 526 ShouldHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v44|q QWORD "[v44|q]" v44|q v41|d [544, 559[544 MustHaveRegister 546 MustHaveRegister 558 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d v75|d [560, 780[[1050, 1134[[1240, 1261[[1262, 1283[[1306, 1326[[1348, 1389[574 MustHaveRegister 586 MustHaveRegister 606 MustHaveRegister 780 ShouldHaveRegister  "NoSpillStore"
  v46|q QWORD "[v46|q]" v46|q v44|q [560, 710[636 MustHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d -1 [572, 604[572 MustHaveRegister 574 MustHaveRegister 604 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[v48|q]" v48|q v47|d [604, 606[604 MustHaveRegister 606 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d -1 [606, 744[606 MustHaveRegister 608 MustHaveRegister 620 MustHaveRegister 638 MustHaveRegister 704 MustHaveRegister 722 MustHaveRegister 744 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d -1 [1100, 1102[1100 MustHaveRegister 1102 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d -1 [1102, 1114[1102 MustHaveRegister 1104 MustHaveRegister 1114 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[v52|d]" v52|d -1 [1104, 1108[1104 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[v53|q]" v53|q v52|d [1108, 1110[1108 MustHaveRegister 1110 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[v54|q]" v54|q -1 [1106, 1109[1106 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v55|q QWORD "[v55|q]" v55|q -1 [1110, 1124[1110 MustHaveRegister 1112 MustHaveRegister 1124 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[v56|q]" v56|q -1 [1112, 1126[1112 MustHaveRegister 1126 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[v57|q]" v57|q v51|d [1114, 1116[1114 MustHaveRegister 1116 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d rax|d [1130, 1132[1130 MustHaveRegister 1132 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d -1 [636, 640[636 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d -1 [638, 710[638 MustHaveRegister 640 ShouldHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d -1 [704, 720[704 MustHaveRegister 706 MustHaveRegister 720 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[v62|d]" v62|d -1 [706, 714[706 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d -1 [708, 766[[1240, 1261[708 MustHaveRegister 766 MustHaveRegister  "NoSpillStore"
  v64|q QWORD "[v64|q]" v64|q v62|d [714, 716[714 MustHaveRegister 716 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[v65|q]" v65|q -1 [712, 715[712 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v66|q QWORD "[v66|q]" v66|q -1 [716, 732[716 MustHaveRegister 718 MustHaveRegister 732 ShouldHaveRegister  "NoSpillStore"
  v67|q QWORD "[v67|q]" v67|q -1 [718, 734[718 MustHaveRegister 734 ShouldHaveRegister  "NoSpillStore"
  v68|q QWORD "[v68|q]" v68|q v61|d [720, 724[720 MustHaveRegister 724 ShouldHaveRegister  "NoSpillStore"
  v69|q QWORD "[v69|q]" v69|q v49|d [722, 748[[1240, 1261[722 MustHaveRegister  "NoSpillStore"
  v70|d DWORD "[v70|d]" v70|d rax|d [738, 768[[1240, 1261[738 MustHaveRegister 768 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[v71|d]" v71|d -1 [740, 764[740 MustHaveRegister 742 MustHaveRegister 764 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[v72|d]" v72|d -1 [742, 746[742 MustHaveRegister 746 MustHaveRegister  "NoSpillStore"
  v73|d DWORD "[v73|d]" v73|d -1 [744, 766[744 MustHaveRegister 746 ShouldHaveRegister 766 MustHaveRegister  "NoSpillStore"
  v74|q QWORD "[v74|q]" v74|q v71|d [764, 783[764 MustHaveRegister 766 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[v75|d]" v75|d v45|d [780, 783[780 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[v76|d]" v76|d -1 [1368, 1384[1384 MustHaveRegister  "NoSpillStore"
  v77|q QWORD "[v77|q]" v77|q -1 [1368, 1386[1386 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[v78|d]" v78|d -1 [808, 812[808 MustHaveRegister 812 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[v79|d]" v79|d -1 [810, 878[810 MustHaveRegister 812 ShouldHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[v80|d]" v80|d -1 [872, 888[872 MustHaveRegister 874 MustHaveRegister 888 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[v81|d]" v81|d -1 [874, 882[874 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[v82|d]" v82|d -1 [876, 936[[1326, 1347[[1492, 1513[876 MustHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v83|q QWORD "[v83|q]" v83|q v81|d [882, 884[882 MustHaveRegister 884 MustHaveRegister  "NoSpillStore"
  v84|q QWORD "[v84|q]" v84|q -1 [880, 883[880 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v85|q QWORD "[v85|q]" v85|q -1 [884, 898[884 MustHaveRegister 886 MustHaveRegister 898 ShouldHaveRegister  "NoSpillStore"
  v86|q QWORD "[v86|q]" v86|q -1 [886, 900[886 MustHaveRegister 900 ShouldHaveRegister  "NoSpillStore"
  v87|q QWORD "[v87|q]" v87|q v80|d [888, 890[888 MustHaveRegister 890 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[v88|d]" v88|d rax|d [904, 934[[1492, 1513[904 MustHaveRegister 934 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[v89|d]" v89|d -1 [906, 930[906 MustHaveRegister 908 MustHaveRegister 930 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[v90|d]" v90|d -1 [908, 912[908 MustHaveRegister 912 MustHaveRegister  "NoSpillStore"
  v91|d DWORD "[v91|d]" v91|d -1 [910, 932[910 MustHaveRegister 912 ShouldHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v92|q QWORD "[v92|q]" v92|q v89|d [930, 932[930 MustHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[v93|d]" v93|d -1 [146, 150[146 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[v94|d]" v94|d -1 [148, 220[148 MustHaveRegister 150 ShouldHaveRegister 218 MustHaveRegister 220 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[v95|d]" v95|d -1 [214, 230[214 MustHaveRegister 216 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[v96|d]" v96|d -1 [216, 224[216 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v97|d DWORD "[v97|d]" v97|d -1 [218, 276[[1196, 1217[218 MustHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v98|q QWORD "[v98|q]" v98|q v96|d [224, 226[224 MustHaveRegister 226 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[v99|q]" v99|q -1 [222, 225[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v100|q QWORD "[v100|q]" v100|q -1 [226, 242[226 MustHaveRegister 228 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v101|q QWORD "[v101|q]" v101|q -1 [228, 244[228 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v102|q QWORD "[v102|q]" v102|q v95|d [230, 234[230 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v103|q QWORD "[v103|q]" v103|q v9|d [232, 258[[1196, 1217[232 MustHaveRegister  "NoSpillStore"
  v104|d DWORD "[v104|d]" v104|d rax|d [248, 278[[1196, 1217[248 MustHaveRegister 278 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[v105|d]" v105|d -1 [250, 274[250 MustHaveRegister 252 MustHaveRegister 274 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[v106|d]" v106|d -1 [252, 256[252 MustHaveRegister 256 MustHaveRegister  "NoSpillStore"
  v107|d DWORD "[v107|d]" v107|d -1 [254, 276[254 MustHaveRegister 256 ShouldHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v108|q QWORD "[v108|q]" v108|q v105|d [274, 276[274 MustHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v109|d DWORD "[v109|d]" v109|d v6|d [290, 293[290 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[v110|d]" v110|d -1 [1534, 1550[1550 MustHaveRegister  "NoSpillStore"
  v111|q QWORD "[v111|q]" v111|q -1 [1534, 1552[1552 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v101|q [0, 1[[244, 248[[514, 518[[734, 738[[900, 904[[1022, 1026[[1126, 1130[[1192, 1194[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 34[[238, 247[[508, 517[[728, 737[[894, 903[[1016, 1025[[1120, 1129[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 32[[236, 247[[506, 517[[726, 737[[892, 903[[1014, 1025[[1118, 1129[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v100|q [0, 1[[242, 247[[512, 517[[732, 737[[898, 903[[1020, 1025[[1124, 1129[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 26[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v102|q [0, 30[[234, 247[[504, 517[[724, 737[[890, 903[[1012, 1025[[1116, 1129[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 36[[240, 247[[510, 517[[730, 737[[896, 903[[1018, 1025[[1122, 1129[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [30, 44[[1400, 1421[30 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [32, 235[32 MustHaveRegister 38 MustHaveRegister 114 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [34, 237[34 MustHaveRegister 220 MustHaveRegister  "SpillInDominator"
  v3|q QWORD "[r8|q]" v3|q r8|- [36, 239[36 MustHaveRegister  "SpillInDominator"
  v4|d DWORD "[r10|d]" v4|d -1 [40, 152[40 MustHaveRegister 42 MustHaveRegister 56 MustHaveRegister 72 MustHaveRegister 86 MustHaveRegister  "SpillInDominator"
  v5|q QWORD "[r11|q]" v5|q v4|d [56, 60[56 MustHaveRegister  "SpillInDominator"
  v6|d DWORD "[r11|d]" v6|d v109|d [60, 152[74 MustHaveRegister 86 MustHaveRegister 112 MustHaveRegister  "OneSpillStore"
  v7|d DWORD "[rsi|d]" v7|d -1 [72, 110[72 MustHaveRegister 74 MustHaveRegister 110 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[rsi|q]" v8|q v7|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [112, 245[112 MustHaveRegister 118 MustHaveRegister 130 MustHaveRegister 148 MustHaveRegister 214 MustHaveRegister 232 MustHaveRegister  "OneSpillStore"
  v10|d DWORD "[rbx|d]" v10|d -1 [114, 146[[294, 416[[794, 808[114 MustHaveRegister 116 MustHaveRegister 146 MustHaveRegister 416 MustHaveRegister 808 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rsi|q]" v11|q v10|d [116, 220[[294, 490[[794, 878[116 MustHaveRegister 218 MustHaveRegister 220 MustHaveRegister 488 MustHaveRegister 490 MustHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rcx|d]" v12|d -1 [332, 334[332 MustHaveRegister 334 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[r10|d]" v13|d -1 [334, 422[334 MustHaveRegister 336 MustHaveRegister 342 MustHaveRegister 358 MustHaveRegister 372 MustHaveRegister  "SpillInDominator"
  v14|d DWORD "[rcx|d]" v14|d -1 [336, 340[336 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rcx|q]" v15|q v14|d [340, 345[340 MustHaveRegister 344 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[r8|q]" v16|q -1 [338, 341[338 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[r11|q]" v17|q v13|d [342, 422[342 MustHaveRegister  "OneSpillStore"
  v18|d DWORD "[rcx|d]" v18|d -1 [358, 386[358 MustHaveRegister 360 MustHaveRegister 386 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d -1 [386, 515[386 MustHaveRegister 388 MustHaveRegister 400 MustHaveRegister 418 MustHaveRegister 484 MustHaveRegister 502 MustHaveRegister  "OneSpillStore"
  v20|d DWORD "[rsi|d]" v20|d -1 [996, 998[996 MustHaveRegister 998 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[rsi|d]" v21|d -1 [998, 1010[998 MustHaveRegister 1000 MustHaveRegister 1010 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[rcx|d]" v22|d -1 [1000, 1004[1000 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rcx|q]" v23|q v22|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[r8|q]" v24|q -1 [1002, 1005[1002 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rbx|q]" v25|q -1 [1006, 1020[1006 MustHaveRegister 1008 MustHaveRegister 1020 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rax|q]" v26|q -1 [1008, 1022[1008 MustHaveRegister 1022 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[rsi|q]" v27|q v21|d [1010, 1012[1010 MustHaveRegister 1012 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[rax|d]" v28|d rax|d [1026, 1028[1026 MustHaveRegister 1028 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[rcx|d]" v29|d -1 [416, 420[416 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d -1 [418, 490[418 MustHaveRegister 420 ShouldHaveRegister 488 MustHaveRegister 490 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rbx|d]" v31|d -1 [484, 500[484 MustHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[rax|d]" v32|d -1 [486, 494[486 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[rdi|d]" v33|d -1 [488, 515[488 MustHaveRegister  "OneSpillStore"
  v34|q QWORD "[rax|q]" v34|q v32|d [494, 496[494 MustHaveRegister 496 MustHaveRegister  "NoSpillStore"
  v35|q QWORD "[rsi|q]" v35|q -1 [492, 495[492 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rax|q]" v36|q -1 [496, 512[496 MustHaveRegister 498 MustHaveRegister 512 ShouldHaveRegister  "NoSpillStore"
  v37|q QWORD "[rbp|q]" v37|q -1 [498, 514[498 MustHaveRegister 514 ShouldHaveRegister  "NoSpillStore"
  v38|q QWORD "[rbx|q]" v38|q v31|d [500, 504[500 MustHaveRegister 504 ShouldHaveRegister  "NoSpillStore"
  v39|q QWORD "[r13|q]" v39|q v19|d [502, 515[502 MustHaveRegister  "OneSpillStore"
  v40|d DWORD "[rax|d]" v40|d rax|d [518, 548[[1218, 1239[518 MustHaveRegister 548 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rsi|d]" v41|d -1 [520, 544[520 MustHaveRegister 522 MustHaveRegister 544 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rcx|d]" v42|d -1 [522, 526[522 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[r8|d]" v43|d -1 [524, 546[524 MustHaveRegister 526 ShouldHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v44|q QWORD "[rsi|q]" v44|q v41|d [544, 559[544 MustHaveRegister 546 MustHaveRegister 558 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r11|d]" v45|d v75|d [560, 642[574 MustHaveRegister 586 MustHaveRegister 606 MustHaveRegister  "OneSpillStore"
  v46|q QWORD "[rsi|q]" v46|q v44|q [560, 710[636 MustHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[r8|d]" v47|d -1 [572, 604[572 MustHaveRegister 574 MustHaveRegister 604 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[r8|q]" v48|q v47|d [604, 606[604 MustHaveRegister 606 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[r9|d]" v49|d -1 [606, 735[606 MustHaveRegister 608 MustHaveRegister 620 MustHaveRegister 638 MustHaveRegister 704 MustHaveRegister 722 MustHaveRegister  "OneSpillStore"
  v50|d DWORD "[rsi|d]" v50|d -1 [1100, 1102[1100 MustHaveRegister 1102 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rsi|d]" v51|d -1 [1102, 1114[1102 MustHaveRegister 1104 MustHaveRegister 1114 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[rdx|d]" v52|d -1 [1104, 1108[1104 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[rdx|q]" v53|q v52|d [1108, 1110[1108 MustHaveRegister 1110 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rcx|q]" v54|q -1 [1106, 1109[1106 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v55|q QWORD "[rbx|q]" v55|q -1 [1110, 1124[1110 MustHaveRegister 1112 MustHaveRegister 1124 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rax|q]" v56|q -1 [1112, 1126[1112 MustHaveRegister 1126 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[rsi|q]" v57|q v51|d [1114, 1116[1114 MustHaveRegister 1116 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [1130, 1132[1130 MustHaveRegister 1132 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[r8|d]" v59|d -1 [636, 640[636 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rbx|d]" v60|d -1 [638, 710[638 MustHaveRegister 640 ShouldHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [704, 720[704 MustHaveRegister 706 MustHaveRegister 720 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[rax|d]" v62|d -1 [706, 714[706 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[rdi|d]" v63|d -1 [708, 735[708 MustHaveRegister  "OneSpillStore"
  v64|q QWORD "[rax|q]" v64|q v62|d [714, 716[714 MustHaveRegister 716 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[rsi|q]" v65|q -1 [712, 715[712 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v66|q QWORD "[rbx|q]" v66|q -1 [716, 732[716 MustHaveRegister 718 MustHaveRegister 732 ShouldHaveRegister  "NoSpillStore"
  v67|q QWORD "[rax|q]" v67|q -1 [718, 734[718 MustHaveRegister 734 ShouldHaveRegister  "NoSpillStore"
  v68|q QWORD "[r8|q]" v68|q v61|d [720, 724[720 MustHaveRegister 724 ShouldHaveRegister  "NoSpillStore"
  v69|q QWORD "[rbp|q]" v69|q v49|d [722, 735[722 MustHaveRegister  "OneSpillStore"
  v70|d DWORD "[rax|d]" v70|d rax|d [738, 768[[1240, 1261[738 MustHaveRegister 768 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[rsi|d]" v71|d -1 [740, 764[740 MustHaveRegister 742 MustHaveRegister 764 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[rcx|d]" v72|d -1 [742, 746[742 MustHaveRegister 746 MustHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d -1 [744, 766[744 MustHaveRegister 746 ShouldHaveRegister 766 MustHaveRegister  "NoSpillStore"
  v74|q QWORD "[rsi|q]" v74|q v71|d [764, 783[764 MustHaveRegister 766 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[r11|d]" v75|d v45|d [780, 783[780 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d -1 [1368, 1384[1384 MustHaveRegister  "NoSpillStore"
  v77|q QWORD "[r11|q]" v77|q -1 [1368, 1386[1386 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[rcx|d]" v78|d -1 [808, 812[808 MustHaveRegister 812 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d -1 [810, 878[810 MustHaveRegister 812 ShouldHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[rbx|d]" v80|d -1 [872, 888[872 MustHaveRegister 874 MustHaveRegister 888 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d -1 [874, 882[874 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r11|d]" v82|d -1 [876, 901[876 MustHaveRegister  "OneSpillStore"
  v83|q QWORD "[rax|q]" v83|q v81|d [882, 884[882 MustHaveRegister 884 MustHaveRegister  "NoSpillStore"
  v84|q QWORD "[rsi|q]" v84|q -1 [880, 883[880 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v85|q QWORD "[rax|q]" v85|q -1 [884, 898[884 MustHaveRegister 886 MustHaveRegister 898 ShouldHaveRegister  "NoSpillStore"
  v86|q QWORD "[r9|q]" v86|q -1 [886, 900[886 MustHaveRegister 900 ShouldHaveRegister  "NoSpillStore"
  v87|q QWORD "[rbx|q]" v87|q v80|d [888, 890[888 MustHaveRegister 890 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[rax|d]" v88|d rax|d [904, 934[[1492, 1513[904 MustHaveRegister 934 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[rsi|d]" v89|d -1 [906, 930[906 MustHaveRegister 908 MustHaveRegister 930 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rcx|d]" v90|d -1 [908, 912[908 MustHaveRegister 912 MustHaveRegister  "NoSpillStore"
  v91|d DWORD "[r8|d]" v91|d -1 [910, 932[910 MustHaveRegister 912 ShouldHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v92|q QWORD "[rsi|q]" v92|q v89|d [930, 932[930 MustHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[rbx|d]" v93|d -1 [146, 150[146 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[rax|d]" v94|d -1 [148, 220[148 MustHaveRegister 150 ShouldHaveRegister 218 MustHaveRegister 220 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[rbx|d]" v95|d -1 [214, 230[214 MustHaveRegister 216 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[rbp|d]" v96|d -1 [216, 224[216 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v97|d DWORD "[r13|d]" v97|d -1 [218, 245[218 MustHaveRegister  "OneSpillStore"
  v98|q QWORD "[rbp|q]" v98|q v96|d [224, 226[224 MustHaveRegister 226 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[rsi|q]" v99|q -1 [222, 225[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v100|q QWORD "[rax|q]" v100|q -1 [226, 242[226 MustHaveRegister 228 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v101|q QWORD "[rbp|q]" v101|q -1 [228, 244[228 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v102|q QWORD "[rbx|q]" v102|q v95|d [230, 234[230 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v103|q QWORD "[r14|q]" v103|q v9|d [232, 245[232 MustHaveRegister  "OneSpillStore"
  v104|d DWORD "[rax|d]" v104|d rax|d [248, 278[[1196, 1217[248 MustHaveRegister 278 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[rsi|d]" v105|d -1 [250, 274[250 MustHaveRegister 252 MustHaveRegister 274 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[rcx|d]" v106|d -1 [252, 256[252 MustHaveRegister 256 MustHaveRegister  "NoSpillStore"
  v107|d DWORD "[r8|d]" v107|d -1 [254, 276[254 MustHaveRegister 256 ShouldHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v108|q QWORD "[rsi|q]" v108|q v105|d [274, 276[274 MustHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v109|d DWORD "[r11|d]" v109|d v6|d [290, 293[290 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[r10|d]" v110|d -1 [1534, 1550[1550 MustHaveRegister  "NoSpillStore"
  v111|q QWORD "[r11|q]" v111|q -1 [1534, 1552[1552 MustHaveRegister  "NoSpillStore"
  v112|q QWORD "[rbx|q]" v1|q v1|q [235, 241[236 ShouldHaveRegister  "SpillInDominator"
  v113|d DWORD "[r10|d]" v2|d v2|d [237, 239[238 ShouldHaveRegister  "SpillInDominator"
  v114|q QWORD "[r10|q]" v3|q v3|q [239, 245[240 ShouldHaveRegister  "SpillInDominator"
  v115|d DWORD "[vstack:0|d]" v4|d v4|d [152, 245[ "SpillInDominator"
  v116|q QWORD "[vstack:8|q]" v5|q v5|q [60, 152[ "SpillInDominator"
  v117|d DWORD "[vstack:5|d]" v6|d v6|d [152, 245[ "OneSpillStore"
  v118|q QWORD "[vstack:8|q]" v5|q v5|q [152, 245[ "SpillInDominator"
  v119|d DWORD "[vstack:3|d]" v9|d v9|d [245, 253[ "OneSpillStore"
  v120|d DWORD "[vstack:5|d]" v6|d v6|d [245, 290[[294, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1534[290 ShouldHaveRegister  "OneSpillStore"
  v121|d DWORD "[vstack:0|d]" v4|d v4|d [245, 294[293 LiveAtLoopEnd  "SpillInDominator"
  v122|q QWORD "[vstack:8|q]" v5|q v5|q [245, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1534[ "SpillInDominator"
  v123|d DWORD "[vstack:4|d]" v97|d v97|d [245, 258[ "OneSpillStore"
  v124|q QWORD "[vstack:7|q]" v103|q v103|q [245, 258[ "OneSpillStore"
  v125|q QWORD "[vstack:2|q]" v1|q v1|q [241, 249[ "SpillInDominator"
  v126|d DWORD "[vstack:1|d]" v2|d v2|d [245, 422[293 LiveAtLoopEnd  "SpillInDominator"
  v127|q QWORD "[vstack:6|q]" v3|q v3|q [245, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[293 LiveAtLoopEnd 510 ShouldHaveRegister 730 ShouldHaveRegister 783 LiveAtLoopEnd 896 ShouldHaveRegister 1018 ShouldHaveRegister 1122 ShouldHaveRegister  "SpillInDominator"
  v128|d DWORD "[vstack:1|d]" v2|d v2|d [239, 245[ "SpillInDominator"
  v129|q QWORD "[rdx|q]" v1|q v1|q [249, 505[250 MustHaveRegister 293 LiveAtLoopEnd  "SpillInDominator"
  v130|d DWORD "[rdi|d]" v9|d v9|d [253, 254[254 MustHaveRegister  "OneSpillStore"
  v131|d DWORD "[r13|d]" v97|d v97|d [258, 276[[1196, 1217[276 MustHaveRegister  "OneSpillStore"
  v132|d DWORD "[rbx|d]" v6|d v6|d [1534, 1555[ "OneSpillStore"
  v133|q QWORD "[r9|q]" v3|q v3|q [1534, 1555[ "SpillInDominator"
  v134|d DWORD "[rcx|d]" v2|d v2|d [422, 507[490 MustHaveRegister  "SpillInDominator"
  v135|d DWORD "[r10|d]" v4|d v4|d [294, 332[332 MustHaveRegister  "SpillInDominator"
  v136|q QWORD "[r14|q]" v103|q v103|q [1196, 1217[ "OneSpillStore"
  v137|q QWORD "[r8|q]" v5|q v5|q [1534, 1555[ "SpillInDominator"
  v138|q QWORD "[r14|q]" v1|q v1|q [505, 515[506 ShouldHaveRegister  "SpillInDominator"
  v139|d DWORD "[vstack:13|d]" v13|d v13|d [422, 515[ "SpillInDominator"
  v140|q QWORD "[vstack:15|q]" v17|q v17|q [422, 515[ "OneSpillStore"
  v141|d DWORD "[vstack:11|d]" v19|d v19|d [515, 523[ "OneSpillStore"
  v142|d DWORD "[rbx|d]" v2|d v2|d [507, 511[508 ShouldHaveRegister  "SpillInDominator"
  v143|d DWORD "[vstack:13|d]" v13|d v13|d [515, 560[ "SpillInDominator"
  v144|q QWORD "[vstack:15|q]" v17|q v17|q [515, 784[[794, 936[[946, 1030[[1050, 1134[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[ "OneSpillStore"
  v145|d DWORD "[vstack:12|d]" v33|d v33|d [515, 528[ "OneSpillStore"
  v146|q QWORD "[vstack:14|q]" v39|q v39|q [515, 528[ "OneSpillStore"
  v147|q QWORD "[vstack:2|q]" v1|q v1|q [515, 519[ "SpillInDominator"
  v148|d DWORD "[vstack:1|d]" v2|d v2|d [511, 560[ "SpillInDominator"
  v149|d DWORD "[rcx|d]" v2|d v2|d [560, 727[710 MustHaveRegister  "SpillInDominator"
  v150|q QWORD "[rdx|q]" v1|q v1|q [519, 725[520 MustHaveRegister  "SpillInDominator"
  v151|d DWORD "[r9|d]" v19|d v19|d [523, 524[524 MustHaveRegister  "OneSpillStore"
  v152|d DWORD "[rdi|d]" v33|d v33|d [528, 546[[1218, 1239[546 MustHaveRegister  "OneSpillStore"
  v153|d DWORD "[r10|d]" v13|d v13|d [560, 642[572 MustHaveRegister 586 MustHaveRegister  "SpillInDominator"
  v154|q QWORD "[r13|q]" v39|q v39|q [1218, 1239[ "OneSpillStore"
  v155|q QWORD "[r10|q]" v17|q v17|q [1492, 1513[ "OneSpillStore"
  v156|q QWORD "[r13|q]" v1|q v1|q [725, 735[726 ShouldHaveRegister  "SpillInDominator"
  v157|d DWORD "[vstack:13|d]" v13|d v13|d [642, 735[ "SpillInDominator"
  v158|d DWORD "[vstack:18|d]" v45|d v45|d [642, 735[ "OneSpillStore"
  v159|d DWORD "[r14|d]" v2|d v2|d [727, 735[728 ShouldHaveRegister  "SpillInDominator"
  v160|d DWORD "[vstack:16|d]" v49|d v49|d [735, 743[ "OneSpillStore"
  v161|d DWORD "[vstack:18|d]" v45|d v45|d [735, 780[[1050, 1134[[1240, 1261[[1262, 1283[[1306, 1326[[1348, 1368[780 ShouldHaveRegister  "OneSpillStore"
  v162|d DWORD "[vstack:13|d]" v13|d v13|d [735, 784[783 LiveAtLoopEnd  "SpillInDominator"
  v163|d DWORD "[vstack:17|d]" v63|d v63|d [735, 748[ "OneSpillStore"
  v164|q QWORD "[vstack:19|q]" v69|q v69|q [735, 748[ "OneSpillStore"
  v165|q QWORD "[vstack:2|q]" v1|q v1|q [735, 739[ "SpillInDominator"
  v166|d DWORD "[vstack:1|d]" v2|d v2|d [735, 784[[794, 814[783 LiveAtLoopEnd  "SpillInDominator"
  v167|q QWORD "[rdx|q]" v1|q v1|q [739, 784[[794, 891[740 MustHaveRegister 783 LiveAtLoopEnd  "SpillInDominator"
  v168|d DWORD "[r9|d]" v49|d v49|d [743, 744[744 MustHaveRegister  "OneSpillStore"
  v169|d DWORD "[rdi|d]" v63|d v63|d [748, 766[[1240, 1261[766 MustHaveRegister  "OneSpillStore"
  v170|d DWORD "[r8|d]" v45|d v45|d [1368, 1389[ "OneSpillStore"
  v171|d DWORD "[rcx|d]" v2|d v2|d [814, 893[878 MustHaveRegister  "SpillInDominator"
  v172|d DWORD "[r10|d]" v13|d v13|d [794, 901[810 MustHaveRegister 872 MustHaveRegister  "SpillInDominator"
  v173|q QWORD "[rbp|q]" v69|q v69|q [1240, 1261[ "OneSpillStore"
  v174|q QWORD "[rdi|q]" v1|q v1|q [891, 901[892 ShouldHaveRegister  "SpillInDominator"
  v175|d DWORD "[vstack:13|d]" v13|d v13|d [901, 909[ "SpillInDominator"
  v176|d DWORD "[rbp|d]" v2|d v2|d [893, 901[894 ShouldHaveRegister  "SpillInDominator"
  v177|d DWORD "[vstack:20|d]" v82|d v82|d [901, 914[ "OneSpillStore"
  v178|q QWORD "[vstack:2|q]" v1|q v1|q [901, 905[ "SpillInDominator"
  v179|d DWORD "[vstack:1|d]" v2|d v2|d [901, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[1016 ShouldHaveRegister 1120 ShouldHaveRegister  "SpillInDominator"
  v180|q QWORD "[rdx|q]" v1|q v1|q [905, 936[[946, 1013[906 MustHaveRegister  "SpillInDominator"
  v181|d DWORD "[r10|d]" v13|d v13|d [909, 910[[946, 996[[1050, 1100[910 MustHaveRegister 996 MustHaveRegister 1100 MustHaveRegister  "SpillInDominator"
  v182|d DWORD "[r11|d]" v82|d v82|d [914, 936[[1326, 1347[[1492, 1513[932 MustHaveRegister  "OneSpillStore"
  v183|d DWORD "[rcx|d]" v2|d v2|d [1534, 1555[ "SpillInDominator"
  v184|q QWORD "[r10|q]" v1|q v1|q [1013, 1023[1014 ShouldHaveRegister  "SpillInDominator"
  v185|q QWORD "[vstack:2|q]" v1|q v1|q [1023, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[1118 ShouldHaveRegister  "SpillInDominator"
  v186|q QWORD "[rdx|q]" v1|q v1|q [1534, 1555[ "SpillInDominator"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v112|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v128|DWORD = MOVE input: v113|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v125|QWORD[.] = MOVE input: v112|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v122|QWORD[.] = STACKMOVE (input: v118|QWORD[.], ~backupSlot: vstack:9|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v124|QWORD[.] = MOVE input: v103|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v121|DWORD[_] = STACKMOVE (input: v115|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = STACKMOVE (input: v128|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v114|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = STACKMOVE (input: v117|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE input: v97|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD[_] = MOVE input: v9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr  248  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v125|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  250  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v130|DWORD[_] = MOVE input: v119|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  254  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v138|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v142|DWORD = MOVE input: v134|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v148|DWORD = MOVE input: v142|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = STACKMOVE (input: v140|QWORD[.], ~backupSlot: vstack:9|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|QWORD[.] = MOVE input: v39|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v143|DWORD[_] = STACKMOVE (input: v139|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v141|DWORD[_] = MOVE input: v19|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v147|QWORD[.] = MOVE input: v138|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  518  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v150|QWORD[.] = MOVE input: v147|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  520  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v151|DWORD[_] = MOVE input: v141|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  524  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v159|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  732  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v164|QWORD[.] = MOVE input: v69|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v162|DWORD[_] = STACKMOVE (input: v157|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v166|DWORD = MOVE input: v159|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = STACKMOVE (input: v158|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v63|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD[_] = MOVE input: v49|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v165|QWORD[.] = MOVE input: v156|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  738  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v167|QWORD[.] = MOVE input: v165|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  740  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v168|DWORD[_] = MOVE input: v160|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  744  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v174|QWORD[.] = MOVE input: v167|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v171|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v176|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v177|DWORD = MOVE input: v82|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v175|DWORD[_] = MOVE input: v172|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v178|QWORD[.] = MOVE input: v174|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr  904  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v178|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  906  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v175|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  910  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1012  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v184|QWORD[.] = MOVE input: v180|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1020  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr 1022  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v184|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1026  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1116  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1124  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr 1126  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1130  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v101|q [0, 1[[244, 248[[514, 518[[734, 738[[900, 904[[1022, 1026[[1126, 1130[[1192, 1194[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 34[[238, 247[[508, 517[[728, 737[[894, 903[[1016, 1025[[1120, 1129[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 32[[236, 247[[506, 517[[726, 737[[892, 903[[1014, 1025[[1118, 1129[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v100|q [0, 1[[242, 247[[512, 517[[732, 737[[898, 903[[1020, 1025[[1124, 1129[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 26[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v102|q [0, 30[[234, 247[[504, 517[[724, 737[[890, 903[[1012, 1025[[1116, 1129[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 36[[240, 247[[510, 517[[730, 737[[896, 903[[1018, 1025[[1122, 1129[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [30, 44[[1400, 1421[30 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [32, 235[32 MustHaveRegister 38 MustHaveRegister 114 MustHaveRegister  "StoreAtDefinition"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [34, 237[34 MustHaveRegister 220 MustHaveRegister  "StoreAtDefinition"
  v3|q QWORD "[r8|q]" v3|q r8|- [36, 239[36 MustHaveRegister  "StoreAtDefinition"
  v4|d DWORD "[r10|d]" v4|d -1 [40, 152[40 MustHaveRegister 42 MustHaveRegister 56 MustHaveRegister 72 MustHaveRegister 86 MustHaveRegister  "StoreAtDefinition"
  v5|q QWORD "[r11|q]" v5|q v4|d [56, 60[56 MustHaveRegister  "StoreAtDefinition"
  v6|d DWORD "[r11|d]" v6|d v109|d [60, 152[74 MustHaveRegister 86 MustHaveRegister 112 MustHaveRegister  "OneSpillStore"
  v7|d DWORD "[rsi|d]" v7|d -1 [72, 110[72 MustHaveRegister 74 MustHaveRegister 110 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[rsi|q]" v8|q v7|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [112, 245[112 MustHaveRegister 118 MustHaveRegister 130 MustHaveRegister 148 MustHaveRegister 214 MustHaveRegister 232 MustHaveRegister  "OneSpillStore"
  v10|d DWORD "[rbx|d]" v10|d -1 [114, 146[[294, 416[[794, 808[114 MustHaveRegister 116 MustHaveRegister 146 MustHaveRegister 416 MustHaveRegister 808 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rsi|q]" v11|q v10|d [116, 220[[294, 490[[794, 878[116 MustHaveRegister 218 MustHaveRegister 220 MustHaveRegister 488 MustHaveRegister 490 MustHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rcx|d]" v12|d -1 [332, 334[332 MustHaveRegister 334 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[r10|d]" v13|d -1 [334, 422[334 MustHaveRegister 336 MustHaveRegister 342 MustHaveRegister 358 MustHaveRegister 372 MustHaveRegister  "StoreAtDefinition"
  v14|d DWORD "[rcx|d]" v14|d -1 [336, 340[336 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rcx|q]" v15|q v14|d [340, 345[340 MustHaveRegister 344 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[r8|q]" v16|q -1 [338, 341[338 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[r11|q]" v17|q v13|d [342, 422[342 MustHaveRegister  "OneSpillStore"
  v18|d DWORD "[rcx|d]" v18|d -1 [358, 386[358 MustHaveRegister 360 MustHaveRegister 386 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d -1 [386, 515[386 MustHaveRegister 388 MustHaveRegister 400 MustHaveRegister 418 MustHaveRegister 484 MustHaveRegister 502 MustHaveRegister  "OneSpillStore"
  v20|d DWORD "[rsi|d]" v20|d -1 [996, 998[996 MustHaveRegister 998 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[rsi|d]" v21|d -1 [998, 1010[998 MustHaveRegister 1000 MustHaveRegister 1010 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[rcx|d]" v22|d -1 [1000, 1004[1000 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rcx|q]" v23|q v22|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[r8|q]" v24|q -1 [1002, 1005[1002 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rbx|q]" v25|q -1 [1006, 1020[1006 MustHaveRegister 1008 MustHaveRegister 1020 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rax|q]" v26|q -1 [1008, 1022[1008 MustHaveRegister 1022 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[rsi|q]" v27|q v21|d [1010, 1012[1010 MustHaveRegister 1012 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[rax|d]" v28|d rax|d [1026, 1028[1026 MustHaveRegister 1028 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[rcx|d]" v29|d -1 [416, 420[416 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d -1 [418, 490[418 MustHaveRegister 420 ShouldHaveRegister 488 MustHaveRegister 490 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rbx|d]" v31|d -1 [484, 500[484 MustHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[rax|d]" v32|d -1 [486, 494[486 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[rdi|d]" v33|d -1 [488, 515[488 MustHaveRegister  "OneSpillStore"
  v34|q QWORD "[rax|q]" v34|q v32|d [494, 496[494 MustHaveRegister 496 MustHaveRegister  "NoSpillStore"
  v35|q QWORD "[rsi|q]" v35|q -1 [492, 495[492 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rax|q]" v36|q -1 [496, 512[496 MustHaveRegister 498 MustHaveRegister 512 ShouldHaveRegister  "NoSpillStore"
  v37|q QWORD "[rbp|q]" v37|q -1 [498, 514[498 MustHaveRegister 514 ShouldHaveRegister  "NoSpillStore"
  v38|q QWORD "[rbx|q]" v38|q v31|d [500, 504[500 MustHaveRegister 504 ShouldHaveRegister  "NoSpillStore"
  v39|q QWORD "[r13|q]" v39|q v19|d [502, 515[502 MustHaveRegister  "OneSpillStore"
  v40|d DWORD "[rax|d]" v40|d rax|d [518, 548[[1218, 1239[518 MustHaveRegister 548 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rsi|d]" v41|d -1 [520, 544[520 MustHaveRegister 522 MustHaveRegister 544 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rcx|d]" v42|d -1 [522, 526[522 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[r8|d]" v43|d -1 [524, 546[524 MustHaveRegister 526 ShouldHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v44|q QWORD "[rsi|q]" v44|q v41|d [544, 559[544 MustHaveRegister 546 MustHaveRegister 558 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r11|d]" v45|d v75|d [560, 642[574 MustHaveRegister 586 MustHaveRegister 606 MustHaveRegister  "OneSpillStore"
  v46|q QWORD "[rsi|q]" v46|q v44|q [560, 710[636 MustHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[r8|d]" v47|d -1 [572, 604[572 MustHaveRegister 574 MustHaveRegister 604 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[r8|q]" v48|q v47|d [604, 606[604 MustHaveRegister 606 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[r9|d]" v49|d -1 [606, 735[606 MustHaveRegister 608 MustHaveRegister 620 MustHaveRegister 638 MustHaveRegister 704 MustHaveRegister 722 MustHaveRegister  "OneSpillStore"
  v50|d DWORD "[rsi|d]" v50|d -1 [1100, 1102[1100 MustHaveRegister 1102 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rsi|d]" v51|d -1 [1102, 1114[1102 MustHaveRegister 1104 MustHaveRegister 1114 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[rdx|d]" v52|d -1 [1104, 1108[1104 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[rdx|q]" v53|q v52|d [1108, 1110[1108 MustHaveRegister 1110 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rcx|q]" v54|q -1 [1106, 1109[1106 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v55|q QWORD "[rbx|q]" v55|q -1 [1110, 1124[1110 MustHaveRegister 1112 MustHaveRegister 1124 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rax|q]" v56|q -1 [1112, 1126[1112 MustHaveRegister 1126 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[rsi|q]" v57|q v51|d [1114, 1116[1114 MustHaveRegister 1116 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [1130, 1132[1130 MustHaveRegister 1132 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[r8|d]" v59|d -1 [636, 640[636 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rbx|d]" v60|d -1 [638, 710[638 MustHaveRegister 640 ShouldHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [704, 720[704 MustHaveRegister 706 MustHaveRegister 720 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[rax|d]" v62|d -1 [706, 714[706 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[rdi|d]" v63|d -1 [708, 735[708 MustHaveRegister  "OneSpillStore"
  v64|q QWORD "[rax|q]" v64|q v62|d [714, 716[714 MustHaveRegister 716 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[rsi|q]" v65|q -1 [712, 715[712 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v66|q QWORD "[rbx|q]" v66|q -1 [716, 732[716 MustHaveRegister 718 MustHaveRegister 732 ShouldHaveRegister  "NoSpillStore"
  v67|q QWORD "[rax|q]" v67|q -1 [718, 734[718 MustHaveRegister 734 ShouldHaveRegister  "NoSpillStore"
  v68|q QWORD "[r8|q]" v68|q v61|d [720, 724[720 MustHaveRegister 724 ShouldHaveRegister  "NoSpillStore"
  v69|q QWORD "[rbp|q]" v69|q v49|d [722, 735[722 MustHaveRegister  "OneSpillStore"
  v70|d DWORD "[rax|d]" v70|d rax|d [738, 768[[1240, 1261[738 MustHaveRegister 768 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[rsi|d]" v71|d -1 [740, 764[740 MustHaveRegister 742 MustHaveRegister 764 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[rcx|d]" v72|d -1 [742, 746[742 MustHaveRegister 746 MustHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d -1 [744, 766[744 MustHaveRegister 746 ShouldHaveRegister 766 MustHaveRegister  "NoSpillStore"
  v74|q QWORD "[rsi|q]" v74|q v71|d [764, 783[764 MustHaveRegister 766 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[r11|d]" v75|d v45|d [780, 783[780 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d -1 [1368, 1384[1384 MustHaveRegister  "NoSpillStore"
  v77|q QWORD "[r11|q]" v77|q -1 [1368, 1386[1386 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[rcx|d]" v78|d -1 [808, 812[808 MustHaveRegister 812 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d -1 [810, 878[810 MustHaveRegister 812 ShouldHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[rbx|d]" v80|d -1 [872, 888[872 MustHaveRegister 874 MustHaveRegister 888 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d -1 [874, 882[874 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r11|d]" v82|d -1 [876, 901[876 MustHaveRegister  "OneSpillStore"
  v83|q QWORD "[rax|q]" v83|q v81|d [882, 884[882 MustHaveRegister 884 MustHaveRegister  "NoSpillStore"
  v84|q QWORD "[rsi|q]" v84|q -1 [880, 883[880 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v85|q QWORD "[rax|q]" v85|q -1 [884, 898[884 MustHaveRegister 886 MustHaveRegister 898 ShouldHaveRegister  "NoSpillStore"
  v86|q QWORD "[r9|q]" v86|q -1 [886, 900[886 MustHaveRegister 900 ShouldHaveRegister  "NoSpillStore"
  v87|q QWORD "[rbx|q]" v87|q v80|d [888, 890[888 MustHaveRegister 890 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[rax|d]" v88|d rax|d [904, 934[[1492, 1513[904 MustHaveRegister 934 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[rsi|d]" v89|d -1 [906, 930[906 MustHaveRegister 908 MustHaveRegister 930 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rcx|d]" v90|d -1 [908, 912[908 MustHaveRegister 912 MustHaveRegister  "NoSpillStore"
  v91|d DWORD "[r8|d]" v91|d -1 [910, 932[910 MustHaveRegister 912 ShouldHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v92|q QWORD "[rsi|q]" v92|q v89|d [930, 932[930 MustHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[rbx|d]" v93|d -1 [146, 150[146 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[rax|d]" v94|d -1 [148, 220[148 MustHaveRegister 150 ShouldHaveRegister 218 MustHaveRegister 220 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[rbx|d]" v95|d -1 [214, 230[214 MustHaveRegister 216 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[rbp|d]" v96|d -1 [216, 224[216 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v97|d DWORD "[r13|d]" v97|d -1 [218, 245[218 MustHaveRegister  "OneSpillStore"
  v98|q QWORD "[rbp|q]" v98|q v96|d [224, 226[224 MustHaveRegister 226 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[rsi|q]" v99|q -1 [222, 225[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v100|q QWORD "[rax|q]" v100|q -1 [226, 242[226 MustHaveRegister 228 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v101|q QWORD "[rbp|q]" v101|q -1 [228, 244[228 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v102|q QWORD "[rbx|q]" v102|q v95|d [230, 234[230 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v103|q QWORD "[r14|q]" v103|q v9|d [232, 245[232 MustHaveRegister  "OneSpillStore"
  v104|d DWORD "[rax|d]" v104|d rax|d [248, 278[[1196, 1217[248 MustHaveRegister 278 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[rsi|d]" v105|d -1 [250, 274[250 MustHaveRegister 252 MustHaveRegister 274 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[rcx|d]" v106|d -1 [252, 256[252 MustHaveRegister 256 MustHaveRegister  "NoSpillStore"
  v107|d DWORD "[r8|d]" v107|d -1 [254, 276[254 MustHaveRegister 256 ShouldHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v108|q QWORD "[rsi|q]" v108|q v105|d [274, 276[274 MustHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v109|d DWORD "[r11|d]" v109|d v6|d [290, 293[290 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[r10|d]" v110|d -1 [1534, 1550[1550 MustHaveRegister  "NoSpillStore"
  v111|q QWORD "[r11|q]" v111|q -1 [1534, 1552[1552 MustHaveRegister  "NoSpillStore"
  v112|q QWORD "[rbx|q]" v1|q v1|q [235, 241[236 ShouldHaveRegister  "StoreAtDefinition"
  v113|d DWORD "[r10|d]" v2|d v2|d [237, 239[238 ShouldHaveRegister  "StoreAtDefinition"
  v114|q QWORD "[r10|q]" v3|q v3|q [239, 245[240 ShouldHaveRegister  "StoreAtDefinition"
  v115|d DWORD "[vstack:0|d]" v4|d v4|d [152, 245[ "StoreAtDefinition"
  v116|q QWORD "[vstack:8|q]" v5|q v5|q [60, 152[ "StoreAtDefinition"
  v117|d DWORD "[vstack:5|d]" v6|d v6|d [152, 245[ "OneSpillStore"
  v118|q QWORD "[vstack:8|q]" v5|q v5|q [152, 245[ "StoreAtDefinition"
  v119|d DWORD "[vstack:3|d]" v9|d v9|d [245, 253[ "OneSpillStore"
  v120|d DWORD "[vstack:5|d]" v6|d v6|d [245, 290[[294, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1534[290 ShouldHaveRegister  "OneSpillStore"
  v121|d DWORD "[vstack:0|d]" v4|d v4|d [245, 294[293 LiveAtLoopEnd  "StoreAtDefinition"
  v122|q QWORD "[vstack:8|q]" v5|q v5|q [245, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1534[ "StoreAtDefinition"
  v123|d DWORD "[vstack:4|d]" v97|d v97|d [245, 258[ "OneSpillStore"
  v124|q QWORD "[vstack:7|q]" v103|q v103|q [245, 258[ "OneSpillStore"
  v125|q QWORD "[vstack:2|q]" v1|q v1|q [241, 249[ "StoreAtDefinition"
  v126|d DWORD "[vstack:1|d]" v2|d v2|d [245, 422[293 LiveAtLoopEnd  "StoreAtDefinition"
  v127|q QWORD "[vstack:6|q]" v3|q v3|q [245, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[293 LiveAtLoopEnd 510 ShouldHaveRegister 730 ShouldHaveRegister 783 LiveAtLoopEnd 896 ShouldHaveRegister 1018 ShouldHaveRegister 1122 ShouldHaveRegister  "StoreAtDefinition"
  v128|d DWORD "[vstack:1|d]" v2|d v2|d [239, 245[ "StoreAtDefinition"
  v129|q QWORD "[rdx|q]" v1|q v1|q [249, 505[250 MustHaveRegister 293 LiveAtLoopEnd  "StoreAtDefinition"
  v130|d DWORD "[rdi|d]" v9|d v9|d [253, 254[254 MustHaveRegister  "OneSpillStore"
  v131|d DWORD "[r13|d]" v97|d v97|d [258, 276[[1196, 1217[276 MustHaveRegister  "OneSpillStore"
  v132|d DWORD "[rbx|d]" v6|d v6|d [1534, 1555[ "OneSpillStore"
  v133|q QWORD "[r9|q]" v3|q v3|q [1534, 1555[ "StoreAtDefinition"
  v134|d DWORD "[rcx|d]" v2|d v2|d [422, 507[490 MustHaveRegister  "StoreAtDefinition"
  v135|d DWORD "[r10|d]" v4|d v4|d [294, 332[332 MustHaveRegister  "StoreAtDefinition"
  v136|q QWORD "[r14|q]" v103|q v103|q [1196, 1217[ "OneSpillStore"
  v137|q QWORD "[r8|q]" v5|q v5|q [1534, 1555[ "StoreAtDefinition"
  v138|q QWORD "[r14|q]" v1|q v1|q [505, 515[506 ShouldHaveRegister  "StoreAtDefinition"
  v139|d DWORD "[vstack:13|d]" v13|d v13|d [422, 515[ "StoreAtDefinition"
  v140|q QWORD "[vstack:15|q]" v17|q v17|q [422, 515[ "OneSpillStore"
  v141|d DWORD "[vstack:11|d]" v19|d v19|d [515, 523[ "OneSpillStore"
  v142|d DWORD "[rbx|d]" v2|d v2|d [507, 511[508 ShouldHaveRegister  "StoreAtDefinition"
  v143|d DWORD "[vstack:13|d]" v13|d v13|d [515, 560[ "StoreAtDefinition"
  v144|q QWORD "[vstack:15|q]" v17|q v17|q [515, 784[[794, 936[[946, 1030[[1050, 1134[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[ "OneSpillStore"
  v145|d DWORD "[vstack:12|d]" v33|d v33|d [515, 528[ "OneSpillStore"
  v146|q QWORD "[vstack:14|q]" v39|q v39|q [515, 528[ "OneSpillStore"
  v147|q QWORD "[vstack:2|q]" v1|q v1|q [515, 519[ "StoreAtDefinition"
  v148|d DWORD "[vstack:1|d]" v2|d v2|d [511, 560[ "StoreAtDefinition"
  v149|d DWORD "[rcx|d]" v2|d v2|d [560, 727[710 MustHaveRegister  "StoreAtDefinition"
  v150|q QWORD "[rdx|q]" v1|q v1|q [519, 725[520 MustHaveRegister  "StoreAtDefinition"
  v151|d DWORD "[r9|d]" v19|d v19|d [523, 524[524 MustHaveRegister  "OneSpillStore"
  v152|d DWORD "[rdi|d]" v33|d v33|d [528, 546[[1218, 1239[546 MustHaveRegister  "OneSpillStore"
  v153|d DWORD "[r10|d]" v13|d v13|d [560, 642[572 MustHaveRegister 586 MustHaveRegister  "StoreAtDefinition"
  v154|q QWORD "[r13|q]" v39|q v39|q [1218, 1239[ "OneSpillStore"
  v155|q QWORD "[r10|q]" v17|q v17|q [1492, 1513[ "OneSpillStore"
  v156|q QWORD "[r13|q]" v1|q v1|q [725, 735[726 ShouldHaveRegister  "StoreAtDefinition"
  v157|d DWORD "[vstack:13|d]" v13|d v13|d [642, 735[ "StoreAtDefinition"
  v158|d DWORD "[vstack:18|d]" v45|d v45|d [642, 735[ "OneSpillStore"
  v159|d DWORD "[r14|d]" v2|d v2|d [727, 735[728 ShouldHaveRegister  "StoreAtDefinition"
  v160|d DWORD "[vstack:16|d]" v49|d v49|d [735, 743[ "OneSpillStore"
  v161|d DWORD "[vstack:18|d]" v45|d v45|d [735, 780[[1050, 1134[[1240, 1261[[1262, 1283[[1306, 1326[[1348, 1368[780 ShouldHaveRegister  "OneSpillStore"
  v162|d DWORD "[vstack:13|d]" v13|d v13|d [735, 784[783 LiveAtLoopEnd  "StoreAtDefinition"
  v163|d DWORD "[vstack:17|d]" v63|d v63|d [735, 748[ "OneSpillStore"
  v164|q QWORD "[vstack:19|q]" v69|q v69|q [735, 748[ "OneSpillStore"
  v165|q QWORD "[vstack:2|q]" v1|q v1|q [735, 739[ "StoreAtDefinition"
  v166|d DWORD "[vstack:1|d]" v2|d v2|d [735, 784[[794, 814[783 LiveAtLoopEnd  "StoreAtDefinition"
  v167|q QWORD "[rdx|q]" v1|q v1|q [739, 784[[794, 891[740 MustHaveRegister 783 LiveAtLoopEnd  "StoreAtDefinition"
  v168|d DWORD "[r9|d]" v49|d v49|d [743, 744[744 MustHaveRegister  "OneSpillStore"
  v169|d DWORD "[rdi|d]" v63|d v63|d [748, 766[[1240, 1261[766 MustHaveRegister  "OneSpillStore"
  v170|d DWORD "[r8|d]" v45|d v45|d [1368, 1389[ "OneSpillStore"
  v171|d DWORD "[rcx|d]" v2|d v2|d [814, 893[878 MustHaveRegister  "StoreAtDefinition"
  v172|d DWORD "[r10|d]" v13|d v13|d [794, 901[810 MustHaveRegister 872 MustHaveRegister  "StoreAtDefinition"
  v173|q QWORD "[rbp|q]" v69|q v69|q [1240, 1261[ "OneSpillStore"
  v174|q QWORD "[rdi|q]" v1|q v1|q [891, 901[892 ShouldHaveRegister  "StoreAtDefinition"
  v175|d DWORD "[vstack:13|d]" v13|d v13|d [901, 909[ "StoreAtDefinition"
  v176|d DWORD "[rbp|d]" v2|d v2|d [893, 901[894 ShouldHaveRegister  "StoreAtDefinition"
  v177|d DWORD "[vstack:20|d]" v82|d v82|d [901, 914[ "OneSpillStore"
  v178|q QWORD "[vstack:2|q]" v1|q v1|q [901, 905[ "StoreAtDefinition"
  v179|d DWORD "[vstack:1|d]" v2|d v2|d [901, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[1016 ShouldHaveRegister 1120 ShouldHaveRegister  "StoreAtDefinition"
  v180|q QWORD "[rdx|q]" v1|q v1|q [905, 936[[946, 1013[906 MustHaveRegister  "StoreAtDefinition"
  v181|d DWORD "[r10|d]" v13|d v13|d [909, 910[[946, 996[[1050, 1100[910 MustHaveRegister 996 MustHaveRegister 1100 MustHaveRegister  "StoreAtDefinition"
  v182|d DWORD "[r11|d]" v82|d v82|d [914, 936[[1326, 1347[[1492, 1513[932 MustHaveRegister  "OneSpillStore"
  v183|d DWORD "[rcx|d]" v2|d v2|d [1534, 1555[ "StoreAtDefinition"
  v184|q QWORD "[r10|q]" v1|q v1|q [1013, 1023[1014 ShouldHaveRegister  "StoreAtDefinition"
  v185|q QWORD "[vstack:2|q]" v1|q v1|q [1023, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[1118 ShouldHaveRegister  "StoreAtDefinition"
  v186|q QWORD "[rdx|q]" v1|q v1|q [1534, 1555[ "StoreAtDefinition"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [int[0|0x0]] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v112|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v128|DWORD = MOVE input: v113|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v125|QWORD[.] = MOVE input: v112|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v122|QWORD[.] = STACKMOVE (input: v118|QWORD[.], ~backupSlot: vstack:9|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v124|QWORD[.] = MOVE input: v103|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v121|DWORD[_] = STACKMOVE (input: v115|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = STACKMOVE (input: v128|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v114|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = STACKMOVE (input: v117|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE input: v97|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD[_] = MOVE input: v9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr  248  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v125|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  250  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v130|DWORD[_] = MOVE input: v119|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  254  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [v109|DWORD] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v138|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v142|DWORD = MOVE input: v134|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v148|DWORD = MOVE input: v142|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = STACKMOVE (input: v140|QWORD[.], ~backupSlot: vstack:9|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|QWORD[.] = MOVE input: v39|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v143|DWORD[_] = STACKMOVE (input: v139|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v141|DWORD[_] = MOVE input: v19|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v147|QWORD[.] = MOVE input: v138|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  518  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v150|QWORD[.] = MOVE input: v147|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  520  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v151|DWORD[_] = MOVE input: v141|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  524  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v44|QWORD[.]] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v159|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  732  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v164|QWORD[.] = MOVE input: v69|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v162|DWORD[_] = STACKMOVE (input: v157|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v166|DWORD = MOVE input: v159|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = STACKMOVE (input: v158|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v63|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD[_] = MOVE input: v49|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v165|QWORD[.] = MOVE input: v156|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  738  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v167|QWORD[.] = MOVE input: v165|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  740  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v168|DWORD[_] = MOVE input: v160|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  744  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [v75|DWORD, v74|QWORD[.]] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v174|QWORD[.] = MOVE input: v167|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v171|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v176|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v177|DWORD = MOVE input: v82|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v175|DWORD[_] = MOVE input: v172|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v178|QWORD[.] = MOVE input: v174|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr  904  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v178|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  906  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v175|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  910  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1012  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v184|QWORD[.] = MOVE input: v180|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1020  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr 1022  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v184|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1026  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1116  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1124  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr 1126  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1130  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [int[-117787|0xfffffffffffe33e5], long[0|0x0]] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [int[-113203|0xfffffffffffe45cd], long[1940|0x794]] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [int[-227347|0xfffffffffffc87ed], long[660|0x294]] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5], long[0|0x0]] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5], long[0|0x0]] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [int[-86579|0xfffffffffffeadcd], long[1940|0x794]] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [int[-150299|0xfffffffffffdb4e5], long[0|0x0]] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [int[-132635|0xfffffffffffdf9e5], long[0|0x0]] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [int[-160539|0xfffffffffffd8ce5], long[0|0x0]] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [int[-225299|0xfffffffffffc8fed], long[660|0x294]] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [int[-224275|0xfffffffffffc93ed], long[660|0x294]] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [int[-144435|0xfffffffffffdcbcd], long[1940|0x794]] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [int[-71195|0xfffffffffffee9e5], long[0|0x0]] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [int[-21555|0xffffffffffffabcd], long[4500|0x1194]] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v101|q [0, 1[[244, 248[[514, 518[[734, 738[[900, 904[[1022, 1026[[1126, 1130[[1192, 1194[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 34[[238, 247[[508, 517[[728, 737[[894, 903[[1016, 1025[[1120, 1129[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 32[[236, 247[[506, 517[[726, 737[[892, 903[[1014, 1025[[1118, 1129[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v100|q [0, 1[[242, 247[[512, 517[[732, 737[[898, 903[[1020, 1025[[1124, 1129[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 26[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v102|q [0, 30[[234, 247[[504, 517[[724, 737[[890, 903[[1012, 1025[[1116, 1129[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 36[[240, 247[[510, 517[[730, 737[[896, 903[[1018, 1025[[1122, 1129[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[246, 247[[516, 517[[736, 737[[902, 903[[1024, 1025[[1128, 1129[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [30, 44[[1400, 1421[30 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [32, 235[32 MustHaveRegister 38 MustHaveRegister 114 MustHaveRegister  "StoreAtDefinition"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [34, 237[34 MustHaveRegister 220 MustHaveRegister  "StoreAtDefinition"
  v3|q QWORD "[r8|q]" v3|q r8|- [36, 239[36 MustHaveRegister  "StoreAtDefinition"
  v4|d DWORD "[r10|d]" v4|d -1 [40, 152[40 MustHaveRegister 42 MustHaveRegister 56 MustHaveRegister 72 MustHaveRegister 86 MustHaveRegister  "StoreAtDefinition"
  v5|q QWORD "[r11|q]" v5|q v4|d [56, 60[56 MustHaveRegister  "StoreAtDefinition"
  v6|d DWORD "[r11|d]" v6|d v109|d [60, 152[74 MustHaveRegister 86 MustHaveRegister 112 MustHaveRegister  "OneSpillStore"
  v7|d DWORD "[rsi|d]" v7|d -1 [72, 110[72 MustHaveRegister 74 MustHaveRegister 110 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[rsi|q]" v8|q v7|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [112, 245[112 MustHaveRegister 118 MustHaveRegister 130 MustHaveRegister 148 MustHaveRegister 214 MustHaveRegister 232 MustHaveRegister  "OneSpillStore"
  v10|d DWORD "[rbx|d]" v10|d -1 [114, 146[[294, 416[[794, 808[114 MustHaveRegister 116 MustHaveRegister 146 MustHaveRegister 416 MustHaveRegister 808 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rsi|q]" v11|q v10|d [116, 220[[294, 490[[794, 878[116 MustHaveRegister 218 MustHaveRegister 220 MustHaveRegister 488 MustHaveRegister 490 MustHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rcx|d]" v12|d -1 [332, 334[332 MustHaveRegister 334 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[r10|d]" v13|d -1 [334, 422[334 MustHaveRegister 336 MustHaveRegister 342 MustHaveRegister 358 MustHaveRegister 372 MustHaveRegister  "StoreAtDefinition"
  v14|d DWORD "[rcx|d]" v14|d -1 [336, 340[336 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rcx|q]" v15|q v14|d [340, 345[340 MustHaveRegister 344 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[r8|q]" v16|q -1 [338, 341[338 MustHaveRegister 340 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[r11|q]" v17|q v13|d [342, 422[342 MustHaveRegister  "OneSpillStore"
  v18|d DWORD "[rcx|d]" v18|d -1 [358, 386[358 MustHaveRegister 360 MustHaveRegister 386 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d -1 [386, 515[386 MustHaveRegister 388 MustHaveRegister 400 MustHaveRegister 418 MustHaveRegister 484 MustHaveRegister 502 MustHaveRegister  "OneSpillStore"
  v20|d DWORD "[rsi|d]" v20|d -1 [996, 998[996 MustHaveRegister 998 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[rsi|d]" v21|d -1 [998, 1010[998 MustHaveRegister 1000 MustHaveRegister 1010 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[rcx|d]" v22|d -1 [1000, 1004[1000 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rcx|q]" v23|q v22|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[r8|q]" v24|q -1 [1002, 1005[1002 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rbx|q]" v25|q -1 [1006, 1020[1006 MustHaveRegister 1008 MustHaveRegister 1020 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rax|q]" v26|q -1 [1008, 1022[1008 MustHaveRegister 1022 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[rsi|q]" v27|q v21|d [1010, 1012[1010 MustHaveRegister 1012 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[rax|d]" v28|d rax|d [1026, 1028[1026 MustHaveRegister 1028 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[rcx|d]" v29|d -1 [416, 420[416 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d -1 [418, 490[418 MustHaveRegister 420 ShouldHaveRegister 488 MustHaveRegister 490 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rbx|d]" v31|d -1 [484, 500[484 MustHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[rax|d]" v32|d -1 [486, 494[486 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[rdi|d]" v33|d -1 [488, 515[488 MustHaveRegister  "OneSpillStore"
  v34|q QWORD "[rax|q]" v34|q v32|d [494, 496[494 MustHaveRegister 496 MustHaveRegister  "NoSpillStore"
  v35|q QWORD "[rsi|q]" v35|q -1 [492, 495[492 MustHaveRegister 494 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rax|q]" v36|q -1 [496, 512[496 MustHaveRegister 498 MustHaveRegister 512 ShouldHaveRegister  "NoSpillStore"
  v37|q QWORD "[rbp|q]" v37|q -1 [498, 514[498 MustHaveRegister 514 ShouldHaveRegister  "NoSpillStore"
  v38|q QWORD "[rbx|q]" v38|q v31|d [500, 504[500 MustHaveRegister 504 ShouldHaveRegister  "NoSpillStore"
  v39|q QWORD "[r13|q]" v39|q v19|d [502, 515[502 MustHaveRegister  "OneSpillStore"
  v40|d DWORD "[rax|d]" v40|d rax|d [518, 548[[1218, 1239[518 MustHaveRegister 548 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rsi|d]" v41|d -1 [520, 544[520 MustHaveRegister 522 MustHaveRegister 544 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rcx|d]" v42|d -1 [522, 526[522 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[r8|d]" v43|d -1 [524, 546[524 MustHaveRegister 526 ShouldHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v44|q QWORD "[rsi|q]" v44|q v41|d [544, 559[544 MustHaveRegister 546 MustHaveRegister 558 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r11|d]" v45|d v75|d [560, 642[574 MustHaveRegister 586 MustHaveRegister 606 MustHaveRegister  "OneSpillStore"
  v46|q QWORD "[rsi|q]" v46|q v44|q [560, 710[636 MustHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[r8|d]" v47|d -1 [572, 604[572 MustHaveRegister 574 MustHaveRegister 604 MustHaveRegister  "NoSpillStore"
  v48|q QWORD "[r8|q]" v48|q v47|d [604, 606[604 MustHaveRegister 606 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[r9|d]" v49|d -1 [606, 735[606 MustHaveRegister 608 MustHaveRegister 620 MustHaveRegister 638 MustHaveRegister 704 MustHaveRegister 722 MustHaveRegister  "OneSpillStore"
  v50|d DWORD "[rsi|d]" v50|d -1 [1100, 1102[1100 MustHaveRegister 1102 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rsi|d]" v51|d -1 [1102, 1114[1102 MustHaveRegister 1104 MustHaveRegister 1114 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[rdx|d]" v52|d -1 [1104, 1108[1104 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[rdx|q]" v53|q v52|d [1108, 1110[1108 MustHaveRegister 1110 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rcx|q]" v54|q -1 [1106, 1109[1106 MustHaveRegister 1108 MustHaveRegister  "NoSpillStore"
  v55|q QWORD "[rbx|q]" v55|q -1 [1110, 1124[1110 MustHaveRegister 1112 MustHaveRegister 1124 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rax|q]" v56|q -1 [1112, 1126[1112 MustHaveRegister 1126 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[rsi|q]" v57|q v51|d [1114, 1116[1114 MustHaveRegister 1116 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [1130, 1132[1130 MustHaveRegister 1132 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[r8|d]" v59|d -1 [636, 640[636 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rbx|d]" v60|d -1 [638, 710[638 MustHaveRegister 640 ShouldHaveRegister 708 MustHaveRegister 710 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [704, 720[704 MustHaveRegister 706 MustHaveRegister 720 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[rax|d]" v62|d -1 [706, 714[706 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[rdi|d]" v63|d -1 [708, 735[708 MustHaveRegister  "OneSpillStore"
  v64|q QWORD "[rax|q]" v64|q v62|d [714, 716[714 MustHaveRegister 716 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[rsi|q]" v65|q -1 [712, 715[712 MustHaveRegister 714 MustHaveRegister  "NoSpillStore"
  v66|q QWORD "[rbx|q]" v66|q -1 [716, 732[716 MustHaveRegister 718 MustHaveRegister 732 ShouldHaveRegister  "NoSpillStore"
  v67|q QWORD "[rax|q]" v67|q -1 [718, 734[718 MustHaveRegister 734 ShouldHaveRegister  "NoSpillStore"
  v68|q QWORD "[r8|q]" v68|q v61|d [720, 724[720 MustHaveRegister 724 ShouldHaveRegister  "NoSpillStore"
  v69|q QWORD "[rbp|q]" v69|q v49|d [722, 735[722 MustHaveRegister  "OneSpillStore"
  v70|d DWORD "[rax|d]" v70|d rax|d [738, 768[[1240, 1261[738 MustHaveRegister 768 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[rsi|d]" v71|d -1 [740, 764[740 MustHaveRegister 742 MustHaveRegister 764 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[rcx|d]" v72|d -1 [742, 746[742 MustHaveRegister 746 MustHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d -1 [744, 766[744 MustHaveRegister 746 ShouldHaveRegister 766 MustHaveRegister  "NoSpillStore"
  v74|q QWORD "[rsi|q]" v74|q v71|d [764, 783[764 MustHaveRegister 766 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[r11|d]" v75|d v45|d [780, 783[780 MustHaveRegister 782 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d -1 [1368, 1384[1384 MustHaveRegister  "NoSpillStore"
  v77|q QWORD "[r11|q]" v77|q -1 [1368, 1386[1386 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[rcx|d]" v78|d -1 [808, 812[808 MustHaveRegister 812 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d -1 [810, 878[810 MustHaveRegister 812 ShouldHaveRegister 876 MustHaveRegister 878 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[rbx|d]" v80|d -1 [872, 888[872 MustHaveRegister 874 MustHaveRegister 888 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d -1 [874, 882[874 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r11|d]" v82|d -1 [876, 901[876 MustHaveRegister  "OneSpillStore"
  v83|q QWORD "[rax|q]" v83|q v81|d [882, 884[882 MustHaveRegister 884 MustHaveRegister  "NoSpillStore"
  v84|q QWORD "[rsi|q]" v84|q -1 [880, 883[880 MustHaveRegister 882 MustHaveRegister  "NoSpillStore"
  v85|q QWORD "[rax|q]" v85|q -1 [884, 898[884 MustHaveRegister 886 MustHaveRegister 898 ShouldHaveRegister  "NoSpillStore"
  v86|q QWORD "[r9|q]" v86|q -1 [886, 900[886 MustHaveRegister 900 ShouldHaveRegister  "NoSpillStore"
  v87|q QWORD "[rbx|q]" v87|q v80|d [888, 890[888 MustHaveRegister 890 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[rax|d]" v88|d rax|d [904, 934[[1492, 1513[904 MustHaveRegister 934 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[rsi|d]" v89|d -1 [906, 930[906 MustHaveRegister 908 MustHaveRegister 930 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rcx|d]" v90|d -1 [908, 912[908 MustHaveRegister 912 MustHaveRegister  "NoSpillStore"
  v91|d DWORD "[r8|d]" v91|d -1 [910, 932[910 MustHaveRegister 912 ShouldHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v92|q QWORD "[rsi|q]" v92|q v89|d [930, 932[930 MustHaveRegister 932 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[rbx|d]" v93|d -1 [146, 150[146 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[rax|d]" v94|d -1 [148, 220[148 MustHaveRegister 150 ShouldHaveRegister 218 MustHaveRegister 220 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[rbx|d]" v95|d -1 [214, 230[214 MustHaveRegister 216 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[rbp|d]" v96|d -1 [216, 224[216 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v97|d DWORD "[r13|d]" v97|d -1 [218, 245[218 MustHaveRegister  "OneSpillStore"
  v98|q QWORD "[rbp|q]" v98|q v96|d [224, 226[224 MustHaveRegister 226 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[rsi|q]" v99|q -1 [222, 225[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v100|q QWORD "[rax|q]" v100|q -1 [226, 242[226 MustHaveRegister 228 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v101|q QWORD "[rbp|q]" v101|q -1 [228, 244[228 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v102|q QWORD "[rbx|q]" v102|q v95|d [230, 234[230 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v103|q QWORD "[r14|q]" v103|q v9|d [232, 245[232 MustHaveRegister  "OneSpillStore"
  v104|d DWORD "[rax|d]" v104|d rax|d [248, 278[[1196, 1217[248 MustHaveRegister 278 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[rsi|d]" v105|d -1 [250, 274[250 MustHaveRegister 252 MustHaveRegister 274 MustHaveRegister  "NoSpillStore"
  v106|d DWORD "[rcx|d]" v106|d -1 [252, 256[252 MustHaveRegister 256 MustHaveRegister  "NoSpillStore"
  v107|d DWORD "[r8|d]" v107|d -1 [254, 276[254 MustHaveRegister 256 ShouldHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v108|q QWORD "[rsi|q]" v108|q v105|d [274, 276[274 MustHaveRegister 276 MustHaveRegister  "NoSpillStore"
  v109|d DWORD "[r11|d]" v109|d v6|d [290, 293[290 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[r10|d]" v110|d -1 [1534, 1550[1550 MustHaveRegister  "NoSpillStore"
  v111|q QWORD "[r11|q]" v111|q -1 [1534, 1552[1552 MustHaveRegister  "NoSpillStore"
  v112|q QWORD "[rbx|q]" v1|q v1|q [235, 241[236 ShouldHaveRegister  "StoreAtDefinition"
  v113|d DWORD "[r10|d]" v2|d v2|d [237, 239[238 ShouldHaveRegister  "StoreAtDefinition"
  v114|q QWORD "[r10|q]" v3|q v3|q [239, 245[240 ShouldHaveRegister  "StoreAtDefinition"
  v115|d DWORD "[vstack:0|d]" v4|d v4|d [152, 245[ "StoreAtDefinition"
  v116|q QWORD "[vstack:8|q]" v5|q v5|q [60, 152[ "StoreAtDefinition"
  v117|d DWORD "[vstack:5|d]" v6|d v6|d [152, 245[ "OneSpillStore"
  v118|q QWORD "[vstack:8|q]" v5|q v5|q [152, 245[ "StoreAtDefinition"
  v119|d DWORD "[vstack:3|d]" v9|d v9|d [245, 253[ "OneSpillStore"
  v120|d DWORD "[vstack:5|d]" v6|d v6|d [245, 290[[294, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1534[290 ShouldHaveRegister  "OneSpillStore"
  v121|d DWORD "[vstack:0|d]" v4|d v4|d [245, 294[293 LiveAtLoopEnd  "StoreAtDefinition"
  v122|q QWORD "[vstack:8|q]" v5|q v5|q [245, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1400[[1422, 1513[[1514, 1534[ "StoreAtDefinition"
  v123|d DWORD "[vstack:4|d]" v97|d v97|d [245, 258[ "OneSpillStore"
  v124|q QWORD "[vstack:7|q]" v103|q v103|q [245, 258[ "OneSpillStore"
  v125|q QWORD "[vstack:2|q]" v1|q v1|q [241, 249[ "StoreAtDefinition"
  v126|d DWORD "[vstack:1|d]" v2|d v2|d [245, 422[293 LiveAtLoopEnd  "StoreAtDefinition"
  v127|q QWORD "[vstack:6|q]" v3|q v3|q [245, 784[[794, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[293 LiveAtLoopEnd 510 ShouldHaveRegister 730 ShouldHaveRegister 783 LiveAtLoopEnd 896 ShouldHaveRegister 1018 ShouldHaveRegister 1122 ShouldHaveRegister  "StoreAtDefinition"
  v128|d DWORD "[vstack:1|d]" v2|d v2|d [239, 245[ "StoreAtDefinition"
  v129|q QWORD "[rdx|q]" v1|q v1|q [249, 505[250 MustHaveRegister 293 LiveAtLoopEnd  "StoreAtDefinition"
  v130|d DWORD "[rdi|d]" v9|d v9|d [253, 254[254 MustHaveRegister  "OneSpillStore"
  v131|d DWORD "[r13|d]" v97|d v97|d [258, 276[[1196, 1217[276 MustHaveRegister  "OneSpillStore"
  v132|d DWORD "[rbx|d]" v6|d v6|d [1534, 1555[ "OneSpillStore"
  v133|q QWORD "[r9|q]" v3|q v3|q [1534, 1555[ "StoreAtDefinition"
  v134|d DWORD "[rcx|d]" v2|d v2|d [422, 507[490 MustHaveRegister  "StoreAtDefinition"
  v135|d DWORD "[r10|d]" v4|d v4|d [294, 332[332 MustHaveRegister  "StoreAtDefinition"
  v136|q QWORD "[r14|q]" v103|q v103|q [1196, 1217[ "OneSpillStore"
  v137|q QWORD "[r8|q]" v5|q v5|q [1534, 1555[ "StoreAtDefinition"
  v138|q QWORD "[r14|q]" v1|q v1|q [505, 515[506 ShouldHaveRegister  "StoreAtDefinition"
  v139|d DWORD "[vstack:13|d]" v13|d v13|d [422, 515[ "StoreAtDefinition"
  v140|q QWORD "[vstack:15|q]" v17|q v17|q [422, 515[ "OneSpillStore"
  v141|d DWORD "[vstack:11|d]" v19|d v19|d [515, 523[ "OneSpillStore"
  v142|d DWORD "[rbx|d]" v2|d v2|d [507, 511[508 ShouldHaveRegister  "StoreAtDefinition"
  v143|d DWORD "[vstack:13|d]" v13|d v13|d [515, 560[ "StoreAtDefinition"
  v144|q QWORD "[vstack:15|q]" v17|q v17|q [515, 784[[794, 936[[946, 1030[[1050, 1134[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[ "OneSpillStore"
  v145|d DWORD "[vstack:12|d]" v33|d v33|d [515, 528[ "OneSpillStore"
  v146|q QWORD "[vstack:14|q]" v39|q v39|q [515, 528[ "OneSpillStore"
  v147|q QWORD "[vstack:2|q]" v1|q v1|q [515, 519[ "StoreAtDefinition"
  v148|d DWORD "[vstack:1|d]" v2|d v2|d [511, 560[ "StoreAtDefinition"
  v149|d DWORD "[rcx|d]" v2|d v2|d [560, 727[710 MustHaveRegister  "StoreAtDefinition"
  v150|q QWORD "[rdx|q]" v1|q v1|q [519, 725[520 MustHaveRegister  "StoreAtDefinition"
  v151|d DWORD "[r9|d]" v19|d v19|d [523, 524[524 MustHaveRegister  "OneSpillStore"
  v152|d DWORD "[rdi|d]" v33|d v33|d [528, 546[[1218, 1239[546 MustHaveRegister  "OneSpillStore"
  v153|d DWORD "[r10|d]" v13|d v13|d [560, 642[572 MustHaveRegister 586 MustHaveRegister  "StoreAtDefinition"
  v154|q QWORD "[r13|q]" v39|q v39|q [1218, 1239[ "OneSpillStore"
  v155|q QWORD "[r10|q]" v17|q v17|q [1492, 1513[ "OneSpillStore"
  v156|q QWORD "[r13|q]" v1|q v1|q [725, 735[726 ShouldHaveRegister  "StoreAtDefinition"
  v157|d DWORD "[vstack:13|d]" v13|d v13|d [642, 735[ "StoreAtDefinition"
  v158|d DWORD "[vstack:18|d]" v45|d v45|d [642, 735[ "OneSpillStore"
  v159|d DWORD "[r14|d]" v2|d v2|d [727, 735[728 ShouldHaveRegister  "StoreAtDefinition"
  v160|d DWORD "[vstack:16|d]" v49|d v49|d [735, 743[ "OneSpillStore"
  v161|d DWORD "[vstack:18|d]" v45|d v45|d [735, 780[[1050, 1134[[1240, 1261[[1262, 1283[[1306, 1326[[1348, 1368[780 ShouldHaveRegister  "OneSpillStore"
  v162|d DWORD "[vstack:13|d]" v13|d v13|d [735, 784[783 LiveAtLoopEnd  "StoreAtDefinition"
  v163|d DWORD "[vstack:17|d]" v63|d v63|d [735, 748[ "OneSpillStore"
  v164|q QWORD "[vstack:19|q]" v69|q v69|q [735, 748[ "OneSpillStore"
  v165|q QWORD "[vstack:2|q]" v1|q v1|q [735, 739[ "StoreAtDefinition"
  v166|d DWORD "[vstack:1|d]" v2|d v2|d [735, 784[[794, 814[783 LiveAtLoopEnd  "StoreAtDefinition"
  v167|q QWORD "[rdx|q]" v1|q v1|q [739, 784[[794, 891[740 MustHaveRegister 783 LiveAtLoopEnd  "StoreAtDefinition"
  v168|d DWORD "[r9|d]" v49|d v49|d [743, 744[744 MustHaveRegister  "OneSpillStore"
  v169|d DWORD "[rdi|d]" v63|d v63|d [748, 766[[1240, 1261[766 MustHaveRegister  "OneSpillStore"
  v170|d DWORD "[r8|d]" v45|d v45|d [1368, 1389[ "OneSpillStore"
  v171|d DWORD "[rcx|d]" v2|d v2|d [814, 893[878 MustHaveRegister  "StoreAtDefinition"
  v172|d DWORD "[r10|d]" v13|d v13|d [794, 901[810 MustHaveRegister 872 MustHaveRegister  "StoreAtDefinition"
  v173|q QWORD "[rbp|q]" v69|q v69|q [1240, 1261[ "OneSpillStore"
  v174|q QWORD "[rdi|q]" v1|q v1|q [891, 901[892 ShouldHaveRegister  "StoreAtDefinition"
  v175|d DWORD "[vstack:13|d]" v13|d v13|d [901, 909[ "StoreAtDefinition"
  v176|d DWORD "[rbp|d]" v2|d v2|d [893, 901[894 ShouldHaveRegister  "StoreAtDefinition"
  v177|d DWORD "[vstack:20|d]" v82|d v82|d [901, 914[ "OneSpillStore"
  v178|q QWORD "[vstack:2|q]" v1|q v1|q [901, 905[ "StoreAtDefinition"
  v179|d DWORD "[vstack:1|d]" v2|d v2|d [901, 936[[946, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[1016 ShouldHaveRegister 1120 ShouldHaveRegister  "StoreAtDefinition"
  v180|q QWORD "[rdx|q]" v1|q v1|q [905, 936[[946, 1013[906 MustHaveRegister  "StoreAtDefinition"
  v181|d DWORD "[r10|d]" v13|d v13|d [909, 910[[946, 996[[1050, 1100[910 MustHaveRegister 996 MustHaveRegister 1100 MustHaveRegister  "StoreAtDefinition"
  v182|d DWORD "[r11|d]" v82|d v82|d [914, 936[[1326, 1347[[1492, 1513[932 MustHaveRegister  "OneSpillStore"
  v183|d DWORD "[rcx|d]" v2|d v2|d [1534, 1555[ "StoreAtDefinition"
  v184|q QWORD "[r10|q]" v1|q v1|q [1013, 1023[1014 ShouldHaveRegister  "StoreAtDefinition"
  v185|q QWORD "[vstack:2|q]" v1|q v1|q [1023, 1030[[1050, 1134[[1196, 1217[[1218, 1239[[1240, 1261[[1262, 1283[[1284, 1305[[1306, 1347[[1348, 1389[[1390, 1421[[1422, 1513[[1514, 1534[1118 ShouldHaveRegister  "StoreAtDefinition"
  v186|q QWORD "[rdx|q]" v1|q v1|q [1534, 1555[ "StoreAtDefinition"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [v6|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|DWORD[_] = MOVE input: v4|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v112|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v128|DWORD = MOVE input: v113|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v125|QWORD[.] = MOVE input: v112|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v122|QWORD[.] = STACKMOVE (input: v118|QWORD[.], ~backupSlot: vstack:9|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v124|QWORD[.] = MOVE input: v103|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v121|DWORD[_] = STACKMOVE (input: v115|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = STACKMOVE (input: v128|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v114|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = STACKMOVE (input: v117|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE input: v97|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD[_] = MOVE input: v9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr  248  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v125|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  250  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v130|DWORD[_] = MOVE input: v119|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  254  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = MOVE input: v123|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOVE input: v121|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: v126|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v17|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD[_] = MOVE input: v13|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|DWORD = MOVE input: v126|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v138|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v142|DWORD = MOVE input: v134|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v148|DWORD = MOVE input: v142|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = STACKMOVE (input: v140|QWORD[.], ~backupSlot: vstack:9|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|QWORD[.] = MOVE input: v39|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v143|DWORD[_] = STACKMOVE (input: v139|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v141|DWORD[_] = MOVE input: v19|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v147|QWORD[.] = MOVE input: v138|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  518  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v150|QWORD[.] = MOVE input: v147|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  520  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v151|DWORD[_] = MOVE input: v141|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  524  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v152|DWORD = MOVE input: v145|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v143|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v149|DWORD = MOVE input: v148|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [v45|DWORD, v46|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v158|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v157|DWORD[_] = MOVE input: v153|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v159|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  732  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v164|QWORD[.] = MOVE input: v69|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v162|DWORD[_] = STACKMOVE (input: v157|DWORD[_], ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v166|DWORD = MOVE input: v159|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = STACKMOVE (input: v158|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v63|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD[_] = MOVE input: v49|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v165|QWORD[.] = MOVE input: v156|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  738  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v167|QWORD[.] = MOVE input: v165|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  740  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v168|DWORD[_] = MOVE input: v160|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  744  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v169|DWORD = MOVE input: v163|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v162|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v149|DWORD = MOVE input: v166|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v17|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v171|DWORD = MOVE input: v166|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v174|QWORD[.] = MOVE input: v167|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v171|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v176|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v177|DWORD = MOVE input: v82|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v175|DWORD[_] = MOVE input: v172|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v178|QWORD[.] = MOVE input: v174|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr  904  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v178|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  906  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v175|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  910  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v177|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v17|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1012  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v184|QWORD[.] = MOVE input: v180|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1020  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr 1022  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v184|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1026  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1116  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1124  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr 1126  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1130  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v136|QWORD[.] = MOVE input: v124|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = MOVE input: v123|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|QWORD[.] = MOVE input: v146|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v152|DWORD = MOVE input: v145|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v173|QWORD[.] = MOVE input: v164|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v169|DWORD = MOVE input: v163|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v167|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v180|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [v76|DWORD, v77|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v167|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v177|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v155|QWORD[.] = MOVE input: v144|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v180|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v185|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [v110|DWORD, v111|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   34  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   36  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v1|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:0|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction v7|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v7|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v6|DWORD, y: [v4|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction v9|DWORD[_] = MOV input: [v8|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction v10|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction v11|QWORD[.] = UNCOMPRESSPOINTER (input: v10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: v9|DWORD[_], y: v9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [v9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v93|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction v94|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: v93|DWORD, y: v94|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction v95|DWORD[_] = MOV input: [v9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v96|DWORD = MOV input: [v95|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction v97|DWORD = MOV input: [v11|QWORD[.] + v94|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [v11|QWORD[.] + v94|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v99|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction v98|QWORD = UNCOMPRESSPOINTER (input: v96|DWORD, ~baseRegister: v99|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction v100|QWORD = MOV input: [v98|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction v101|QWORD = MOV input: [v100|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction v102|QWORD[.] = UNCOMPRESSPOINTER (input: v95|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction v103|QWORD[.] = UNCOMPRESSPOINTER (input: v9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: v102|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v112|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v113|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: v100|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: v101|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v124|QWORD[.] = MOVE input: v103|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = STACKMOVE (input: v117|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE input: v97|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD[_] = MOVE input: v9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr  248  <|@ instruction v104|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v125|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  250  <|@ instruction v105|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v106|DWORD = MOV input: [v105|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction v130|DWORD[_] = MOVE input: v119|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  254  <|@ instruction v107|DWORD = MOV input: [v9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: v106|DWORD, y: v107|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = MOVE input: v123|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction v108|QWORD[.] = UNCOMPRESSPOINTER (input: v105|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [v108|QWORD[.] + v107|DWORD * 4 + 16], y: v97|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: v104|DWORD, y: v104|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction v109|DWORD = INC value: v6|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOVE input: v121|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: v126|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction v12|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v13|DWORD[_] = MOV input: [v12|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction vstack:13|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v14|DWORD = MOV input: [v13|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction v16|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction v15|QWORD = UNCOMPRESSPOINTER (input: v14|DWORD, ~baseRegister: v16|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction v17|QWORD[.] = UNCOMPRESSPOINTER (input: v13|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v15|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction v18|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [v18|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [v13|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction v19|DWORD[_] = MOV input: [v18|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: v19|DWORD[_], y: v19|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [v19|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v29|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction v30|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: v29|DWORD, y: v30|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v17|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v134|DWORD = MOVE input: v126|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction v31|DWORD[_] = MOV input: [v19|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v32|DWORD = MOV input: [v31|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction v33|DWORD = MOV input: [v11|QWORD[.] + v30|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [v11|QWORD[.] + v30|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction v35|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction v34|QWORD = UNCOMPRESSPOINTER (input: v32|DWORD, ~baseRegister: v35|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction v36|QWORD = MOV input: [v34|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction v37|QWORD = MOV input: [v36|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction v38|QWORD[.] = UNCOMPRESSPOINTER (input: v31|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction v39|QWORD[.] = UNCOMPRESSPOINTER (input: v19|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: v38|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v138|QWORD[.] = MOVE input: v129|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v142|DWORD = MOVE input: v134|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: v36|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: v37|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = STACKMOVE (input: v140|QWORD[.], ~backupSlot: vstack:9|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|QWORD[.] = MOVE input: v39|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v141|DWORD[_] = MOVE input: v19|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  518  <|@ instruction v40|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v150|QWORD[.] = MOVE input: v147|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  520  <|@ instruction v41|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v42|DWORD = MOV input: [v41|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v151|DWORD[_] = MOVE input: v141|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  524  <|@ instruction v43|DWORD = MOV input: [v19|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: v42|DWORD, y: v43|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v152|DWORD = MOVE input: v145|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction v44|QWORD[.] = UNCOMPRESSPOINTER (input: v41|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [v44|QWORD[.] + v43|DWORD * 4 + 16], y: v33|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: v40|DWORD, y: v40|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v143|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v149|DWORD = MOVE input: v148|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction v47|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v47|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: v45|DWORD, y: [v13|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction v48|QWORD[.] = UNCOMPRESSPOINTER (input: v47|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction v49|DWORD[_] = MOV input: [v48|QWORD[.] + v45|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: v49|DWORD[_], y: v49|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [v49|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v59|DWORD = MOV input: [v46|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction v60|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: v59|DWORD, y: v60|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v158|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction v61|DWORD[_] = MOV input: [v49|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v62|DWORD = MOV input: [v61|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction v63|DWORD = MOV input: [v46|QWORD[.] + v60|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [v46|QWORD[.] + v60|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction v65|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction v64|QWORD = UNCOMPRESSPOINTER (input: v62|DWORD, ~baseRegister: v65|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction v66|QWORD = MOV input: [v64|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction v67|QWORD = MOV input: [v66|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction v68|QWORD[.] = UNCOMPRESSPOINTER (input: v61|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction v69|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = MOVE input: v150|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v159|DWORD = MOVE input: v149|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  732  <|@ instruction rbx|QWORD = MOVE input: v66|QWORD moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rax|QWORD = MOVE input: v67|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v164|QWORD[.] = MOVE input: v69|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = STACKMOVE (input: v158|DWORD, ~backupSlot: vstack:10|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v63|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD[_] = MOVE input: v49|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  738  <|@ instruction v70|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v167|QWORD[.] = MOVE input: v165|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  740  <|@ instruction v71|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v72|DWORD = MOV input: [v71|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v168|DWORD[_] = MOVE input: v160|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  744  <|@ instruction v73|DWORD = MOV input: [v49|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: v72|DWORD, y: v73|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v169|DWORD = MOVE input: v163|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction v74|QWORD[.] = UNCOMPRESSPOINTER (input: v71|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [v74|QWORD[.] + v73|DWORD * 4 + 16], y: v63|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: v70|DWORD, y: v70|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction v75|DWORD = INC value: v45|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v162|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v149|DWORD = MOVE input: v166|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v17|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v78|DWORD = MOV input: [v10|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction v79|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v171|DWORD = MOVE input: v166|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction v80|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v81|DWORD = MOV input: [v80|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction v82|DWORD = MOV input: [v11|QWORD[.] + v79|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [v11|QWORD[.] + v79|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction v84|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction v83|QWORD = UNCOMPRESSPOINTER (input: v81|DWORD, ~baseRegister: v84|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction v85|QWORD = MOV input: [v83|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction v86|QWORD = MOV input: [v85|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction v87|QWORD[.] = UNCOMPRESSPOINTER (input: v80|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v174|QWORD[.] = MOVE input: v167|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v171|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: v85|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: v86|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v177|DWORD = MOVE input: v82|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr  904  <|@ instruction v88|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v178|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  906  <|@ instruction v89|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v90|DWORD = MOV input: [v89|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v175|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  910  <|@ instruction v91|DWORD = MOV input: [v13|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: v90|DWORD, y: v91|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v177|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction v92|QWORD[.] = UNCOMPRESSPOINTER (input: v89|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [v92|QWORD[.] + v91|DWORD * 4 + 16], y: v82|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: v88|DWORD, y: v88|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v17|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction v20|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v21|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v22|DWORD = MOV input: [v21|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction v24|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction v23|QWORD = UNCOMPRESSPOINTER (input: v22|DWORD, ~baseRegister: v24|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction v25|QWORD = MOV input: [v23|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction v26|QWORD = MOV input: [v25|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v21|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1012  <|@ instruction rsi|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v184|QWORD[.] = MOVE input: v180|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1020  <|@ instruction rbx|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr 1022  <|@ instruction rax|QWORD = MOVE input: v26|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1026  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction v50|DWORD[_] = MOV input: [v13|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v51|DWORD[_] = MOV input: [v50|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction v52|DWORD = MOV input: [v51|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction v54|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction v53|QWORD = UNCOMPRESSPOINTER (input: v52|DWORD, ~baseRegister: v54|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction v55|QWORD = MOV input: [v53|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction v56|QWORD = MOV input: [v55|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v51|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1116  <|@ instruction rsi|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1124  <|@ instruction rbx|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr 1126  <|@ instruction rax|QWORD = MOVE input: v56|QWORD moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1130  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v136|QWORD[.] = MOVE input: v124|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = MOVE input: v123|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v104|DWORD 
locals: v103|QWORD[.] v1|QWORD[.] - - v97|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|QWORD[.] = MOVE input: v146|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v152|DWORD = MOVE input: v145|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v40|DWORD 
locals: v39|QWORD[.] v1|QWORD[.] - - v33|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v173|QWORD[.] = MOVE input: v164|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v169|DWORD = MOVE input: v163|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v70|DWORD 
locals: v69|QWORD[.] v1|QWORD[.] - - v63|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v161|DWORD = MOVE input: v45|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v77|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v161|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v76|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v77|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v17|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v45|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v177|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v155|QWORD[.] = MOVE input: v144|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v88|DWORD 
locals: v17|QWORD[.] v1|QWORD[.] - - v82|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE input: v6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v120|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v137|QWORD[.] = MOVE input: v122|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v133|QWORD[.] = MOVE input: v127|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v186|QWORD[.] = MOVE input: v185|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v110|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v111|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v5|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v6|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:6|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:0|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:7|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE input: r13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:7|QWORD[.] vstack:2|QWORD[.] - - vstack:4|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  250  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:7|QWORD[.] rdx|QWORD[.] - - vstack:4|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD[_] = MOVE input: vstack:3|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  254  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|DWORD = MOVE input: vstack:4|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction r11|DWORD = INC value: vstack:5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction vstack:13|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: rbx|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:14|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:12|DWORD = MOVE input: rdi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:11|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:14|QWORD[.] vstack:2|QWORD[.] - - vstack:12|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  520  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:14|QWORD[.] rdx|QWORD[.] - - vstack:12|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:11|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  524  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:12|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:19|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:17|DWORD = MOVE input: rdi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:16|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:19|QWORD[.] vstack:2|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  740  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:19|QWORD[.] rdx|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:16|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  744  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction r11|DWORD = INC value: vstack:18|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:20|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] - - vstack:20|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  906  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:15|QWORD[.] rdx|QWORD[.] - - vstack:20|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  910  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:20|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r14|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r13|DWORD = MOVE input: vstack:4|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] vstack:2|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:14|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:12|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] vstack:2|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbp|QWORD[.] = MOVE input: vstack:19|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] vstack:2|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:20|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: vstack:15|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] vstack:2|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:6|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   40  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:0|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   58  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  116  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  118  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  148  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  218  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  220  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  224  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  226  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr  228  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  230  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  232  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  236  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  240  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  242  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  244  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:7|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE input: r13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:7|QWORD[.] vstack:2|QWORD[.] - - vstack:4|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  250  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:7|QWORD[.] rdx|QWORD[.] - - vstack:4|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD[_] = MOVE input: vstack:3|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  254  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  256  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|DWORD = MOVE input: vstack:4|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  276  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction r11|DWORD = INC value: vstack:5|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  334  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr   -1  <|@ instruction vstack:13|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  336  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  338  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  340  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  342  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  344  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  360  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  362  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  388  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  402  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  418  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  420  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  488  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  490  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  492  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  494  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  496  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  500  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  504  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  508  <|@ instruction rcx|DWORD = MOVE input: rbx|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  512  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:14|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:12|DWORD = MOVE input: rdi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:11|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  516  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:14|QWORD[.] vstack:2|QWORD[.] - - vstack:12|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  520  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  522  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:14|QWORD[.] rdx|QWORD[.] - - vstack:12|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:11|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  524  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  526  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  528  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:12|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  548  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  550  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  560  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  574  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  588  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  606  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  608  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  610  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  638  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  640  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  642  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction NOP <|@ <|@
      nr  702  <|@ instruction NOP <|@ <|@
      nr  704  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  706  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  708  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  710  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  712  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  714  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  716  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  718  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  720  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  722  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  724  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  726  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  728  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  730  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:19|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:17|DWORD = MOVE input: rdi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:16|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:19|QWORD[.] vstack:2|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  740  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  742  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:19|QWORD[.] rdx|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:16|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  744  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  746  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  748  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  766  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  768  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  770  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction r11|DWORD = INC value: vstack:18|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  794  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  810  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  812  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  814  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  874  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  876  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  878  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  880  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  882  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  884  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  886  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  888  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  890  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  892  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  894  <|@ instruction rcx|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  896  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  898  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  900  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:20|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] - - vstack:20|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  906  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  908  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:15|QWORD[.] rdx|QWORD[.] - - vstack:20|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  910  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  912  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:20|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  932  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr  936  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  946  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction NOP <|@ <|@
      nr  960  <|@ instruction NOP <|@ <|@
      nr  962  <|@ instruction NOP <|@ <|@
      nr  964  <|@ instruction NOP <|@ <|@
      nr  966  <|@ instruction NOP <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  998  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1000  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1002  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1004  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1006  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr 1008  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1010  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1014  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1016  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1018  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1024  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1028  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr 1102  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr 1106  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1108  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1110  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr 1112  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1118  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1120  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1122  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1128  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr 1132  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr 1134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1194  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r14|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r13|DWORD = MOVE input: vstack:4|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1216  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] vstack:2|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:14|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:12|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction NOP <|@ <|@
      nr 1228  <|@ instruction NOP <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1236  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1238  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] vstack:2|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbp|QWORD[.] = MOVE input: vstack:19|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction NOP <|@ <|@
      nr 1256  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr 1258  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] vstack:2|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr 1280  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1284  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr 1302  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1304  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1314  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1316  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1324  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1326  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1344  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1346  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1348  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1356  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1366  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1368  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction NOP <|@ <|@
      nr 1376  <|@ instruction NOP <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1386  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction NOP <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1418  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1420  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1430  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1432  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1440  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1442  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1450  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1452  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1460  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1462  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1470  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1480  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1490  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:20|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: vstack:15|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1510  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] vstack:2|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1514  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1516  <|@ instruction NOP <|@ <|@
      nr 1518  <|@ instruction NOP <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1522  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1524  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1526  <|@ instruction NOP <|@ <|@
      nr 1528  <|@ instruction NOP <|@ <|@
      nr 1530  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1532  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1534  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction NOP <|@ <|@
      nr 1542  <|@ instruction NOP <|@ <|@
      nr 1544  <|@ instruction NOP <|@ <|@
      nr 1546  <|@ instruction NOP <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1552  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction vstack:2|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction vstack:1|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction vstack:6|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction vstack:0|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction vstack:8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1534  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1538  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1542  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction vstack:7|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction vstack:4|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction vstack:3|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:7|QWORD[.] vstack:2|QWORD[.] - - vstack:4|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:7|QWORD[.] rdx|QWORD[.] - - vstack:4|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: vstack:3|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: vstack:4|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: vstack:5|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction vstack:13|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction rcx|DWORD = MOVE input: rbx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction vstack:14|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction vstack:12|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction vstack:11|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:14|QWORD[.] vstack:2|QWORD[.] - - vstack:12|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:14|QWORD[.] rdx|QWORD[.] - - vstack:12|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: vstack:11|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: vstack:12|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction vstack:19|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction vstack:17|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction vstack:16|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:19|QWORD[.] vstack:2|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:19|QWORD[.] rdx|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: vstack:16|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: vstack:18|DWORD size: DWORD <|@ <|@
      nr  912  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD <|@ <|@
      nr  914  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1250  <|@ instruction rcx|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction vstack:20|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] - - vstack:20|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:15|QWORD[.] rdx|QWORD[.] - - vstack:20|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: vstack:13|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: vstack:20|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction vstack:15|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:8|QWORD[.] rdx|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: vstack:4|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] vstack:2|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: vstack:14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: vstack:12|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] vstack:2|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: vstack:19|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] vstack:2|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  978  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  996  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1014  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:15|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1106  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1108  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1110  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1112  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1114  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1130  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1134  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1136  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1138  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1694  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1696  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1698  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1700  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1702  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1378  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1380  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1382  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1384  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1386  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  208  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  210  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  212  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  214  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  216  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  244  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  246  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  248  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  250  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1746  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1748  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1750  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1752  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1754  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1720  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1722  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1724  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1726  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1728  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: vstack:20|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: vstack:15|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] vstack:2|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:8|QWORD[.] vstack:2|QWORD[.] vstack:1|DWORD vstack:6|QWORD[.] vstack:5|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1402  <|@ instruction rbx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1404  <|@ instruction r8|QWORD[.] = MOVE input: vstack:8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1406  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1408  <|@ instruction rcx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1410  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:2|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|d DWORD "[vstack:0|d]" vstack:0|d -1 [40, 1611[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[vstack:1|d]" vstack:1|d -1 [32, 1826[ "NOT_SUPPORTED"
  vstack:2|q QWORD "[vstack:2|q]" vstack:2|q -1 [30, 1826[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[vstack:3|d]" vstack:3|d -1 [1552, 1562[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[vstack:4|d]" vstack:4|d -1 [1550, 1658[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[vstack:5|d]" vstack:5|d -1 [126, 1772[ "NOT_SUPPORTED"
  vstack:6|q QWORD "[vstack:6|q]" vstack:6|q -1 [34, 1826[ "NOT_SUPPORTED"
  vstack:7|q QWORD "[vstack:7|q]" vstack:7|q -1 [1548, 1656[ "NOT_SUPPORTED"
  vstack:8|q QWORD "[vstack:8|q]" vstack:8|q -1 [58, 1774[ "NOT_SUPPORTED"
  vstack:11|d DWORD "[vstack:11|d]" vstack:11|d -1 [522, 532[ "NOT_SUPPORTED"
  vstack:12|d DWORD "[vstack:12|d]" vstack:12|d -1 [520, 1072[ "NOT_SUPPORTED"
  vstack:13|d DWORD "[vstack:13|d]" vstack:13|d -1 [168, 1268[ "NOT_SUPPORTED"
  vstack:14|q QWORD "[vstack:14|q]" vstack:14|q -1 [518, 1070[ "NOT_SUPPORTED"
  vstack:15|q QWORD "[vstack:15|q]" vstack:15|q -1 [274, 1344[ "NOT_SUPPORTED"
  vstack:16|d DWORD "[vstack:16|d]" vstack:16|d -1 [860, 870[ "NOT_SUPPORTED"
  vstack:17|d DWORD "[vstack:17|d]" vstack:17|d -1 [858, 942[ "NOT_SUPPORTED"
  vstack:18|d DWORD "[vstack:18|d]" vstack:18|d -1 [630, 1032[ "NOT_SUPPORTED"
  vstack:19|q QWORD "[vstack:19|q]" vstack:19|q -1 [856, 940[ "NOT_SUPPORTED"
  vstack:20|d DWORD "[vstack:20|d]" vstack:20|d -1 [1258, 1342[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|d DWORD "[stack:68|d]" vstack:0|d -1 [40, 1611[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[stack:28|d]" vstack:1|d -1 [32, 1826[ "NOT_SUPPORTED"
  vstack:2|q QWORD "[stack:56|q]" vstack:2|q -1 [30, 1826[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[stack:84|d]" vstack:3|d -1 [1552, 1562[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[stack:36|d]" vstack:4|d -1 [1550, 1658[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[stack:32|d]" vstack:5|d -1 [126, 1772[ "NOT_SUPPORTED"
  vstack:6|q QWORD "[stack:64|q]" vstack:6|q -1 [34, 1826[ "NOT_SUPPORTED"
  vstack:7|q QWORD "[stack:96|q]" vstack:7|q -1 [1548, 1656[ "NOT_SUPPORTED"
  vstack:8|q QWORD "[stack:80|q]" vstack:8|q -1 [58, 1774[ "NOT_SUPPORTED"
  vstack:11|d DWORD "[stack:108|d]" vstack:11|d -1 [522, 532[ "NOT_SUPPORTED"
  vstack:12|d DWORD "[stack:36|d]" vstack:12|d -1 [520, 1072[ "NOT_SUPPORTED"
  vstack:13|d DWORD "[stack:84|d]" vstack:13|d -1 [168, 1268[ "NOT_SUPPORTED"
  vstack:14|q QWORD "[stack:104|q]" vstack:14|q -1 [518, 1070[ "NOT_SUPPORTED"
  vstack:15|q QWORD "[stack:96|q]" vstack:15|q -1 [274, 1344[ "NOT_SUPPORTED"
  vstack:16|d DWORD "[stack:108|d]" vstack:16|d -1 [860, 870[ "NOT_SUPPORTED"
  vstack:17|d DWORD "[stack:44|d]" vstack:17|d -1 [858, 942[ "NOT_SUPPORTED"
  vstack:18|d DWORD "[stack:40|d]" vstack:18|d -1 [630, 1032[ "NOT_SUPPORTED"
  vstack:19|q QWORD "[stack:120|q]" vstack:19|q -1 [856, 940[ "NOT_SUPPORTED"
  vstack:20|d DWORD "[stack:36|d]" vstack:20|d -1 [1258, 1342[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1534  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1538  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1542  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction rcx|DWORD = MOVE input: rbx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  912  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  914  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1250  <|@ instruction rcx|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  978  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  996  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1014  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1106  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1108  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1110  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1112  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1114  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1130  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1134  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1136  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1694  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1696  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1698  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1700  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1702  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1378  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1380  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1382  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1384  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1386  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  208  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  210  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  212  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  214  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  216  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  244  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  246  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  248  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  250  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1746  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1748  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1750  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1752  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1754  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1720  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1722  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1724  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1726  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1728  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1402  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1404  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1406  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1408  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1410  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1534  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1538  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1542  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction rcx|DWORD = MOVE input: rbx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  912  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  914  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1250  <|@ instruction rcx|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  978  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  996  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1014  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1106  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1108  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1110  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1112  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1114  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1130  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1132  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1134  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1136  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1694  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1696  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1698  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1700  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1702  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1378  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1380  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1382  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1384  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1386  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  208  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  210  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  212  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  214  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  216  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  244  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  246  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  248  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  250  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1746  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1748  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1750  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1752  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1754  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1720  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1722  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1724  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1726  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1728  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1402  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1404  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1406  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1408  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1410  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1534  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1538  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1542  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  506  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  510  <|@ instruction rcx|DWORD = MOVE input: rbx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1250  <|@ instruction rcx|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@reference-map: [rdx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@reference-map: [stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r10:0, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rbx:0, rsi:0, r10:0, r11:0, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r9:0, r11:0, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@reference-map: [stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@reference-map: [stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@reference-map: [stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@reference-map: [rdx:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@reference-map: [rsi:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@reference-map: [r14:0, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@reference-map: [r13:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@reference-map: [rbp:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@reference-map: [rdx:0, r8:0, r9:0]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@reference-map: [rsi:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@reference-map: [r10:0, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|QWORD[.]] state [bci:0] <|@ <|@
      nr   38  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr   42  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] 
>@ <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr   58  <|@ instruction stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   62  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B61" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  120  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B51" "B60" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1414  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B52" "B59" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1426  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction NOP <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction NOP <|@ <|@
      nr 1440  <|@ st <@st|@reference-map: [rdx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1442  <|@ instruction rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1444  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B53" "B58" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1448  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction NOP <|@ <|@
      nr 1462  <|@ instruction NOP <|@ <|@
      nr 1464  <|@ instruction NOP <|@ <|@
      nr 1466  <|@ instruction NOP <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction NOP <|@ <|@
      nr 1476  <|@ instruction NOP <|@ <|@
      nr 1478  <|@ instruction NOP <|@ <|@
      nr 1480  <|@ instruction NOP <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction NOP <|@ <|@
      nr 1492  <|@ instruction NOP <|@ <|@
      nr 1494  <|@ instruction NOP <|@ <|@
      nr 1496  <|@ instruction NOP <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction NOP <|@ <|@
      nr 1508  <|@ instruction NOP <|@ <|@
      nr 1510  <|@ instruction rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1512  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1514  <|@ instruction r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1516  <|@ instruction MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1518  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1520  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1522  <|@ instruction rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD <|@ <|@
      nr 1524  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1526  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1528  <|@ instruction r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1530  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1532  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1536  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1540  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1544  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1546  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr 1548  <|@ instruction stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1550  <|@ instruction stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD <|@ <|@
      nr 1552  <|@ instruction stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1554  <|@ st <@st|@reference-map: [stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7] <|@ <|@
      nr 1556  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1558  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1560  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7] <|@ <|@
      nr 1562  <|@ instruction rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1564  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1566  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors "B54" "B55" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607182186891219357
    begin_IR
      LIR
      nr 1568  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1570  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1572  <|@ instruction NOP <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1588  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD <|@ <|@
      nr 1590  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B2" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4603579311568680929
    begin_IR
      LIR
      nr 1592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1594  <|@ instruction NOP <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r11|DWORD = INC value: stack:32|DWORD size: DWORD <|@ <|@
      nr 1604  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1606  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1608  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1610  <|@ instruction JUMP ~outgoingValues: [] destination: B54 -> B2 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" "B54" 
    successors "B3" "B62" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4609884464811719665
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   78  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:48, stack:60, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B41" "B49" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  166  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  168  <|@ instruction stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  170  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r10:0, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  172  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  174  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  176  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B8" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  194  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rbx:0, rsi:0, r10:0, r11:0, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B9" "B10" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B11" "B14" 
    xhandlers
    flags 
    probability 4600876976775260262
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  270  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B15" "B40" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B39" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  396  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r9:0, r11:0, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  412  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  414  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B38" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  484  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  486  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  488  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  490  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  492  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  494  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  496  <|@ instruction rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  498  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  500  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  502  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  504  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  508  <|@ instruction rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  512  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  514  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  516  <|@ instruction rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr  518  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  520  <|@ instruction stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  522  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  524  <|@ st <@st|@reference-map: [stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  526  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  528  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  530  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  532  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  534  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B18" "B37" 
    xhandlers
    flags 
    probability 4598174626662925387
    begin_IR
      LIR
      nr  538  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction NOP <|@ <|@
      nr  556  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  558  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  560  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4594571895733350336
    begin_IR
      LIR
      nr  562  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction r11|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  576  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B34" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  594  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B24" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  624  <|@ instruction r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  626  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B25" "B33" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B26" "B32" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  756  <|@ instruction rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  758  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B27" "B31" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  760  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  762  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction NOP <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  828  <|@ instruction rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  830  <|@ instruction MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  832  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  834  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  836  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  838  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  840  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  842  <|@ instruction rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  844  <|@ instruction rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  846  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  854  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  856  <|@ instruction stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD <|@ <|@
      nr  858  <|@ instruction stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  860  <|@ instruction stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  862  <|@ st <@st|@reference-map: [stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:120|QWORD[.] stack:56|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7] <|@ <|@
      nr  864  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  866  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  868  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:120|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7] <|@ <|@
      nr  870  <|@ instruction r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  874  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors "B28" "B29" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4594571756599506027
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  896  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  898  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4591148798181651910
    begin_IR
      LIR
      nr  900  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction r11|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr  916  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B28" 
    successors "B20" "B35" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4597814084492593827
    begin_IR
      LIR
      nr  578  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  572  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr  574  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  592  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B53" 
    successors "B57" 
    xhandlers
    flags 
    probability 4600877370562982775
    begin_IR
      LIR
      nr 1612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction JUMP ~outgoingValues: [] destination: B55 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B56" "B55" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1632  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction NOP <|@ <|@
      nr 1640  <|@ instruction NOP <|@ <|@
      nr 1642  <|@ instruction NOP <|@ <|@
      nr 1644  <|@ instruction NOP <|@ <|@
      nr 1646  <|@ instruction NOP <|@ <|@
      nr 1648  <|@ instruction NOP <|@ <|@
      nr 1650  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1652  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B42" "B48" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1144  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1160  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1162  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1166  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction NOP <|@ <|@
      nr 1208  <|@ instruction NOP <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction NOP <|@ <|@
      nr 1218  <|@ instruction NOP <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1226  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr 1228  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1230  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1232  <|@ instruction rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1234  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1236  <|@ instruction rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr 1238  <|@ instruction r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr 1240  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1242  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1248  <|@ instruction rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1252  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1254  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr 1256  <|@ instruction rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD <|@ <|@
      nr 1258  <|@ instruction stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1260  <|@ st <@st|@reference-map: [stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7] <|@ <|@
      nr 1262  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1264  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1266  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:96|QWORD[.] rdx|QWORD[.] - - stack:36|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7] <|@ <|@
      nr 1268  <|@ instruction r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1270  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1272  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1276  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction NOP <|@ <|@
      nr 1282  <|@ instruction NOP <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr 1294  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1296  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B46" 
    xhandlers
    flags 
    probability 4596374602304637000
    begin_IR
      LIR
      nr 1320  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B45" "B30" "B29" "B37" "B13" 
    successors "B56" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1332  <|@ instruction NOP <|@ <|@
      nr 1334  <|@ instruction NOP <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B56 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B46" 
    successors "B57" 
    xhandlers
    flags 
    probability 4603579543477478981
    begin_IR
      LIR
      nr 1622  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1624  <|@ instruction NOP <|@ <|@
      nr 1626  <|@ instruction NOP <|@ <|@
      nr 1628  <|@ instruction NOP <|@ <|@
      nr 1630  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B57 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B13" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  326  <|@ st <@st|@reference-map: [rdx:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7] <|@ <|@
      nr  328  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:80|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7] <|@ <|@
      nr  330  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  332  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  334  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  336  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  338  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  344  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  346  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  348  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  350  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B46" 
    xhandlers
    flags 
    probability 4594572127632854145
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591869882522315031
    begin_IR
      LIR
      nr 1058  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction JUMP ~outgoingValues: [] destination: B37 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B23" "B30" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  628  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  630  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  682  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  684  <|@ st <@st|@reference-map: [rsi:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7] <|@ <|@
      nr  686  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  688  <|@ instruction rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  690  <|@ instruction rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD <|@ <|@
      nr  692  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3 <|@ <|@
      nr  696  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  700  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  702  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7] <|@ <|@
      nr  704  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B46" 
    xhandlers
    flags 
    probability 4591149076449340527
    begin_IR
      LIR
      nr  928  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B27" 
    successors "B46" 
    xhandlers
    flags 
    probability 4588807011234702880
    begin_IR
      LIR
      nr  918  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B52" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1654  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1656  <|@ instruction r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1658  <|@ instruction r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1660  <|@ instruction NOP <|@ <|@
      nr 1662  <|@ instruction NOP <|@ <|@
      nr 1664  <|@ instruction NOP <|@ <|@
      nr 1666  <|@ instruction NOP <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD <|@ <|@
      nr 1676  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1678  <|@ st <@st|@reference-map: [r14:0, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r14|QWORD[.] stack:56|QWORD[.] - - r13|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1068  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1070  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1072  <|@ instruction rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction NOP <|@ <|@
      nr 1084  <|@ instruction NOP <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD <|@ <|@
      nr 1090  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1092  <|@ st <@st|@reference-map: [r13:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B26" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  938  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  940  <|@ instruction rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD <|@ <|@
      nr  942  <|@ instruction rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD <|@ <|@
      nr  960  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  962  <|@ st <@st|@reference-map: [rbp:0, stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rbp|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD <|@ <|@
      nr  724  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  726  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  352  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD <|@ <|@
      nr  370  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr  372  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:35, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  964  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  966  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  976  <|@ instruction r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5] <|@ <|@
      nr  980  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B34" "B33" "B32" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1032  <|@ instruction r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1054  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1056  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:96|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B24" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  982  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  984  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  986  <|@ instruction NOP <|@ <|@
      nr  988  <|@ instruction NOP <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr  994  <|@ instruction r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd] <|@ <|@
      nr  998  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction NOP <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD <|@ <|@
      nr 1316  <|@ instruction MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD <|@ <|@
      nr 1318  <|@ st <@st|@reference-map: [stack:32, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:96|QWORD[.] stack:56|QWORD[.] - - r11|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:44, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1000  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1002  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1012  <|@ instruction r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed] <|@ <|@
      nr 1016  <|@ instruction JUMP ~outgoingValues: [] destination: B34 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B36" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1018  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1020  <|@ instruction stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1030  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1104  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] <|@ <|@
      nr 1116  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B62" "B61" "B60" "B59" "B49" "B7" "B9" "B48" "B40" "B39" 
    successors 
    xhandlers
    flags 
    probability 2370019303903723520
    begin_IR
      LIR
      nr 1784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1772  <|@ instruction rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1774  <|@ instruction r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1776  <|@ instruction r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1778  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1780  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1786  <|@ instruction NOP <|@ <|@
      nr 1788  <|@ instruction NOP <|@ <|@
      nr 1790  <|@ instruction NOP <|@ <|@
      nr 1792  <|@ instruction NOP <|@ <|@
      nr 1794  <|@ instruction NOP <|@ <|@
      nr 1796  <|@ instruction NOP <|@ <|@
      nr 1798  <|@ instruction NOP <|@ <|@
      nr 1800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1804  <|@ st <@st|@reference-map: [rdx:0, r8:0, r9:0]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r8|QWORD[.] rdx|QWORD[.] rcx|DWORD r9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:3, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1808  <|@ instruction NOP <|@ <|@
      nr 1810  <|@ instruction NOP <|@ <|@
      nr 1812  <|@ instruction NOP <|@ <|@
      nr 1814  <|@ instruction NOP <|@ <|@
      nr 1816  <|@ instruction NOP <|@ <|@
      nr 1818  <|@ instruction NOP <|@ <|@
      nr 1820  <|@ instruction NOP <|@ <|@
      nr 1822  <|@ instruction MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD <|@ <|@
      nr 1824  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr 1826  <|@ st <@st|@reference-map: [rsi:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1128  <|@ instruction r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd] <|@ <|@
      nr 1140  <|@ instruction JUMP ~outgoingValues: [] destination: B40 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B51" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1682  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1684  <|@ instruction NOP <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1692  <|@ instruction r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5] <|@ <|@
      nr 1704  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1376  <|@ instruction r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5] <|@ <|@
      nr 1388  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  206  <|@ instruction r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5] <|@ <|@
      nr  218  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr  242  <|@ instruction r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed] <|@ <|@
      nr  254  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1732  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1734  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1736  <|@ instruction NOP <|@ <|@
      nr 1738  <|@ instruction NOP <|@ <|@
      nr 1740  <|@ instruction NOP <|@ <|@
      nr 1742  <|@ instruction r11|QWORD = MOVE input: long[660|0x294] <|@ <|@
      nr 1744  <|@ instruction r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed] <|@ <|@
      nr 1756  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B50" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1706  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1708  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1710  <|@ instruction NOP <|@ <|@
      nr 1712  <|@ instruction NOP <|@ <|@
      nr 1714  <|@ instruction NOP <|@ <|@
      nr 1716  <|@ instruction r11|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1718  <|@ instruction r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd] <|@ <|@
      nr 1730  <|@ instruction JUMP ~outgoingValues: [] destination: B60 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1340  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1342  <|@ instruction r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1344  <|@ instruction r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@reference-map: [r10:0, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r10|QWORD[.] stack:56|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:80|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:32|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
>@ <|@ instruction DEOPT info [bci:31, 32, 7] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1760  <|@ instruction stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1762  <|@ instruction NOP <|@ <|@
      nr 1764  <|@ instruction NOP <|@ <|@
      nr 1766  <|@ instruction NOP <|@ <|@
      nr 1768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1770  <|@ instruction r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5] <|@ <|@
      nr 1782  <|@ instruction JUMP ~outgoingValues: [] destination: B62 -> B63 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B63" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1390  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1392  <|@ instruction NOP <|@ <|@
      nr 1394  <|@ instruction NOP <|@ <|@
      nr 1396  <|@ instruction NOP <|@ <|@
      nr 1398  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1400  <|@ instruction r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd] <|@ <|@
      nr 1412  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B63 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #1          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
     4: aload_1       
     5: iload_2       
     6: aload_3       
     7: invokevirtual #2          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    10: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc0000002b787f00004d03d44d33e4493bc20f85e3ffffff66669089842400c0feff4883ec789041817f20000000000f851b0a000090909090909090909090909048896c24704889542448894c24644c894424408502448b560c448954243c42813cd508000000addeadde0f85b30800009090909090458bda49c1e3034c895c243041bb00000000e95801000066660f1f8400000000006666669090909090463b1cd5100000000f8d0c0900009090909090909090909048c1e603428b7c9e108b5a408bf348c1e60385ff0f843401000090909090813cfd08000000addeadde0f85ed0800009090909090908b1cdd0c0000008b04fd100000003bd80f865e08000044895c24609090909090909090909090909090909090909090909090909090909090908b1cfd0c0000008b2cdd08000000448b6c8610894c861048be0000002b787f0000488d2c2e488b85f0010000488b684048c1e303448bf749c1e603488bf3488bda448bd14d8bd0488bd8488bc54c8974242044896c245c897c242cffd00f1f840000000000488b5424488b72408b0cf50c0000008b7c242c448b04fd10000000413bc80f8691050000448b6c245c9090909090909048c1e60346896c861085c00f856703000090909090448b5c246041ffc3448b54243c4c8b4424408b4c24649090909090428b34d514000000443b1cf50c0000000f829bfeffffe91c08000044895c2460909090909090909090909090909090909090428b0cd518000000448b14cd0c000000448954242c428b0cd50800000049b80000002b787f0000498d0c08458bda49c1e303483b0d000000000f8412000000483b0d000000000f84f1020000e9ce0700009090909090428b0cd514000000833ccd0c000000000f84070700009090909042833cd510000000010f8c090700009090909090448b0ccd100000004585c90f84930300009090909042813ccd08000000addeadde0f85870600009090909090908b0cdd0c000000468b04cd10000000413bc80f86f60500004c895c24208b4c2464909090909090909090909090909090909090909090909090909090909090428b1ccd0c0000008b04dd08000000428b7c861042894c861048be0000002b787f0000488d0406488b80f0010000488b684048c1e303458be949c1e503488bf34c8bf28bd94c8b442440488bd8488bc54c896c2418897c245c44894c2414ffd00f1f840000000000488b5424488b72408b0cf50c000000448b4c2414468b04cd10000000413bc80f86da0300008b7c245c9090909090909048c1e60342897c861085c00f850203000090909041bb01000000e9460100006666660f1f84000000000066666690660f1f84000000000090909090463b1cd5100000000f8dbd0400009090909090909049c1e003478b4c98104585c90f84b90200009090909042813ccd08000000addeadde0f854d040000909090909090448b460c428b1ccd10000000443bc30f86f603000044895c2458909090909090909090909090909090909090909090909090909090909090468b04cd0c000000428b04c5080000008b7c9e10894c9e1048be0000002b787f0000488d0406488b98f0010000488b434049c1e003418be948c1e503498bf04c8bea448bf14c8b44244048896c2408897c245444894c2414ffd00f1f840000000000488b5424488b72408b0cf50c000000448b4c2414468b04cd10000000413bc80f86c50200008b7c24549090909090909048c1e60342897c861085c00f853a02000090909090448b5c245841ffc3448b54242c8b4c24649090909090468b04d514000000463b1cc50c0000000f82aefeffffe98f0300009090909090909090909090b801000000488b6c24704883c478493ba7500400000f8708050000c34c895c24209090909090908b0cdd0c000000468b04d510000000413bc80f86fe0300008b4c246490909090909090909090909090909090909090909090909090909090428b1cd50c0000008b04dd08000000468b5c861042894c861048be0000002b787f0000488d0406488b80f00100004c8b484048c1e303488bf3488bfa8be94c8b442440488bd8498bc144895c245cffd00f1f840000000000488b5424488b72408b0cf50c000000448b54242c468b04d510000000413bc80f86d4030000448b5c245c9090909090909048c1e60346895c861085c00f844a020000909090909090909090e9f1feffff4c895c2420909090909090909090909090909090909090909090909090428b34d5180000008b34f50c0000008b0cf50800000049b80000002b787f0000498d0c08488b99f0010000488b434048c1e6034c8bd28b4c24644c8b442440ffd00f1f84000000000085c00f8451010000909090eb82909090e97affffff44895c2458909090909090909090909090909090909090909090909090428b34d5180000008b34f50c0000008b14f50800000048b90000002b787f0000488d1411488b9af0010000488b434048c1e603488b5424488b4c24644c8b442440ffd00f1f84000000000085c00f84aa000000909090e902ffffff909090e9fafeffff4c8b742420448b6c245c9090909090909041c78784040000e598fdff49c7879004000000000000e8000000000f1f8400000000004c8b6c24188b7c245c9090909090909041c78784040000e579feff49c7879004000000000000e8000000000f1f840000000000488b6c24088b7c24549090909090909041c78784040000e517feff49c7879004000000000000e8000000000f1f8400000000009090909090909041c78784040000ed82fcff49c7879004000014050000e8000000000f1f8400000000009090909090909041c78784040000ed8bfcff49c7879004000014050000e8000000000f1f84000000000044895c245890909049c7c30000000041bae533feff448b44245890909090909090458997840400004d899f90040000e8000000000f1f84000000000044895c245890909049c7c39407000041bacd45feffebc29090909090909041c78784040000ed7dfcff49c7879004000014050000e8000000000f1f84000000000044895c245890909049c7c39402000041baed87fcffeb8144895c245890909049c7c30000000041bae569feffe967ffffff90909049c7c30000000041bae595feff8b5c24604c8b4424304c8b4c24408b4c2464488b54244890909090909090458997840400004d899f90040000e8000000000f1f8400000000009090909090909041c78784040000cdf7feff49c7879004000014000000e8000000000f1f84000000000090909049c7c39407000041bacdadfeffeb8b44895c246090909049c7c30000000041bae5b4fdffe971ffffff90909049c7c30000000041bae5f9fdffe95cffffff90909049c7c30000000041bae58cfdffe947ffffff90909049c7c39402000041baed8ffcffe932ffffff44895c246090909049c7c39402000041baed93fcffe918ffffff44895c246090909049c7c39407000041bacdcbfdffe9fefeffff448b5c245c4c8b5424209090909090909041c78784040000e5ddfdff49c7879004000000000000e8000000000f1f84000000000044895c246090909049c7c30000000041bae5e9feffe9b0feffff90909049c7c39411000041bacdabffffe99bfeffff48896c2470e800000000e9d6f5fffff4488d0de4faffff49898f68040000e988f5fffff441c78784040000f5cafdff49c7879004000018140000e8000000000f1f84000000000041c78784040000f5f8feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5c2fdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5a9fdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f59dfdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5eefeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5dbfeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5d6feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5cffeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5a3feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f58afeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f57efeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f541feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f528feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f51cfeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f56efeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f507feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5eefdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5e2fdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5befeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5b8feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f55efeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f558feff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 75 28 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD  <||@
  Comment 75 30 stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 80 32 stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 84 34 stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 89 36 NULLCHECK address: [rdx|QWORD[.]] state [bci:0]  <||@
  Comment 89 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 89 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 91 38 r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 95 40 stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 100 42 CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0]  <||@
  Comment 100 [rdx:0, rsi:0, r8:0, r10:0, stack:60, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 100 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 100 {meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}}  <||@
  Comment 118 block B1 null  <||@
  Comment 118 44 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 118 46 NOP  <||@
  Comment 119 48 NOP  <||@
  Comment 120 50 NOP  <||@
  Comment 121 52 NOP  <||@
  Comment 122 54 NOP  <||@
  Comment 123 56 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 130 58 stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 135 60 r11|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 141 62 JUMP ~outgoingValues: [] destination: B1 -> B2  <||@
  Comment 146 block B3 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 146 80 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 160 82 NOP  <||@
  Comment 161 84 NOP  <||@
  Comment 162 86 NOP  <||@
  Comment 163 88 NOP  <||@
  Comment 164 90 CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD  <||@
  Comment 178 block B4 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 178 92 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 178 94 NOP  <||@
  Comment 179 96 NOP  <||@
  Comment 180 98 NOP  <||@
  Comment 181 100 NOP  <||@
  Comment 182 102 NOP  <||@
  Comment 183 104 NOP  <||@
  Comment 184 106 NOP  <||@
  Comment 185 108 NOP  <||@
  Comment 186 110 NOP  <||@
  Comment 187 112 NOP  <||@
  Comment 188 114 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 192 116 rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 197 118 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 200 120 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 206 122 TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD  <||@
  Comment 214 block B50 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 214 1414 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 214 1416 NOP  <||@
  Comment 215 1418 NOP  <||@
  Comment 216 1420 NOP  <||@
  Comment 217 1422 NOP  <||@
  Comment 218 1424 CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 218 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 235 block B51 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 235 1426 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 235 1428 NOP  <||@
  Comment 236 1430 NOP  <||@
  Comment 237 1432 NOP  <||@
  Comment 238 1434 NOP  <||@
  Comment 239 1436 NOP  <||@
  Comment 240 1438 NOP  <||@
  Comment 241 1440 rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 241 [rdx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 241 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 248 1442 rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 255 1444 CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD  <||@
  Comment 263 block B52 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 263 1446 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 263 1448 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 268 1450 NOP  <||@
  Comment 269 1452 NOP  <||@
  Comment 270 1454 NOP  <||@
  Comment 271 1456 NOP  <||@
  Comment 272 1458 NOP  <||@
  Comment 273 1460 NOP  <||@
  Comment 274 1462 NOP  <||@
  Comment 275 1464 NOP  <||@
  Comment 276 1466 NOP  <||@
  Comment 277 1468 NOP  <||@
  Comment 278 1470 NOP  <||@
  Comment 279 1472 NOP  <||@
  Comment 280 1474 NOP  <||@
  Comment 281 1476 NOP  <||@
  Comment 282 1478 NOP  <||@
  Comment 283 1480 NOP  <||@
  Comment 284 1482 NOP  <||@
  Comment 285 1484 NOP  <||@
  Comment 286 1486 NOP  <||@
  Comment 287 1488 NOP  <||@
  Comment 288 1490 NOP  <||@
  Comment 289 1492 NOP  <||@
  Comment 290 1494 NOP  <||@
  Comment 291 1496 NOP  <||@
  Comment 292 1498 NOP  <||@
  Comment 293 1500 NOP  <||@
  Comment 294 1502 NOP  <||@
  Comment 295 1504 NOP  <||@
  Comment 296 1506 NOP  <||@
  Comment 297 1508 NOP  <||@
  Comment 298 1510 rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 305 1512 rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 305 [rdx:0, rbx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 305 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 312 1514 r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD  <||@
  Comment 317 1516 MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 321 1518 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 331 1520 rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 335 1522 rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD  <||@
  Comment 342 1524 rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 346 1526 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 350 1528 r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 357 1530 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 360 1532 rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 363 1536 r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 366 1540 r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 369 1544 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 372 1546 rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 375 1548 stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD  <||@
  Comment 380 1550 stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD  <||@
  Comment 385 1552 stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD  <||@
  Comment 389 1554 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7]  <||@
  Comment 389 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 389 INLINE_INVOKE  <||@
  Comment 391 [stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 399 1556 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 404 1558 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 407 1560 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7]  <||@
  Comment 407 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 407 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 414 1562 rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD  <||@
  Comment 418 1564 r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 426 1566 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD  <||@
  Comment 435 block B53 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 435 1568 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 435 1570 r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 440 1572 NOP  <||@
  Comment 441 1574 NOP  <||@
  Comment 442 1576 NOP  <||@
  Comment 443 1578 NOP  <||@
  Comment 444 1580 NOP  <||@
  Comment 445 1582 NOP  <||@
  Comment 446 1584 NOP  <||@
  Comment 447 1586 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 451 1588 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD  <||@
  Comment 456 1590 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD  <||@
  Comment 464 block B54 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 464 1592 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 464 1594 NOP  <||@
  Comment 465 1596 NOP  <||@
  Comment 466 1598 NOP  <||@
  Comment 467 1600 NOP  <||@
  Comment 468 1602 r11|DWORD = INC value: stack:32|DWORD size: DWORD  <||@
  Comment 476 1604 r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD  <||@
  Comment 481 1606 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 486 1608 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 490 1610 JUMP ~outgoingValues: [] destination: B54 -> B2  <||@
  Comment 490 block B2 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 490 64 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 490 66 NOP  <||@
  Comment 491 68 NOP  <||@
  Comment 492 70 NOP  <||@
  Comment 493 72 NOP  <||@
  Comment 494 74 NOP  <||@
  Comment 495 76 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 503 78 CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7]  <||@
  Comment 503 [rdx:0, rsi:0, r8:0, r10:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 503 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 522 block B5 null  <||@
  Comment 522 124 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 522 126 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 527 128 NOP  <||@
  Comment 528 130 NOP  <||@
  Comment 529 132 NOP  <||@
  Comment 530 134 NOP  <||@
  Comment 531 136 NOP  <||@
  Comment 532 138 NOP  <||@
  Comment 533 140 NOP  <||@
  Comment 534 142 NOP  <||@
  Comment 535 144 NOP  <||@
  Comment 536 146 NOP  <||@
  Comment 537 148 NOP  <||@
  Comment 538 150 NOP  <||@
  Comment 539 152 NOP  <||@
  Comment 540 154 NOP  <||@
  Comment 541 156 NOP  <||@
  Comment 542 158 NOP  <||@
  Comment 543 160 NOP  <||@
  Comment 544 162 NOP  <||@
  Comment 545 164 rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 553 166 r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 553 [rdx:0, rbx:0, rsi:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 553 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 561 168 stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 566 170 rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 566 [rdx:0, rbx:0, rsi:0, r10:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 566 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 574 172 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 584 174 rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 588 176 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 595 178 AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0]  <||@
  Comment 595 {DataSection[0x0]}  <||@
  Comment 608 {DataSection[0x8]}  <||@
  Comment 626 block B6 null  <||@
  Comment 626 180 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 626 182 NOP  <||@
  Comment 627 184 NOP  <||@
  Comment 628 186 NOP  <||@
  Comment 629 188 NOP  <||@
  Comment 630 190 NOP  <||@
  Comment 631 192 rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 639 194 CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7]  <||@
  Comment 639 [rcx:0, rdx:0, rbx:0, rsi:0, r10:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 639 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 653 block B8 null  <||@
  Comment 653 220 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 653 222 NOP  <||@
  Comment 654 224 NOP  <||@
  Comment 655 226 NOP  <||@
  Comment 656 228 NOP  <||@
  Comment 657 230 CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null  <||@
  Comment 672 block B10 null  <||@
  Comment 672 256 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 672 258 NOP  <||@
  Comment 673 260 NOP  <||@
  Comment 674 262 NOP  <||@
  Comment 675 264 NOP  <||@
  Comment 676 266 NOP  <||@
  Comment 677 268 r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 685 270 TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD  <||@
  Comment 694 block B14 null  <||@
  Comment 694 384 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 694 386 NOP  <||@
  Comment 695 388 NOP  <||@
  Comment 696 390 NOP  <||@
  Comment 697 392 NOP  <||@
  Comment 698 394 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 698 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 716 block B15 null  <||@
  Comment 716 396 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 716 398 NOP  <||@
  Comment 717 400 NOP  <||@
  Comment 718 402 NOP  <||@
  Comment 719 404 NOP  <||@
  Comment 720 406 NOP  <||@
  Comment 721 408 NOP  <||@
  Comment 722 410 rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 722 [rdx:0, rsi:0, r9:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 722 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 729 412 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 737 414 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD  <||@
  Comment 746 block B16 null  <||@
  Comment 746 416 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 746 418 stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 751 420 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 755 422 NOP  <||@
  Comment 756 424 NOP  <||@
  Comment 757 426 NOP  <||@
  Comment 758 428 NOP  <||@
  Comment 759 430 NOP  <||@
  Comment 760 432 NOP  <||@
  Comment 761 434 NOP  <||@
  Comment 762 436 NOP  <||@
  Comment 763 438 NOP  <||@
  Comment 764 440 NOP  <||@
  Comment 765 442 NOP  <||@
  Comment 766 444 NOP  <||@
  Comment 767 446 NOP  <||@
  Comment 768 448 NOP  <||@
  Comment 769 450 NOP  <||@
  Comment 770 452 NOP  <||@
  Comment 771 454 NOP  <||@
  Comment 772 456 NOP  <||@
  Comment 773 458 NOP  <||@
  Comment 774 460 NOP  <||@
  Comment 775 462 NOP  <||@
  Comment 776 464 NOP  <||@
  Comment 777 466 NOP  <||@
  Comment 778 468 NOP  <||@
  Comment 779 470 NOP  <||@
  Comment 780 472 NOP  <||@
  Comment 781 474 NOP  <||@
  Comment 782 476 NOP  <||@
  Comment 783 478 NOP  <||@
  Comment 784 480 NOP  <||@
  Comment 785 482 rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 793 484 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 793 [rdx:0, rbx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 793 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 800 486 rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD  <||@
  Comment 805 488 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 810 490 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 820 492 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 824 494 rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 831 496 rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 835 498 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 839 500 r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 846 502 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 849 504 r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 852 508 rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 854 512 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 859 514 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 862 516 rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 865 518 stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 870 520 stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD  <||@
  Comment 874 522 stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 879 524 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7]  <||@
  Comment 879 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 879 INLINE_INVOKE  <||@
  Comment 881 [stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 889 526 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 894 528 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 897 530 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7]  <||@
  Comment 897 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 897 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 904 532 r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD  <||@
  Comment 909 534 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 917 536 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD  <||@
  Comment 926 block B17 null  <||@
  Comment 926 538 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 926 540 rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 930 542 NOP  <||@
  Comment 931 544 NOP  <||@
  Comment 932 546 NOP  <||@
  Comment 933 548 NOP  <||@
  Comment 934 550 NOP  <||@
  Comment 935 552 NOP  <||@
  Comment 936 554 NOP  <||@
  Comment 937 556 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 941 558 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD  <||@
  Comment 946 560 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD  <||@
  Comment 954 block B18 null  <||@
  Comment 954 562 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 954 564 NOP  <||@
  Comment 955 566 NOP  <||@
  Comment 956 568 NOP  <||@
  Comment 957 570 r11|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 963 576 JUMP ~outgoingValues: [] destination: B18 -> B19  <||@
  Comment 968 block B20 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 968 594 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 992 596 NOP  <||@
  Comment 993 598 NOP  <||@
  Comment 994 600 NOP  <||@
  Comment 995 602 NOP  <||@
  Comment 996 604 CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD  <||@
  Comment 1010 block B21 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1010 606 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1010 608 NOP  <||@
  Comment 1011 610 NOP  <||@
  Comment 1012 612 NOP  <||@
  Comment 1013 614 NOP  <||@
  Comment 1014 616 NOP  <||@
  Comment 1015 618 NOP  <||@
  Comment 1016 620 NOP  <||@
  Comment 1017 622 r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1021 624 r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1026 626 TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD  <||@
  Comment 1035 block B24 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1035 728 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1035 730 NOP  <||@
  Comment 1036 732 NOP  <||@
  Comment 1037 734 NOP  <||@
  Comment 1038 736 NOP  <||@
  Comment 1039 738 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 1039 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 1057 block B25 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1057 740 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1057 742 NOP  <||@
  Comment 1058 744 NOP  <||@
  Comment 1059 746 NOP  <||@
  Comment 1060 748 NOP  <||@
  Comment 1061 750 NOP  <||@
  Comment 1062 752 NOP  <||@
  Comment 1063 754 r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1063 [rdx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1063 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1067 756 rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1075 758 CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD  <||@
  Comment 1084 block B26 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1084 760 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1084 762 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1089 764 NOP  <||@
  Comment 1090 766 NOP  <||@
  Comment 1091 768 NOP  <||@
  Comment 1092 770 NOP  <||@
  Comment 1093 772 NOP  <||@
  Comment 1094 774 NOP  <||@
  Comment 1095 776 NOP  <||@
  Comment 1096 778 NOP  <||@
  Comment 1097 780 NOP  <||@
  Comment 1098 782 NOP  <||@
  Comment 1099 784 NOP  <||@
  Comment 1100 786 NOP  <||@
  Comment 1101 788 NOP  <||@
  Comment 1102 790 NOP  <||@
  Comment 1103 792 NOP  <||@
  Comment 1104 794 NOP  <||@
  Comment 1105 796 NOP  <||@
  Comment 1106 798 NOP  <||@
  Comment 1107 800 NOP  <||@
  Comment 1108 802 NOP  <||@
  Comment 1109 804 NOP  <||@
  Comment 1110 806 NOP  <||@
  Comment 1111 808 NOP  <||@
  Comment 1112 810 NOP  <||@
  Comment 1113 812 NOP  <||@
  Comment 1114 814 NOP  <||@
  Comment 1115 816 NOP  <||@
  Comment 1116 818 NOP  <||@
  Comment 1117 820 NOP  <||@
  Comment 1118 822 NOP  <||@
  Comment 1119 824 r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 1127 826 rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1127 [rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1127 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1135 828 rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1139 830 MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1143 832 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1153 834 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1157 836 rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 1164 838 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1168 840 r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1172 842 rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1179 844 rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 1182 846 r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1185 850 r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1188 854 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1193 856 stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD  <||@
  Comment 1198 858 stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD  <||@
  Comment 1202 860 stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 1207 862 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7]  <||@
  Comment 1207 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1207 INLINE_INVOKE  <||@
  Comment 1209 [stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:120|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1217 864 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1222 866 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1225 868 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7]  <||@
  Comment 1225 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:120|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1225 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1232 870 r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD  <||@
  Comment 1237 872 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1245 874 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD  <||@
  Comment 1254 block B27 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1254 876 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1254 878 rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 1258 880 NOP  <||@
  Comment 1259 882 NOP  <||@
  Comment 1260 884 NOP  <||@
  Comment 1261 886 NOP  <||@
  Comment 1262 888 NOP  <||@
  Comment 1263 890 NOP  <||@
  Comment 1264 892 NOP  <||@
  Comment 1265 894 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1269 896 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD  <||@
  Comment 1274 898 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD  <||@
  Comment 1282 block B28 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1282 900 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1282 902 NOP  <||@
  Comment 1283 904 NOP  <||@
  Comment 1284 906 NOP  <||@
  Comment 1285 908 NOP  <||@
  Comment 1286 910 r11|DWORD = INC value: stack:40|DWORD size: DWORD  <||@
  Comment 1294 916 JUMP ~outgoingValues: [] destination: B28 -> B19  <||@
  Comment 1294 block B19 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1294 578 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1294 572 r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD  <||@
  Comment 1299 574 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1303 580 NOP  <||@
  Comment 1304 582 NOP  <||@
  Comment 1305 584 NOP  <||@
  Comment 1306 586 NOP  <||@
  Comment 1307 588 NOP  <||@
  Comment 1308 590 r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 1316 592 CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1316 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1316 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1335 block B55 null  <||@
  Comment 1335 1612 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1335 1614 NOP  <||@
  Comment 1336 1616 NOP  <||@
  Comment 1337 1618 NOP  <||@
  Comment 1338 1620 JUMP ~outgoingValues: [] destination: B55 -> B57  <||@
  Comment 1338 block B57 null  <||@
  Comment 1338 1632 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1338 1634 NOP  <||@
  Comment 1339 1636 NOP  <||@
  Comment 1340 1638 NOP  <||@
  Comment 1341 1640 NOP  <||@
  Comment 1342 1642 NOP  <||@
  Comment 1343 1644 NOP  <||@
  Comment 1344 1646 NOP  <||@
  Comment 1345 1648 NOP  <||@
  Comment 1346 1650 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 1351 1652 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 1360 POLL_RETURN_FAR  <||@
  Comment 1374 block B41 null  <||@
  Comment 1374 1142 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1374 1144 stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 1379 1146 NOP  <||@
  Comment 1380 1148 NOP  <||@
  Comment 1381 1150 NOP  <||@
  Comment 1382 1152 NOP  <||@
  Comment 1383 1154 NOP  <||@
  Comment 1384 1156 NOP  <||@
  Comment 1385 1158 rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 1385 [rdx:0, rsi:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1385 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1392 1160 r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1400 1162 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD  <||@
  Comment 1409 block B42 null  <||@
  Comment 1409 1164 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1409 1166 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1413 1168 NOP  <||@
  Comment 1414 1170 NOP  <||@
  Comment 1415 1172 NOP  <||@
  Comment 1416 1174 NOP  <||@
  Comment 1417 1176 NOP  <||@
  Comment 1418 1178 NOP  <||@
  Comment 1419 1180 NOP  <||@
  Comment 1420 1182 NOP  <||@
  Comment 1421 1184 NOP  <||@
  Comment 1422 1186 NOP  <||@
  Comment 1423 1188 NOP  <||@
  Comment 1424 1190 NOP  <||@
  Comment 1425 1192 NOP  <||@
  Comment 1426 1194 NOP  <||@
  Comment 1427 1196 NOP  <||@
  Comment 1428 1198 NOP  <||@
  Comment 1429 1200 NOP  <||@
  Comment 1430 1202 NOP  <||@
  Comment 1431 1204 NOP  <||@
  Comment 1432 1206 NOP  <||@
  Comment 1433 1208 NOP  <||@
  Comment 1434 1210 NOP  <||@
  Comment 1435 1212 NOP  <||@
  Comment 1436 1214 NOP  <||@
  Comment 1437 1216 NOP  <||@
  Comment 1438 1218 NOP  <||@
  Comment 1439 1220 NOP  <||@
  Comment 1440 1222 NOP  <||@
  Comment 1441 1224 rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 1449 1226 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 1449 [rdx:0, rbx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1449 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1456 1228 r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1461 1230 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1466 1232 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1476 1234 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1480 1236 rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 1487 1238 r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 1491 1240 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1495 1242 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 1498 1244 rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1501 1248 rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1503 1252 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1508 1254 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 1511 1256 rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD  <||@
  Comment 1514 1258 stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1519 1260 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7]  <||@
  Comment 1519 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1519 INLINE_INVOKE  <||@
  Comment 1521 [stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1529 1262 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1534 1264 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1537 1266 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7]  <||@
  Comment 1537 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1537 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1544 1268 r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD  <||@
  Comment 1549 1270 r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1557 1272 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD  <||@
  Comment 1566 block B43 null  <||@
  Comment 1566 1274 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1566 1276 r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1571 1278 NOP  <||@
  Comment 1572 1280 NOP  <||@
  Comment 1573 1282 NOP  <||@
  Comment 1574 1284 NOP  <||@
  Comment 1575 1286 NOP  <||@
  Comment 1576 1288 NOP  <||@
  Comment 1577 1290 NOP  <||@
  Comment 1578 1292 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1582 1294 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 1587 1296 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD  <||@
  Comment 1595 block B45 null  <||@
  Comment 1595 1320 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1595 1322 NOP  <||@
  Comment 1596 1324 NOP  <||@
  Comment 1597 1326 NOP  <||@
  Comment 1598 1328 JUMP ~outgoingValues: [] destination: B45 -> B46  <||@
  Comment 1598 block B46 null  <||@
  Comment 1598 1330 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1598 1332 NOP  <||@
  Comment 1599 1334 NOP  <||@
  Comment 1600 1336 NOP  <||@
  Comment 1601 1338 JUMP ~outgoingValues: [] destination: B46 -> B56  <||@
  Comment 1601 block B56 null  <||@
  Comment 1601 1622 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1601 1624 NOP  <||@
  Comment 1602 1626 NOP  <||@
  Comment 1603 1628 NOP  <||@
  Comment 1604 1630 JUMP ~outgoingValues: [] destination: B56 -> B57  <||@
  Comment 1609 block B11 null  <||@
  Comment 1609 272 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1609 274 stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 1614 276 NOP  <||@
  Comment 1615 278 NOP  <||@
  Comment 1616 280 NOP  <||@
  Comment 1617 282 NOP  <||@
  Comment 1618 284 NOP  <||@
  Comment 1619 286 NOP  <||@
  Comment 1620 288 NOP  <||@
  Comment 1621 290 NOP  <||@
  Comment 1622 292 NOP  <||@
  Comment 1623 294 NOP  <||@
  Comment 1624 296 NOP  <||@
  Comment 1625 298 NOP  <||@
  Comment 1626 300 NOP  <||@
  Comment 1627 302 NOP  <||@
  Comment 1628 304 NOP  <||@
  Comment 1629 306 NOP  <||@
  Comment 1630 308 NOP  <||@
  Comment 1631 310 NOP  <||@
  Comment 1632 312 NOP  <||@
  Comment 1633 314 NOP  <||@
  Comment 1634 316 NOP  <||@
  Comment 1635 318 NOP  <||@
  Comment 1636 320 NOP  <||@
  Comment 1637 322 NOP  <||@
  Comment 1638 324 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 1646 326 rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 1646 [rdx:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1646 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1653 328 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 1653 [rdx:0, rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1653 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1660 330 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1670 332 rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1674 334 rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD  <||@
  Comment 1681 336 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1685 338 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1689 340 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1692 344 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1696 346 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1701 348 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7]  <||@
  Comment 1701 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1701 INLINE_INVOKE  <||@
  Comment 1703 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1711 350 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD  <||@
  Comment 1719 block B13 null  <||@
  Comment 1719 374 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1719 376 NOP  <||@
  Comment 1720 378 NOP  <||@
  Comment 1721 380 NOP  <||@
  Comment 1722 382 JUMP ~outgoingValues: [] destination: B13 -> B46  <||@
  Comment 1724 block B37 null  <||@
  Comment 1724 1058 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1724 1060 NOP  <||@
  Comment 1725 1062 NOP  <||@
  Comment 1726 1064 NOP  <||@
  Comment 1727 1066 JUMP ~outgoingValues: [] destination: B37 -> B46  <||@
  Comment 1732 block B22 null  <||@
  Comment 1732 628 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1732 630 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1737 632 NOP  <||@
  Comment 1738 634 NOP  <||@
  Comment 1739 636 NOP  <||@
  Comment 1740 638 NOP  <||@
  Comment 1741 640 NOP  <||@
  Comment 1742 642 NOP  <||@
  Comment 1743 644 NOP  <||@
  Comment 1744 646 NOP  <||@
  Comment 1745 648 NOP  <||@
  Comment 1746 650 NOP  <||@
  Comment 1747 652 NOP  <||@
  Comment 1748 654 NOP  <||@
  Comment 1749 656 NOP  <||@
  Comment 1750 658 NOP  <||@
  Comment 1751 660 NOP  <||@
  Comment 1752 662 NOP  <||@
  Comment 1753 664 NOP  <||@
  Comment 1754 666 NOP  <||@
  Comment 1755 668 NOP  <||@
  Comment 1756 670 NOP  <||@
  Comment 1757 672 NOP  <||@
  Comment 1758 674 NOP  <||@
  Comment 1759 676 NOP  <||@
  Comment 1760 678 NOP  <||@
  Comment 1761 680 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 1769 682 rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1769 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1769 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1776 684 rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1776 [rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1776 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1783 686 rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1793 688 rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1797 690 rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD  <||@
  Comment 1804 692 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1808 694 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1812 696 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1817 698 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1821 700 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1826 702 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7]  <||@
  Comment 1826 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1826 INLINE_INVOKE  <||@
  Comment 1828 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1836 704 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD  <||@
  Comment 1844 block B30 null  <||@
  Comment 1844 928 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1844 930 NOP  <||@
  Comment 1845 932 NOP  <||@
  Comment 1846 934 NOP  <||@
  Comment 1847 936 JUMP ~outgoingValues: [] destination: B30 -> B46  <||@
  Comment 1852 block B29 null  <||@
  Comment 1852 918 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1852 920 NOP  <||@
  Comment 1853 922 NOP  <||@
  Comment 1854 924 NOP  <||@
  Comment 1855 926 JUMP ~outgoingValues: [] destination: B29 -> B46  <||@
  Comment 1860 block B58 null  <||@
  Comment 1860 1654 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1860 1656 r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD  <||@
  Comment 1865 1658 r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1870 1660 NOP  <||@
  Comment 1871 1662 NOP  <||@
  Comment 1872 1664 NOP  <||@
  Comment 1873 1666 NOP  <||@
  Comment 1874 1668 NOP  <||@
  Comment 1875 1670 NOP  <||@
  Comment 1876 1672 NOP  <||@
  Comment 1877 1674 MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD  <||@
  Comment 1888 1676 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1899 1678 DEOPT info [bci:31, 50, 7]  <||@
  Comment 1899 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1904 [r14:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r14|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |r13|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1912 block B38 null  <||@
  Comment 1912 1068 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1912 1070 r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD  <||@
  Comment 1917 1072 rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1921 1074 NOP  <||@
  Comment 1922 1076 NOP  <||@
  Comment 1923 1078 NOP  <||@
  Comment 1924 1080 NOP  <||@
  Comment 1925 1082 NOP  <||@
  Comment 1926 1084 NOP  <||@
  Comment 1927 1086 NOP  <||@
  Comment 1928 1088 MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD  <||@
  Comment 1939 1090 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1950 1092 DEOPT info [bci:31, 50, 32, 7]  <||@
  Comment 1950 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1955 [r13:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rdi|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1963 block B31 null  <||@
  Comment 1963 938 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1963 940 rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD  <||@
  Comment 1968 942 rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 1972 944 NOP  <||@
  Comment 1973 946 NOP  <||@
  Comment 1974 948 NOP  <||@
  Comment 1975 950 NOP  <||@
  Comment 1976 952 NOP  <||@
  Comment 1977 954 NOP  <||@
  Comment 1978 956 NOP  <||@
  Comment 1979 958 MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD  <||@
  Comment 1990 960 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2001 962 DEOPT info [bci:31, 50, 32, 7]  <||@
  Comment 2001 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2006 [rbp:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |rbp|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rdi|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2014 block B23 null  <||@
  Comment 2014 706 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2014 708 NOP  <||@
  Comment 2015 710 NOP  <||@
  Comment 2016 712 NOP  <||@
  Comment 2017 714 NOP  <||@
  Comment 2018 716 NOP  <||@
  Comment 2019 718 NOP  <||@
  Comment 2020 720 NOP  <||@
  Comment 2021 722 MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD  <||@
  Comment 2032 724 MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD  <||@
  Comment 2043 726 DEOPT info [bci:35, 32, 7]  <||@
  Comment 2043 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2048 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
     stack:   |int[0|0x0]         |                   |                |                   |               
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2056 block B12 null  <||@
  Comment 2056 352 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2056 354 NOP  <||@
  Comment 2057 356 NOP  <||@
  Comment 2058 358 NOP  <||@
  Comment 2059 360 NOP  <||@
  Comment 2060 362 NOP  <||@
  Comment 2061 364 NOP  <||@
  Comment 2062 366 NOP  <||@
  Comment 2063 368 MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD  <||@
  Comment 2074 370 MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD  <||@
  Comment 2085 372 DEOPT info [bci:35, 32, 7]  <||@
  Comment 2085 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2090 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
     stack:   |int[0|0x0]         |                   |                |                   |           
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2098 block B32 null  <||@
  Comment 2098 964 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2098 966 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2103 968 NOP  <||@
  Comment 2104 970 NOP  <||@
  Comment 2105 972 NOP  <||@
  Comment 2106 974 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2113 976 r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5]  <||@
  Comment 2119 980 JUMP ~outgoingValues: [] destination: B32 -> B36  <||@
  Comment 2119 block B36 null  <||@
  Comment 2119 1036 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 2119 1032 r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 2124 1038 NOP  <||@
  Comment 2125 1040 NOP  <||@
  Comment 2126 1042 NOP  <||@
  Comment 2127 1044 NOP  <||@
  Comment 2128 1046 NOP  <||@
  Comment 2129 1048 NOP  <||@
  Comment 2130 1050 NOP  <||@
  Comment 2131 1052 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 2138 1054 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 2145 1056 DEOPT info [bci:3, 32, 7]  <||@
  Comment 2145 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2150 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4        
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |r8|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2158 block B33 null  <||@
  Comment 2158 982 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2158 984 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2163 986 NOP  <||@
  Comment 2164 988 NOP  <||@
  Comment 2165 990 NOP  <||@
  Comment 2166 992 r11|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 2173 994 r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd]  <||@
  Comment 2179 998 JUMP ~outgoingValues: [] destination: B33 -> B36  <||@
  Comment 2181 block B44 null  <||@
  Comment 2181 1298 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2181 1300 NOP  <||@
  Comment 2182 1302 NOP  <||@
  Comment 2183 1304 NOP  <||@
  Comment 2184 1306 NOP  <||@
  Comment 2185 1308 NOP  <||@
  Comment 2186 1310 NOP  <||@
  Comment 2187 1312 NOP  <||@
  Comment 2188 1314 MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD  <||@
  Comment 2199 1316 MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD  <||@
  Comment 2210 1318 DEOPT info [bci:44, 32, 7]  <||@
  Comment 2210 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2215 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44, duringCall: false, rethrow: false]
              |0                  |1                  |2  |3  |4          |5          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |r11|DWORD  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2223 block B34 null  <||@
  Comment 2223 1000 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2223 1002 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2228 1004 NOP  <||@
  Comment 2229 1006 NOP  <||@
  Comment 2230 1008 NOP  <||@
  Comment 2231 1010 r11|QWORD = MOVE input: long[660|0x294]  <||@
  Comment 2238 1012 r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed]  <||@
  Comment 2244 1016 JUMP ~outgoingValues: [] destination: B34 -> B36  <||@
  Comment 2246 block B35 null  <||@
  Comment 2246 1018 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2246 1020 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2251 1022 NOP  <||@
  Comment 2252 1024 NOP  <||@
  Comment 2253 1026 NOP  <||@
  Comment 2254 1028 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2261 1030 r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5]  <||@
  Comment 2267 1034 JUMP ~outgoingValues: [] destination: B35 -> B36  <||@
  Comment 2272 block B39 null  <||@
  Comment 2272 1094 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2272 1096 NOP  <||@
  Comment 2273 1098 NOP  <||@
  Comment 2274 1100 NOP  <||@
  Comment 2275 1102 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2282 1104 r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5]  <||@
  Comment 2288 1116 JUMP ~outgoingValues: [] destination: B39 -> B63  <||@
  Comment 2288 block B63 null  <||@
  Comment 2288 1784 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 2288 1772 rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 2292 1774 r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 2297 1776 r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 2302 1778 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2306 1780 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 2311 1786 NOP  <||@
  Comment 2312 1788 NOP  <||@
  Comment 2313 1790 NOP  <||@
  Comment 2314 1792 NOP  <||@
  Comment 2315 1794 NOP  <||@
  Comment 2316 1796 NOP  <||@
  Comment 2317 1798 NOP  <||@
  Comment 2318 1800 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 2325 1802 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 2332 1804 DEOPT info [bci:3, 7]  <||@
  Comment 2332 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2337 [rdx:0, r8:0, r9:0]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0            |1             |2          |3            |4         
     locals:  |r8|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r9|QWORD[.]  |rbx|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2345 block B64 null  <||@
  Comment 2345 1806 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2345 1808 NOP  <||@
  Comment 2346 1810 NOP  <||@
  Comment 2347 1812 NOP  <||@
  Comment 2348 1814 NOP  <||@
  Comment 2349 1816 NOP  <||@
  Comment 2350 1818 NOP  <||@
  Comment 2351 1820 NOP  <||@
  Comment 2352 1822 MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD  <||@
  Comment 2363 1824 MOV x: [r15|QWORD + 1168] y: 20 size: QWORD  <||@
  Comment 2374 1826 DEOPT info [bci:0]  <||@
  Comment 2374 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2379 [rsi:0, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                 
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]   <||@
  Comment 2387 block B40 null  <||@
  Comment 2387 1118 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2387 1120 NOP  <||@
  Comment 2388 1122 NOP  <||@
  Comment 2389 1124 NOP  <||@
  Comment 2390 1126 r11|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 2397 1128 r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd]  <||@
  Comment 2403 1140 JUMP ~outgoingValues: [] destination: B40 -> B63  <||@
  Comment 2405 block B59 null  <||@
  Comment 2405 1680 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2405 1682 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2410 1684 NOP  <||@
  Comment 2411 1686 NOP  <||@
  Comment 2412 1688 NOP  <||@
  Comment 2413 1690 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2420 1692 r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5]  <||@
  Comment 2426 1704 JUMP ~outgoingValues: [] destination: B59 -> B63  <||@
  Comment 2431 block B48 null  <||@
  Comment 2431 1366 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2431 1368 NOP  <||@
  Comment 2432 1370 NOP  <||@
  Comment 2433 1372 NOP  <||@
  Comment 2434 1374 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2441 1376 r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5]  <||@
  Comment 2447 1388 JUMP ~outgoingValues: [] destination: B48 -> B63  <||@
  Comment 2452 block B7 null  <||@
  Comment 2452 196 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2452 198 NOP  <||@
  Comment 2453 200 NOP  <||@
  Comment 2454 202 NOP  <||@
  Comment 2455 204 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2462 206 r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5]  <||@
  Comment 2468 218 JUMP ~outgoingValues: [] destination: B7 -> B63  <||@
  Comment 2473 block B9 null  <||@
  Comment 2473 232 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2473 234 NOP  <||@
  Comment 2474 236 NOP  <||@
  Comment 2475 238 NOP  <||@
  Comment 2476 240 r11|QWORD = MOVE input: long[660|0x294]  <||@
  Comment 2483 242 r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed]  <||@
  Comment 2489 254 JUMP ~outgoingValues: [] destination: B9 -> B63  <||@
  Comment 2494 block B61 null  <||@
  Comment 2494 1732 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2494 1734 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2499 1736 NOP  <||@
  Comment 2500 1738 NOP  <||@
  Comment 2501 1740 NOP  <||@
  Comment 2502 1742 r11|QWORD = MOVE input: long[660|0x294]  <||@
  Comment 2509 1744 r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed]  <||@
  Comment 2515 1756 JUMP ~outgoingValues: [] destination: B61 -> B63  <||@
  Comment 2520 block B60 null  <||@
  Comment 2520 1706 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2520 1708 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2525 1710 NOP  <||@
  Comment 2526 1712 NOP  <||@
  Comment 2527 1714 NOP  <||@
  Comment 2528 1716 r11|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 2535 1718 r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd]  <||@
  Comment 2541 1730 JUMP ~outgoingValues: [] destination: B60 -> B63  <||@
  Comment 2546 block B47 null  <||@
  Comment 2546 1340 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2546 1342 r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 2551 1344 r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD  <||@
  Comment 2556 1346 NOP  <||@
  Comment 2557 1348 NOP  <||@
  Comment 2558 1350 NOP  <||@
  Comment 2559 1352 NOP  <||@
  Comment 2560 1354 NOP  <||@
  Comment 2561 1356 NOP  <||@
  Comment 2562 1358 NOP  <||@
  Comment 2563 1360 MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD  <||@
  Comment 2574 1362 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2585 1364 DEOPT info [bci:31, 32, 7]  <||@
  Comment 2585 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2590 [r10:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r10|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |r11|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2598 block B62 null  <||@
  Comment 2598 1758 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2598 1760 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2603 1762 NOP  <||@
  Comment 2604 1764 NOP  <||@
  Comment 2605 1766 NOP  <||@
  Comment 2606 1768 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2613 1770 r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5]  <||@
  Comment 2619 1782 JUMP ~outgoingValues: [] destination: B62 -> B63  <||@
  Comment 2624 block B49 null  <||@
  Comment 2624 1390 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2624 1392 NOP  <||@
  Comment 2625 1394 NOP  <||@
  Comment 2626 1396 NOP  <||@
  Comment 2627 1398 r11|QWORD = MOVE input: long[4500|0x1194]  <||@
  Comment 2634 1400 r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd]  <||@
  Comment 2640 1412 JUMP ~outgoingValues: [] destination: B49 -> B63  <||@
  Comment 2650 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 2675 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 2703 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2708 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 2738 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2743 [rdx:0, rsi:0, r8:0, r10:0, stack:60, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 2773 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2778 [rdx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2808 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2813 [rdx:0, rbx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2843 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2848 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2878 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2883 [rdx:0, rsi:0, r8:0, r10:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2913 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2918 [rdx:0, rbx:0, rsi:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2948 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2953 [rdx:0, rbx:0, rsi:0, r10:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2983 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2988 [rcx:0, rdx:0, rbx:0, rsi:0, r10:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3018 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3023 [rdx:0, rsi:0, r9:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3053 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3058 [rdx:0, rbx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3088 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3093 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3123 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3128 [rdx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3158 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3163 [rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3193 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3198 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:120|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3228 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3233 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3263 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3268 [rdx:0, rsi:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3298 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3303 [rdx:0, rbx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3333 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3338 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3368 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3373 [rdx:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3403 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3408 [rdx:0, rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3438 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3443 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3473 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3478 [rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3486 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 3486 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 3492 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 3492 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-5855[java.util.regex.Pattern$BranchConn.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-5855[java.util.regex.Pattern$BranchConn.match(Matcher, int, CharSequence)]"
  date 1724269746528
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f789ae74fa0 448b560849bc0000002b787f00004d03d44d33e4493bc20f85c30091fe66669089842400c0feff4883ec789041817f20000000000f851b0a000090909090909090909090909048896c24704889542448894c24644c894424408502448b560c448954243c42813cd50800000000ae35000f85b30800009090909090458bda49c1e3034c895c243041bb00000000e95801000066660f1f8400000000006666669090909090463b1cd5100000000f8d0c0900009090909090909090909048c1e603428b7c9e108b5a408bf348c1e60385ff0f843401000090909090813cfd08000000a88e35000f85ed0800009090909090908b1cdd0c0000008b04fd100000003bd80f865e08000044895c24609090909090909090909090909090909090909090909090909090909090908b1cfd0c0000008b2cdd08000000448b6c8610894c861048be0000002b787f0000488d2c2e488b85f0010000488b684048c1e303448bf749c1e603488bf3488bda448bd14d8bd0488bd8488bc54c8974242044896c245c897c242cffd00f1f840000000000488b5424488b72408b0cf50c0000008b7c242c448b04fd10000000413bc80f8691050000448b6c245c9090909090909048c1e60346896c861085c00f856703000090909090448b5c246041ffc3448b54243c4c8b4424408b4c24649090909090428b34d514000000443b1cf50c0000000f829bfeffffe91c08000044895c2460909090909090909090909090909090909090428b0cd518000000448b14cd0c000000448954242c428b0cd50800000049b80000002b787f0000498d0c08458bda49c1e303483b0d86fdffff0f8412000000483b0d81fdffff0f84f1020000e9ce0700009090909090428b0cd514000000833ccd0c000000000f84070700009090909042833cd510000000010f8c090700009090909090448b0ccd100000004585c90f84930300009090909042813ccd08000000a88e35000f85870600009090909090908b0cdd0c000000468b04cd10000000413bc80f86f60500004c895c24208b4c2464909090909090909090909090909090909090909090909090909090909090428b1ccd0c0000008b04dd08000000428b7c861042894c861048be0000002b787f0000488d0406488b80f0010000488b684048c1e303458be949c1e503488bf34c8bf28bd94c8b442440488bd8488bc54c896c2418897c245c44894c2414ffd00f1f840000000000488b5424488b72408b0cf50c000000448b4c2414468b04cd10000000413bc80f86da0300008b7c245c9090909090909048c1e60342897c861085c00f850203000090909041bb01000000e9460100006666660f1f84000000000066666690660f1f84000000000090909090463b1cd5100000000f8dbd0400009090909090909049c1e003478b4c98104585c90f84b90200009090909042813ccd08000000a88e35000f854d040000909090909090448b460c428b1ccd10000000443bc30f86f603000044895c2458909090909090909090909090909090909090909090909090909090909090468b04cd0c000000428b04c5080000008b7c9e10894c9e1048be0000002b787f0000488d0406488b98f0010000488b434049c1e003418be948c1e503498bf04c8bea448bf14c8b44244048896c2408897c245444894c2414ffd00f1f840000000000488b5424488b72408b0cf50c000000448b4c2414468b04cd10000000413bc80f86c50200008b7c24549090909090909048c1e60342897c861085c00f853a02000090909090448b5c245841ffc3448b54242c8b4c24649090909090468b04d514000000463b1cc50c0000000f82aefeffffe98f0300009090909090909090909090b801000000488b6c24704883c478493ba7500400000f8708050000c34c895c24209090909090908b0cdd0c000000468b04d510000000413bc80f86fe0300008b4c246490909090909090909090909090909090909090909090909090909090428b1cd50c0000008b04dd08000000468b5c861042894c861048be0000002b787f0000488d0406488b80f00100004c8b484048c1e303488bf3488bfa8be94c8b442440488bd8498bc144895c245cffd00f1f840000000000488b5424488b72408b0cf50c000000448b54242c468b04d510000000413bc80f86d4030000448b5c245c9090909090909048c1e60346895c861085c00f844a020000909090909090909090e9f1feffff4c895c2420909090909090909090909090909090909090909090909090428b34d5180000008b34f50c0000008b0cf50800000049b80000002b787f0000498d0c08488b99f0010000488b434048c1e6034c8bd28b4c24644c8b442440ffd00f1f84000000000085c00f8451010000909090eb82909090e97affffff44895c2458909090909090909090909090909090909090909090909090428b34d5180000008b34f50c0000008b14f50800000048b90000002b787f0000488d1411488b9af0010000488b434048c1e603488b5424488b4c24644c8b442440ffd00f1f84000000000085c00f84aa000000909090e902ffffff909090e9fafeffff4c8b742420448b6c245c9090909090909041c78784040000e598fdff49c7879004000000000000e86a5a91fe0f1f8400000000004c8b6c24188b7c245c9090909090909041c78784040000e579feff49c7879004000000000000e8375a91fe0f1f840000000000488b6c24088b7c24549090909090909041c78784040000e517feff49c7879004000000000000e8045a91fe0f1f8400000000009090909090909041c78784040000ed82fcff49c7879004000014050000e8da5991fe0f1f8400000000009090909090909041c78784040000ed8bfcff49c7879004000014050000e8b05991fe0f1f84000000000044895c245890909049c7c30000000041bae533feff448b44245890909090909090458997840400004d899f90040000e8745991fe0f1f84000000000044895c245890909049c7c39407000041bacd45feffebc29090909090909041c78784040000ed7dfcff49c7879004000014050000e8335991fe0f1f84000000000044895c245890909049c7c39402000041baed87fcffeb8144895c245890909049c7c30000000041bae569feffe967ffffff90909049c7c30000000041bae595feff8b5c24604c8b4424304c8b4c24408b4c2464488b54244890909090909090458997840400004d899f90040000e8b95891fe0f1f8400000000009090909090909041c78784040000cdf7feff49c7879004000014000000e88f5891fe0f1f84000000000090909049c7c39407000041bacdadfeffeb8b44895c246090909049c7c30000000041bae5b4fdffe971ffffff90909049c7c30000000041bae5f9fdffe95cffffff90909049c7c30000000041bae58cfdffe947ffffff90909049c7c39402000041baed8ffcffe932ffffff44895c246090909049c7c39402000041baed93fcffe918ffffff44895c246090909049c7c39407000041bacdcbfdffe9fefeffff448b5c245c4c8b5424209090909090909041c78784040000e5ddfdff49c7879004000000000000e8bc5791fe0f1f84000000000044895c246090909049c7c30000000041bae5e9feffe9b0feffff90909049c7c39411000041bacdabffffe99bfeffff48896c2470e821588ffee9d6f5fffff4488d0de4faffff49898f68040000e9e86591fef441c78784040000f5cafdff49c7879004000018140000e8465791fe0f1f84000000000041c78784040000f5f8feff49c7879004000000000000e8235791fe0f1f84000000000041c78784040000f5c2fdff49c7879004000000000000e8005791fe0f1f84000000000041c78784040000f5a9fdff49c7879004000000000000e8dd5691fe0f1f84000000000041c78784040000f59dfdff49c7879004000000000000e8ba5691fe0f1f84000000000041c78784040000f5eefeff49c7879004000000000000e8975691fe0f1f84000000000041c78784040000f5dbfeff49c7879004000000000000e8745691fe0f1f84000000000041c78784040000f5d6feff49c7879004000000000000e8515691fe0f1f84000000000041c78784040000f5cffeff49c7879004000000000000e82e5691fe0f1f84000000000041c78784040000f5a3feff49c7879004000000000000e80b5691fe0f1f84000000000041c78784040000f58afeff49c7879004000000000000e8e85591fe0f1f84000000000041c78784040000f57efeff49c7879004000000000000e8c55591fe0f1f84000000000041c78784040000f541feff49c7879004000000000000e8a25591fe0f1f84000000000041c78784040000f528feff49c7879004000000000000e87f5591fe0f1f84000000000041c78784040000f51cfeff49c7879004000000000000e85c5591fe0f1f84000000000041c78784040000f56efeff49c7879004000000000000e8395591fe0f1f84000000000041c78784040000f507feff49c7879004000000000000e8165591fe0f1f84000000000041c78784040000f5eefdff49c7879004000000000000e8f35491fe0f1f84000000000041c78784040000f5e2fdff49c7879004000000000000e8d05491fe0f1f84000000000041c78784040000f5befeff49c7879004000000000000e8ad5491fe0f1f84000000000041c78784040000f5b8feff49c7879004000000000000e88a5491fe0f1f84000000000041c78784040000f55efeff49c7879004000000000000e8675491fe0f1f84000000000041c78784040000f558feff49c7879004000000000000e8445491fe0f1f840000000000e8bdf5a4fef4e8d75191fef4f4f4f4f4f4f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 75 28 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@6d2c3b69 slotKind: QWORD  <||@
  Comment 75 30 stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 80 32 stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 84 34 stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 89 36 NULLCHECK address: [rdx|QWORD[.]] state [bci:0]  <||@
  Comment 89 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 89 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 91 38 r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 95 40 stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 100 42 CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B64 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:0]  <||@
  Comment 100 [rdx:0, rsi:0, r8:0, r10:0, stack:60, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 100 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 100 {meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}}  <||@
  Comment 118 block B1 null  <||@
  Comment 118 44 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 118 46 NOP  <||@
  Comment 119 48 NOP  <||@
  Comment 120 50 NOP  <||@
  Comment 121 52 NOP  <||@
  Comment 122 54 NOP  <||@
  Comment 123 56 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 130 58 stack:80|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 135 60 r11|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 141 62 JUMP ~outgoingValues: [] destination: B1 -> B2  <||@
  Comment 146 block B3 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 146 80 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 160 82 NOP  <||@
  Comment 161 84 NOP  <||@
  Comment 162 86 NOP  <||@
  Comment 163 88 NOP  <||@
  Comment 164 90 CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B61 size: DWORD  <||@
  Comment 178 block B4 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 178 92 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 178 94 NOP  <||@
  Comment 179 96 NOP  <||@
  Comment 180 98 NOP  <||@
  Comment 181 100 NOP  <||@
  Comment 182 102 NOP  <||@
  Comment 183 104 NOP  <||@
  Comment 184 106 NOP  <||@
  Comment 185 108 NOP  <||@
  Comment 186 110 NOP  <||@
  Comment 187 112 NOP  <||@
  Comment 188 114 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 192 116 rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 197 118 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 200 120 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 206 122 TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B50 size: DWORD  <||@
  Comment 214 block B50 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 214 1414 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 214 1416 NOP  <||@
  Comment 215 1418 NOP  <||@
  Comment 216 1420 NOP  <||@
  Comment 217 1422 NOP  <||@
  Comment 218 1424 CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B50 -> B51 falseDestination: B50 -> B60 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 218 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 235 block B51 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 235 1426 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 235 1428 NOP  <||@
  Comment 236 1430 NOP  <||@
  Comment 237 1432 NOP  <||@
  Comment 238 1434 NOP  <||@
  Comment 239 1436 NOP  <||@
  Comment 240 1438 NOP  <||@
  Comment 241 1440 rbx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 241 [rdx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 241 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 248 1442 rax|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 255 1444 CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B51 -> B52 falseDestination: B51 -> B59 size: DWORD  <||@
  Comment 263 block B52 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 263 1446 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 263 1448 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 268 1450 NOP  <||@
  Comment 269 1452 NOP  <||@
  Comment 270 1454 NOP  <||@
  Comment 271 1456 NOP  <||@
  Comment 272 1458 NOP  <||@
  Comment 273 1460 NOP  <||@
  Comment 274 1462 NOP  <||@
  Comment 275 1464 NOP  <||@
  Comment 276 1466 NOP  <||@
  Comment 277 1468 NOP  <||@
  Comment 278 1470 NOP  <||@
  Comment 279 1472 NOP  <||@
  Comment 280 1474 NOP  <||@
  Comment 281 1476 NOP  <||@
  Comment 282 1478 NOP  <||@
  Comment 283 1480 NOP  <||@
  Comment 284 1482 NOP  <||@
  Comment 285 1484 NOP  <||@
  Comment 286 1486 NOP  <||@
  Comment 287 1488 NOP  <||@
  Comment 288 1490 NOP  <||@
  Comment 289 1492 NOP  <||@
  Comment 290 1494 NOP  <||@
  Comment 291 1496 NOP  <||@
  Comment 292 1498 NOP  <||@
  Comment 293 1500 NOP  <||@
  Comment 294 1502 NOP  <||@
  Comment 295 1504 NOP  <||@
  Comment 296 1506 NOP  <||@
  Comment 297 1508 NOP  <||@
  Comment 298 1510 rbx|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 305 1512 rbp|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 305 [rdx:0, rbx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 305 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 312 1514 r13|DWORD = MOV input: [rsi|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD  <||@
  Comment 317 1516 MOV (x: [rsi|QWORD[.] + rax|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 321 1518 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 331 1520 rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 335 1522 rax|QWORD = MOV input: [rbp|QWORD + 496] size: QWORD  <||@
  Comment 342 1524 rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 346 1526 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 350 1528 r14|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 357 1530 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 360 1532 rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 363 1536 r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 366 1540 r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 369 1544 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 372 1546 rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 375 1548 stack:96|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD  <||@
  Comment 380 1550 stack:36|DWORD = MOVE input: r13|DWORD moveKind: DWORD  <||@
  Comment 385 1552 stack:84|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD  <||@
  Comment 389 1554 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7]  <||@
  Comment 389 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 389 INLINE_INVOKE  <||@
  Comment 391 [stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 399 1556 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 404 1558 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 407 1560 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7]  <||@
  Comment 407 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 407 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 414 1562 rdi|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD  <||@
  Comment 418 1564 r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 426 1566 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B52 -> B53 falseDestination: B52 -> B58 size: DWORD  <||@
  Comment 435 block B53 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 435 1568 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 435 1570 r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 440 1572 NOP  <||@
  Comment 441 1574 NOP  <||@
  Comment 442 1576 NOP  <||@
  Comment 443 1578 NOP  <||@
  Comment 444 1580 NOP  <||@
  Comment 445 1582 NOP  <||@
  Comment 446 1584 NOP  <||@
  Comment 447 1586 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 451 1588 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r13|DWORD) size: DWORD  <||@
  Comment 456 1590 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B53 -> B54 falseDestination: B53 -> B55 size: DWORD  <||@
  Comment 464 block B54 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 464 1592 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 464 1594 NOP  <||@
  Comment 465 1596 NOP  <||@
  Comment 466 1598 NOP  <||@
  Comment 467 1600 NOP  <||@
  Comment 468 1602 r11|DWORD = INC value: stack:32|DWORD size: DWORD  <||@
  Comment 476 1604 r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD  <||@
  Comment 481 1606 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 486 1608 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 490 1610 JUMP ~outgoingValues: [] destination: B54 -> B2  <||@
  Comment 490 block B2 loop 0 depth 1 header:21|LoopBegin  <||@
  Comment 490 64 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 490 66 NOP  <||@
  Comment 491 68 NOP  <||@
  Comment 492 70 NOP  <||@
  Comment 493 72 NOP  <||@
  Comment 494 74 NOP  <||@
  Comment 495 76 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 503 78 CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B2 -> B3 falseDestination: B2 -> B62 size: DWORD state [bci:3, 7]  <||@
  Comment 503 [rdx:0, rsi:0, r8:0, r10:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 503 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 522 block B5 null  <||@
  Comment 522 124 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 522 126 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 527 128 NOP  <||@
  Comment 528 130 NOP  <||@
  Comment 529 132 NOP  <||@
  Comment 530 134 NOP  <||@
  Comment 531 136 NOP  <||@
  Comment 532 138 NOP  <||@
  Comment 533 140 NOP  <||@
  Comment 534 142 NOP  <||@
  Comment 535 144 NOP  <||@
  Comment 536 146 NOP  <||@
  Comment 537 148 NOP  <||@
  Comment 538 150 NOP  <||@
  Comment 539 152 NOP  <||@
  Comment 540 154 NOP  <||@
  Comment 541 156 NOP  <||@
  Comment 542 158 NOP  <||@
  Comment 543 160 NOP  <||@
  Comment 544 162 NOP  <||@
  Comment 545 164 rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 553 166 r10|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 553 [rdx:0, rbx:0, rsi:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 553 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 561 168 stack:84|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 566 170 rcx|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 566 [rdx:0, rbx:0, rsi:0, r10:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 566 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 574 172 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 584 174 rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 588 176 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 595 178 AMD64HOTSPOTSTRATEGYSWITCH ~key: rcx|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B5 -> B6, B5 -> B41] defaultTarget: B5 -> B49 strategy: SequentialStrategy[avgEffort=-1.0]  <||@
  Comment 595 {DataSection[0x0]}  <||@
  Comment 608 {DataSection[0x8]}  <||@
  Comment 626 block B6 null  <||@
  Comment 626 180 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 626 182 NOP  <||@
  Comment 627 184 NOP  <||@
  Comment 628 186 NOP  <||@
  Comment 629 188 NOP  <||@
  Comment 630 190 NOP  <||@
  Comment 631 192 rcx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 639 194 CMPCONSTBRANCH x: [rcx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B8 y: 0 size: DWORD inlinedY: null state [bci:3, 7]  <||@
  Comment 639 [rcx:0, rdx:0, rbx:0, rsi:0, r10:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 639 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 653 block B8 null  <||@
  Comment 653 220 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 653 222 NOP  <||@
  Comment 654 224 NOP  <||@
  Comment 655 226 NOP  <||@
  Comment 656 228 NOP  <||@
  Comment 657 230 CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B8 -> B9 falseDestination: B8 -> B10 y: 1 size: DWORD inlinedY: null  <||@
  Comment 672 block B10 null  <||@
  Comment 672 256 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 672 258 NOP  <||@
  Comment 673 260 NOP  <||@
  Comment 674 262 NOP  <||@
  Comment 675 264 NOP  <||@
  Comment 676 266 NOP  <||@
  Comment 677 268 r9|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 685 270 TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B14 size: DWORD  <||@
  Comment 694 block B14 null  <||@
  Comment 694 384 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 694 386 NOP  <||@
  Comment 695 388 NOP  <||@
  Comment 696 390 NOP  <||@
  Comment 697 392 NOP  <||@
  Comment 698 394 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B14 -> B15 falseDestination: B14 -> B40 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 698 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 716 block B15 null  <||@
  Comment 716 396 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 716 398 NOP  <||@
  Comment 717 400 NOP  <||@
  Comment 718 402 NOP  <||@
  Comment 719 404 NOP  <||@
  Comment 720 406 NOP  <||@
  Comment 721 408 NOP  <||@
  Comment 722 410 rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 722 [rdx:0, rsi:0, r9:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 722 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 729 412 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 737 414 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B15 -> B16 falseDestination: B15 -> B39 size: DWORD  <||@
  Comment 746 block B16 null  <||@
  Comment 746 416 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 746 418 stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 751 420 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 755 422 NOP  <||@
  Comment 756 424 NOP  <||@
  Comment 757 426 NOP  <||@
  Comment 758 428 NOP  <||@
  Comment 759 430 NOP  <||@
  Comment 760 432 NOP  <||@
  Comment 761 434 NOP  <||@
  Comment 762 436 NOP  <||@
  Comment 763 438 NOP  <||@
  Comment 764 440 NOP  <||@
  Comment 765 442 NOP  <||@
  Comment 766 444 NOP  <||@
  Comment 767 446 NOP  <||@
  Comment 768 448 NOP  <||@
  Comment 769 450 NOP  <||@
  Comment 770 452 NOP  <||@
  Comment 771 454 NOP  <||@
  Comment 772 456 NOP  <||@
  Comment 773 458 NOP  <||@
  Comment 774 460 NOP  <||@
  Comment 775 462 NOP  <||@
  Comment 776 464 NOP  <||@
  Comment 777 466 NOP  <||@
  Comment 778 468 NOP  <||@
  Comment 779 470 NOP  <||@
  Comment 780 472 NOP  <||@
  Comment 781 474 NOP  <||@
  Comment 782 476 NOP  <||@
  Comment 783 478 NOP  <||@
  Comment 784 480 NOP  <||@
  Comment 785 482 rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 793 484 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 793 [rdx:0, rbx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 793 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 800 486 rdi|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD  <||@
  Comment 805 488 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 810 490 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 820 492 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 824 494 rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 831 496 rbp|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 835 498 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 839 500 r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 846 502 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 849 504 r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 852 508 rbx|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 854 512 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 859 514 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 862 516 rax|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 865 518 stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 870 520 stack:36|DWORD = MOVE input: rdi|DWORD moveKind: DWORD  <||@
  Comment 874 522 stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 879 524 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7]  <||@
  Comment 879 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 879 INLINE_INVOKE  <||@
  Comment 881 [stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 889 526 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 894 528 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 897 530 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7]  <||@
  Comment 897 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 897 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 904 532 r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD  <||@
  Comment 909 534 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 917 536 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B16 -> B17 falseDestination: B16 -> B38 size: DWORD  <||@
  Comment 926 block B17 null  <||@
  Comment 926 538 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 926 540 rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 930 542 NOP  <||@
  Comment 931 544 NOP  <||@
  Comment 932 546 NOP  <||@
  Comment 933 548 NOP  <||@
  Comment 934 550 NOP  <||@
  Comment 935 552 NOP  <||@
  Comment 936 554 NOP  <||@
  Comment 937 556 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 941 558 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD  <||@
  Comment 946 560 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B17 -> B18 falseDestination: B17 -> B37 size: DWORD  <||@
  Comment 954 block B18 null  <||@
  Comment 954 562 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 954 564 NOP  <||@
  Comment 955 566 NOP  <||@
  Comment 956 568 NOP  <||@
  Comment 957 570 r11|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 963 576 JUMP ~outgoingValues: [] destination: B18 -> B19  <||@
  Comment 968 block B20 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 968 594 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 992 596 NOP  <||@
  Comment 993 598 NOP  <||@
  Comment 994 600 NOP  <||@
  Comment 995 602 NOP  <||@
  Comment 996 604 CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B20 -> B21 falseDestination: B20 -> B34 size: DWORD  <||@
  Comment 1010 block B21 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1010 606 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1010 608 NOP  <||@
  Comment 1011 610 NOP  <||@
  Comment 1012 612 NOP  <||@
  Comment 1013 614 NOP  <||@
  Comment 1014 616 NOP  <||@
  Comment 1015 618 NOP  <||@
  Comment 1016 620 NOP  <||@
  Comment 1017 622 r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1021 624 r9|DWORD[_] = MOV input: [r8|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1026 626 TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B24 size: DWORD  <||@
  Comment 1035 block B24 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1035 728 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1035 730 NOP  <||@
  Comment 1036 732 NOP  <||@
  Comment 1037 734 NOP  <||@
  Comment 1038 736 NOP  <||@
  Comment 1039 738 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B24 -> B25 falseDestination: B24 -> B33 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 1039 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 1057 block B25 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1057 740 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1057 742 NOP  <||@
  Comment 1058 744 NOP  <||@
  Comment 1059 746 NOP  <||@
  Comment 1060 748 NOP  <||@
  Comment 1061 750 NOP  <||@
  Comment 1062 752 NOP  <||@
  Comment 1063 754 r8|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1063 [rdx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1063 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1067 756 rbx|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1075 758 CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD  <||@
  Comment 1084 block B26 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1084 760 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1084 762 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1089 764 NOP  <||@
  Comment 1090 766 NOP  <||@
  Comment 1091 768 NOP  <||@
  Comment 1092 770 NOP  <||@
  Comment 1093 772 NOP  <||@
  Comment 1094 774 NOP  <||@
  Comment 1095 776 NOP  <||@
  Comment 1096 778 NOP  <||@
  Comment 1097 780 NOP  <||@
  Comment 1098 782 NOP  <||@
  Comment 1099 784 NOP  <||@
  Comment 1100 786 NOP  <||@
  Comment 1101 788 NOP  <||@
  Comment 1102 790 NOP  <||@
  Comment 1103 792 NOP  <||@
  Comment 1104 794 NOP  <||@
  Comment 1105 796 NOP  <||@
  Comment 1106 798 NOP  <||@
  Comment 1107 800 NOP  <||@
  Comment 1108 802 NOP  <||@
  Comment 1109 804 NOP  <||@
  Comment 1110 806 NOP  <||@
  Comment 1111 808 NOP  <||@
  Comment 1112 810 NOP  <||@
  Comment 1113 812 NOP  <||@
  Comment 1114 814 NOP  <||@
  Comment 1115 816 NOP  <||@
  Comment 1116 818 NOP  <||@
  Comment 1117 820 NOP  <||@
  Comment 1118 822 NOP  <||@
  Comment 1119 824 r8|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 1127 826 rax|DWORD = MOV input: [r8|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1127 [rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1127 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1135 828 rdi|DWORD = MOV input: [rsi|QWORD[.] + rbx|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1139 830 MOV (x: [rsi|QWORD[.] + rbx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1143 832 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1153 834 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1157 836 rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 1164 838 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1168 840 r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1172 842 rbp|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1179 844 rsi|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 1182 846 r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1185 850 r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1188 854 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1193 856 stack:120|QWORD[.] = MOVE input: rbp|QWORD[.] moveKind: QWORD  <||@
  Comment 1198 858 stack:44|DWORD = MOVE input: rdi|DWORD moveKind: DWORD  <||@
  Comment 1202 860 stack:108|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 1207 862 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7]  <||@
  Comment 1207 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1207 INLINE_INVOKE  <||@
  Comment 1209 [stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:120|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1217 864 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1222 866 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1225 868 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7]  <||@
  Comment 1225 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:120|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1225 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1232 870 r9|DWORD[_] = MOVE input: stack:108|DWORD[_] moveKind: DWORD  <||@
  Comment 1237 872 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1245 874 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B26 -> B27 falseDestination: B26 -> B31 size: DWORD  <||@
  Comment 1254 block B27 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1254 876 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1254 878 rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 1258 880 NOP  <||@
  Comment 1259 882 NOP  <||@
  Comment 1260 884 NOP  <||@
  Comment 1261 886 NOP  <||@
  Comment 1262 888 NOP  <||@
  Comment 1263 890 NOP  <||@
  Comment 1264 892 NOP  <||@
  Comment 1265 894 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1269 896 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD  <||@
  Comment 1274 898 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B27 -> B28 falseDestination: B27 -> B29 size: DWORD  <||@
  Comment 1282 block B28 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1282 900 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1282 902 NOP  <||@
  Comment 1283 904 NOP  <||@
  Comment 1284 906 NOP  <||@
  Comment 1285 908 NOP  <||@
  Comment 1286 910 r11|DWORD = INC value: stack:40|DWORD size: DWORD  <||@
  Comment 1294 916 JUMP ~outgoingValues: [] destination: B28 -> B19  <||@
  Comment 1294 block B19 loop 1 depth 1 header:94|LoopBegin  <||@
  Comment 1294 578 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1294 572 r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD  <||@
  Comment 1299 574 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1303 580 NOP  <||@
  Comment 1304 582 NOP  <||@
  Comment 1305 584 NOP  <||@
  Comment 1306 586 NOP  <||@
  Comment 1307 588 NOP  <||@
  Comment 1308 590 r8|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 1316 592 CMPBRANCH (x: r11|DWORD, y: [r8|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B19 -> B20 falseDestination: B19 -> B35 size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1316 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1316 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1335 block B55 null  <||@
  Comment 1335 1612 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1335 1614 NOP  <||@
  Comment 1336 1616 NOP  <||@
  Comment 1337 1618 NOP  <||@
  Comment 1338 1620 JUMP ~outgoingValues: [] destination: B55 -> B57  <||@
  Comment 1338 block B57 null  <||@
  Comment 1338 1632 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1338 1634 NOP  <||@
  Comment 1339 1636 NOP  <||@
  Comment 1340 1638 NOP  <||@
  Comment 1341 1640 NOP  <||@
  Comment 1342 1642 NOP  <||@
  Comment 1343 1644 NOP  <||@
  Comment 1344 1646 NOP  <||@
  Comment 1345 1648 NOP  <||@
  Comment 1346 1650 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 1351 1652 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 1360 POLL_RETURN_FAR  <||@
  Comment 1374 block B41 null  <||@
  Comment 1374 1142 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1374 1144 stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 1379 1146 NOP  <||@
  Comment 1380 1148 NOP  <||@
  Comment 1381 1150 NOP  <||@
  Comment 1382 1152 NOP  <||@
  Comment 1383 1154 NOP  <||@
  Comment 1384 1156 NOP  <||@
  Comment 1385 1158 rcx|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 1385 [rdx:0, rsi:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1385 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1392 1160 r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1400 1162 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD  <||@
  Comment 1409 block B42 null  <||@
  Comment 1409 1164 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1409 1166 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1413 1168 NOP  <||@
  Comment 1414 1170 NOP  <||@
  Comment 1415 1172 NOP  <||@
  Comment 1416 1174 NOP  <||@
  Comment 1417 1176 NOP  <||@
  Comment 1418 1178 NOP  <||@
  Comment 1419 1180 NOP  <||@
  Comment 1420 1182 NOP  <||@
  Comment 1421 1184 NOP  <||@
  Comment 1422 1186 NOP  <||@
  Comment 1423 1188 NOP  <||@
  Comment 1424 1190 NOP  <||@
  Comment 1425 1192 NOP  <||@
  Comment 1426 1194 NOP  <||@
  Comment 1427 1196 NOP  <||@
  Comment 1428 1198 NOP  <||@
  Comment 1429 1200 NOP  <||@
  Comment 1430 1202 NOP  <||@
  Comment 1431 1204 NOP  <||@
  Comment 1432 1206 NOP  <||@
  Comment 1433 1208 NOP  <||@
  Comment 1434 1210 NOP  <||@
  Comment 1435 1212 NOP  <||@
  Comment 1436 1214 NOP  <||@
  Comment 1437 1216 NOP  <||@
  Comment 1438 1218 NOP  <||@
  Comment 1439 1220 NOP  <||@
  Comment 1440 1222 NOP  <||@
  Comment 1441 1224 rbx|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 1449 1226 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 1449 [rdx:0, rbx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1449 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1456 1228 r11|DWORD = MOV input: [rsi|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1461 1230 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1466 1232 rsi|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1476 1234 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rsi|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1480 1236 rax|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 1487 1238 r9|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 1491 1240 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1495 1242 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 1498 1244 rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1501 1248 rbp|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1503 1252 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1508 1254 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 1511 1256 rax|QWORD = MOVE input: r9|QWORD moveKind: QWORD  <||@
  Comment 1514 1258 stack:36|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1519 1260 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7]  <||@
  Comment 1519 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1519 INLINE_INVOKE  <||@
  Comment 1521 [stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1529 1262 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1534 1264 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1537 1266 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7]  <||@
  Comment 1537 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1537 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1544 1268 r10|DWORD[_] = MOVE input: stack:84|DWORD[_] moveKind: DWORD  <||@
  Comment 1549 1270 r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1557 1272 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD  <||@
  Comment 1566 block B43 null  <||@
  Comment 1566 1274 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1566 1276 r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1571 1278 NOP  <||@
  Comment 1572 1280 NOP  <||@
  Comment 1573 1282 NOP  <||@
  Comment 1574 1284 NOP  <||@
  Comment 1575 1286 NOP  <||@
  Comment 1576 1288 NOP  <||@
  Comment 1577 1290 NOP  <||@
  Comment 1578 1292 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1582 1294 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 1587 1296 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD  <||@
  Comment 1595 block B45 null  <||@
  Comment 1595 1320 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1595 1322 NOP  <||@
  Comment 1596 1324 NOP  <||@
  Comment 1597 1326 NOP  <||@
  Comment 1598 1328 JUMP ~outgoingValues: [] destination: B45 -> B46  <||@
  Comment 1598 block B46 null  <||@
  Comment 1598 1330 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1598 1332 NOP  <||@
  Comment 1599 1334 NOP  <||@
  Comment 1600 1336 NOP  <||@
  Comment 1601 1338 JUMP ~outgoingValues: [] destination: B46 -> B56  <||@
  Comment 1601 block B56 null  <||@
  Comment 1601 1622 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1601 1624 NOP  <||@
  Comment 1602 1626 NOP  <||@
  Comment 1603 1628 NOP  <||@
  Comment 1604 1630 JUMP ~outgoingValues: [] destination: B56 -> B57  <||@
  Comment 1609 block B11 null  <||@
  Comment 1609 272 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1609 274 stack:96|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 1614 276 NOP  <||@
  Comment 1615 278 NOP  <||@
  Comment 1616 280 NOP  <||@
  Comment 1617 282 NOP  <||@
  Comment 1618 284 NOP  <||@
  Comment 1619 286 NOP  <||@
  Comment 1620 288 NOP  <||@
  Comment 1621 290 NOP  <||@
  Comment 1622 292 NOP  <||@
  Comment 1623 294 NOP  <||@
  Comment 1624 296 NOP  <||@
  Comment 1625 298 NOP  <||@
  Comment 1626 300 NOP  <||@
  Comment 1627 302 NOP  <||@
  Comment 1628 304 NOP  <||@
  Comment 1629 306 NOP  <||@
  Comment 1630 308 NOP  <||@
  Comment 1631 310 NOP  <||@
  Comment 1632 312 NOP  <||@
  Comment 1633 314 NOP  <||@
  Comment 1634 316 NOP  <||@
  Comment 1635 318 NOP  <||@
  Comment 1636 320 NOP  <||@
  Comment 1637 322 NOP  <||@
  Comment 1638 324 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 1646 326 rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7]  <||@
  Comment 1646 [rdx:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1646 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1653 328 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7]  <||@
  Comment 1653 [rdx:0, rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1653 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1660 330 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1670 332 rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1674 334 rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD  <||@
  Comment 1681 336 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1685 338 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1689 340 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1692 344 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1696 346 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1701 348 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7]  <||@
  Comment 1701 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1701 INLINE_INVOKE  <||@
  Comment 1703 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1711 350 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B13 size: DWORD  <||@
  Comment 1719 block B13 null  <||@
  Comment 1719 374 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1719 376 NOP  <||@
  Comment 1720 378 NOP  <||@
  Comment 1721 380 NOP  <||@
  Comment 1722 382 JUMP ~outgoingValues: [] destination: B13 -> B46  <||@
  Comment 1724 block B37 null  <||@
  Comment 1724 1058 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1724 1060 NOP  <||@
  Comment 1725 1062 NOP  <||@
  Comment 1726 1064 NOP  <||@
  Comment 1727 1066 JUMP ~outgoingValues: [] destination: B37 -> B46  <||@
  Comment 1732 block B22 null  <||@
  Comment 1732 628 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1732 630 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1737 632 NOP  <||@
  Comment 1738 634 NOP  <||@
  Comment 1739 636 NOP  <||@
  Comment 1740 638 NOP  <||@
  Comment 1741 640 NOP  <||@
  Comment 1742 642 NOP  <||@
  Comment 1743 644 NOP  <||@
  Comment 1744 646 NOP  <||@
  Comment 1745 648 NOP  <||@
  Comment 1746 650 NOP  <||@
  Comment 1747 652 NOP  <||@
  Comment 1748 654 NOP  <||@
  Comment 1749 656 NOP  <||@
  Comment 1750 658 NOP  <||@
  Comment 1751 660 NOP  <||@
  Comment 1752 662 NOP  <||@
  Comment 1753 664 NOP  <||@
  Comment 1754 666 NOP  <||@
  Comment 1755 668 NOP  <||@
  Comment 1756 670 NOP  <||@
  Comment 1757 672 NOP  <||@
  Comment 1758 674 NOP  <||@
  Comment 1759 676 NOP  <||@
  Comment 1760 678 NOP  <||@
  Comment 1761 680 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 1769 682 rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1769 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1769 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1776 684 rdx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7]  <||@
  Comment 1776 [rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1776 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1783 686 rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1793 688 rdx|QWORD = UNCOMPRESSPOINTER (input: rdx|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1797 690 rbx|QWORD = MOV input: [rdx|QWORD + 496] size: QWORD  <||@
  Comment 1804 692 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1808 694 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@335d65e5 encoding: base: 0 shift: 3  <||@
  Comment 1812 696 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1817 698 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1821 700 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1826 702 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7]  <||@
  Comment 1826 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1826 INLINE_INVOKE  <||@
  Comment 1828 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1836 704 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B22 -> B23 falseDestination: B22 -> B30 size: DWORD  <||@
  Comment 1844 block B30 null  <||@
  Comment 1844 928 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1844 930 NOP  <||@
  Comment 1845 932 NOP  <||@
  Comment 1846 934 NOP  <||@
  Comment 1847 936 JUMP ~outgoingValues: [] destination: B30 -> B46  <||@
  Comment 1852 block B29 null  <||@
  Comment 1852 918 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1852 920 NOP  <||@
  Comment 1853 922 NOP  <||@
  Comment 1854 924 NOP  <||@
  Comment 1855 926 JUMP ~outgoingValues: [] destination: B29 -> B46  <||@
  Comment 1860 block B58 null  <||@
  Comment 1860 1654 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1860 1656 r14|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD  <||@
  Comment 1865 1658 r13|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1870 1660 NOP  <||@
  Comment 1871 1662 NOP  <||@
  Comment 1872 1664 NOP  <||@
  Comment 1873 1666 NOP  <||@
  Comment 1874 1668 NOP  <||@
  Comment 1875 1670 NOP  <||@
  Comment 1876 1672 NOP  <||@
  Comment 1877 1674 MOV x: [r15|QWORD + 1156] y: -157467 size: DWORD  <||@
  Comment 1888 1676 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1899 1678 DEOPT info [bci:31, 50, 7]  <||@
  Comment 1899 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1904 [r14:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r14|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |r13|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1912 block B38 null  <||@
  Comment 1912 1068 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1912 1070 r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD  <||@
  Comment 1917 1072 rdi|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1921 1074 NOP  <||@
  Comment 1922 1076 NOP  <||@
  Comment 1923 1078 NOP  <||@
  Comment 1924 1080 NOP  <||@
  Comment 1925 1082 NOP  <||@
  Comment 1926 1084 NOP  <||@
  Comment 1927 1086 NOP  <||@
  Comment 1928 1088 MOV x: [r15|QWORD + 1156] y: -99867 size: DWORD  <||@
  Comment 1939 1090 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1950 1092 DEOPT info [bci:31, 50, 32, 7]  <||@
  Comment 1950 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1955 [r13:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rdi|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 1963 block B31 null  <||@
  Comment 1963 938 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1963 940 rbp|QWORD[.] = MOVE input: stack:120|QWORD[.] moveKind: QWORD  <||@
  Comment 1968 942 rdi|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 1972 944 NOP  <||@
  Comment 1973 946 NOP  <||@
  Comment 1974 948 NOP  <||@
  Comment 1975 950 NOP  <||@
  Comment 1976 952 NOP  <||@
  Comment 1977 954 NOP  <||@
  Comment 1978 956 NOP  <||@
  Comment 1979 958 MOV x: [r15|QWORD + 1156] y: -124955 size: DWORD  <||@
  Comment 1990 960 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2001 962 DEOPT info [bci:31, 50, 32, 7]  <||@
  Comment 2001 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2006 [rbp:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |rbp|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rdi|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2014 block B23 null  <||@
  Comment 2014 706 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2014 708 NOP  <||@
  Comment 2015 710 NOP  <||@
  Comment 2016 712 NOP  <||@
  Comment 2017 714 NOP  <||@
  Comment 2018 716 NOP  <||@
  Comment 2019 718 NOP  <||@
  Comment 2020 720 NOP  <||@
  Comment 2021 722 MOV x: [r15|QWORD + 1156] y: -228627 size: DWORD  <||@
  Comment 2032 724 MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD  <||@
  Comment 2043 726 DEOPT info [bci:35, 32, 7]  <||@
  Comment 2043 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2048 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
     stack:   |int[0|0x0]         |                   |                |                   |               
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2056 block B12 null  <||@
  Comment 2056 352 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2056 354 NOP  <||@
  Comment 2057 356 NOP  <||@
  Comment 2058 358 NOP  <||@
  Comment 2059 360 NOP  <||@
  Comment 2060 362 NOP  <||@
  Comment 2061 364 NOP  <||@
  Comment 2062 366 NOP  <||@
  Comment 2063 368 MOV x: [r15|QWORD + 1156] y: -226323 size: DWORD  <||@
  Comment 2074 370 MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD  <||@
  Comment 2085 372 DEOPT info [bci:35, 32, 7]  <||@
  Comment 2085 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2090 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
     stack:   |int[0|0x0]         |                   |                |                   |           
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2098 block B32 null  <||@
  Comment 2098 964 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2098 966 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2103 968 NOP  <||@
  Comment 2104 970 NOP  <||@
  Comment 2105 972 NOP  <||@
  Comment 2106 974 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2113 976 r10|DWORD = MOVE input: int[-117787|0xfffffffffffe33e5]  <||@
  Comment 2119 980 JUMP ~outgoingValues: [] destination: B32 -> B36  <||@
  Comment 2119 block B36 null  <||@
  Comment 2119 1036 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 2119 1032 r8|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 2124 1038 NOP  <||@
  Comment 2125 1040 NOP  <||@
  Comment 2126 1042 NOP  <||@
  Comment 2127 1044 NOP  <||@
  Comment 2128 1046 NOP  <||@
  Comment 2129 1048 NOP  <||@
  Comment 2130 1050 NOP  <||@
  Comment 2131 1052 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 2138 1054 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 2145 1056 DEOPT info [bci:3, 32, 7]  <||@
  Comment 2145 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2150 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4        
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |r8|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2158 block B33 null  <||@
  Comment 2158 982 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2158 984 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2163 986 NOP  <||@
  Comment 2164 988 NOP  <||@
  Comment 2165 990 NOP  <||@
  Comment 2166 992 r11|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 2173 994 r10|DWORD = MOVE input: int[-113203|0xfffffffffffe45cd]  <||@
  Comment 2179 998 JUMP ~outgoingValues: [] destination: B33 -> B36  <||@
  Comment 2181 block B44 null  <||@
  Comment 2181 1298 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2181 1300 NOP  <||@
  Comment 2182 1302 NOP  <||@
  Comment 2183 1304 NOP  <||@
  Comment 2184 1306 NOP  <||@
  Comment 2185 1308 NOP  <||@
  Comment 2186 1310 NOP  <||@
  Comment 2187 1312 NOP  <||@
  Comment 2188 1314 MOV x: [r15|QWORD + 1156] y: -229907 size: DWORD  <||@
  Comment 2199 1316 MOV x: [r15|QWORD + 1168] y: 1300 size: QWORD  <||@
  Comment 2210 1318 DEOPT info [bci:44, 32, 7]  <||@
  Comment 2210 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2215 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44, duringCall: false, rethrow: false]
              |0                  |1                  |2  |3  |4          |5          
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |r11|DWORD  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2223 block B34 null  <||@
  Comment 2223 1000 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2223 1002 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2228 1004 NOP  <||@
  Comment 2229 1006 NOP  <||@
  Comment 2230 1008 NOP  <||@
  Comment 2231 1010 r11|QWORD = MOVE input: long[660|0x294]  <||@
  Comment 2238 1012 r10|DWORD = MOVE input: int[-227347|0xfffffffffffc87ed]  <||@
  Comment 2244 1016 JUMP ~outgoingValues: [] destination: B34 -> B36  <||@
  Comment 2246 block B35 null  <||@
  Comment 2246 1018 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2246 1020 stack:40|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2251 1022 NOP  <||@
  Comment 2252 1024 NOP  <||@
  Comment 2253 1026 NOP  <||@
  Comment 2254 1028 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2261 1030 r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5]  <||@
  Comment 2267 1034 JUMP ~outgoingValues: [] destination: B35 -> B36  <||@
  Comment 2272 block B39 null  <||@
  Comment 2272 1094 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2272 1096 NOP  <||@
  Comment 2273 1098 NOP  <||@
  Comment 2274 1100 NOP  <||@
  Comment 2275 1102 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2282 1104 r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5]  <||@
  Comment 2288 1116 JUMP ~outgoingValues: [] destination: B39 -> B63  <||@
  Comment 2288 block B63 null  <||@
  Comment 2288 1784 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 2288 1772 rbx|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 2292 1774 r8|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 2297 1776 r9|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 2302 1778 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2306 1780 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 2311 1786 NOP  <||@
  Comment 2312 1788 NOP  <||@
  Comment 2313 1790 NOP  <||@
  Comment 2314 1792 NOP  <||@
  Comment 2315 1794 NOP  <||@
  Comment 2316 1796 NOP  <||@
  Comment 2317 1798 NOP  <||@
  Comment 2318 1800 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 2325 1802 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 2332 1804 DEOPT info [bci:3, 7]  <||@
  Comment 2332 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2337 [rdx:0, r8:0, r9:0]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0            |1             |2          |3            |4         
     locals:  |r8|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r9|QWORD[.]  |rbx|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2345 block B64 null  <||@
  Comment 2345 1806 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2345 1808 NOP  <||@
  Comment 2346 1810 NOP  <||@
  Comment 2347 1812 NOP  <||@
  Comment 2348 1814 NOP  <||@
  Comment 2349 1816 NOP  <||@
  Comment 2350 1818 NOP  <||@
  Comment 2351 1820 NOP  <||@
  Comment 2352 1822 MOV x: [r15|QWORD + 1156] y: -67635 size: DWORD  <||@
  Comment 2363 1824 MOV x: [r15|QWORD + 1168] y: 20 size: QWORD  <||@
  Comment 2374 1826 DEOPT info [bci:0]  <||@
  Comment 2374 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2379 [rsi:0, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                 
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]   <||@
  Comment 2387 block B40 null  <||@
  Comment 2387 1118 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2387 1120 NOP  <||@
  Comment 2388 1122 NOP  <||@
  Comment 2389 1124 NOP  <||@
  Comment 2390 1126 r11|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 2397 1128 r10|DWORD = MOVE input: int[-86579|0xfffffffffffeadcd]  <||@
  Comment 2403 1140 JUMP ~outgoingValues: [] destination: B40 -> B63  <||@
  Comment 2405 block B59 null  <||@
  Comment 2405 1680 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2405 1682 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2410 1684 NOP  <||@
  Comment 2411 1686 NOP  <||@
  Comment 2412 1688 NOP  <||@
  Comment 2413 1690 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2420 1692 r10|DWORD = MOVE input: int[-150299|0xfffffffffffdb4e5]  <||@
  Comment 2426 1704 JUMP ~outgoingValues: [] destination: B59 -> B63  <||@
  Comment 2431 block B48 null  <||@
  Comment 2431 1366 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2431 1368 NOP  <||@
  Comment 2432 1370 NOP  <||@
  Comment 2433 1372 NOP  <||@
  Comment 2434 1374 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2441 1376 r10|DWORD = MOVE input: int[-132635|0xfffffffffffdf9e5]  <||@
  Comment 2447 1388 JUMP ~outgoingValues: [] destination: B48 -> B63  <||@
  Comment 2452 block B7 null  <||@
  Comment 2452 196 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2452 198 NOP  <||@
  Comment 2453 200 NOP  <||@
  Comment 2454 202 NOP  <||@
  Comment 2455 204 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2462 206 r10|DWORD = MOVE input: int[-160539|0xfffffffffffd8ce5]  <||@
  Comment 2468 218 JUMP ~outgoingValues: [] destination: B7 -> B63  <||@
  Comment 2473 block B9 null  <||@
  Comment 2473 232 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2473 234 NOP  <||@
  Comment 2474 236 NOP  <||@
  Comment 2475 238 NOP  <||@
  Comment 2476 240 r11|QWORD = MOVE input: long[660|0x294]  <||@
  Comment 2483 242 r10|DWORD = MOVE input: int[-225299|0xfffffffffffc8fed]  <||@
  Comment 2489 254 JUMP ~outgoingValues: [] destination: B9 -> B63  <||@
  Comment 2494 block B61 null  <||@
  Comment 2494 1732 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2494 1734 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2499 1736 NOP  <||@
  Comment 2500 1738 NOP  <||@
  Comment 2501 1740 NOP  <||@
  Comment 2502 1742 r11|QWORD = MOVE input: long[660|0x294]  <||@
  Comment 2509 1744 r10|DWORD = MOVE input: int[-224275|0xfffffffffffc93ed]  <||@
  Comment 2515 1756 JUMP ~outgoingValues: [] destination: B61 -> B63  <||@
  Comment 2520 block B60 null  <||@
  Comment 2520 1706 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2520 1708 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2525 1710 NOP  <||@
  Comment 2526 1712 NOP  <||@
  Comment 2527 1714 NOP  <||@
  Comment 2528 1716 r11|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 2535 1718 r10|DWORD = MOVE input: int[-144435|0xfffffffffffdcbcd]  <||@
  Comment 2541 1730 JUMP ~outgoingValues: [] destination: B60 -> B63  <||@
  Comment 2546 block B47 null  <||@
  Comment 2546 1340 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2546 1342 r11|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 2551 1344 r10|QWORD[.] = MOVE input: stack:96|QWORD[.] moveKind: QWORD  <||@
  Comment 2556 1346 NOP  <||@
  Comment 2557 1348 NOP  <||@
  Comment 2558 1350 NOP  <||@
  Comment 2559 1352 NOP  <||@
  Comment 2560 1354 NOP  <||@
  Comment 2561 1356 NOP  <||@
  Comment 2562 1358 NOP  <||@
  Comment 2563 1360 MOV x: [r15|QWORD + 1156] y: -139803 size: DWORD  <||@
  Comment 2574 1362 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2585 1364 DEOPT info [bci:31, 32, 7]  <||@
  Comment 2585 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2590 [r10:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r10|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |r11|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2598 block B62 null  <||@
  Comment 2598 1758 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2598 1760 stack:32|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2603 1762 NOP  <||@
  Comment 2604 1764 NOP  <||@
  Comment 2605 1766 NOP  <||@
  Comment 2606 1768 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2613 1770 r10|DWORD = MOVE input: int[-71195|0xfffffffffffee9e5]  <||@
  Comment 2619 1782 JUMP ~outgoingValues: [] destination: B62 -> B63  <||@
  Comment 2624 block B49 null  <||@
  Comment 2624 1390 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2624 1392 NOP  <||@
  Comment 2625 1394 NOP  <||@
  Comment 2626 1396 NOP  <||@
  Comment 2627 1398 r11|QWORD = MOVE input: long[4500|0x1194]  <||@
  Comment 2634 1400 r10|DWORD = MOVE input: int[-21555|0xffffffffffffabcd]  <||@
  Comment 2640 1412 JUMP ~outgoingValues: [] destination: B49 -> B63  <||@
  Comment 2650 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 2675 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 2703 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2708 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 2738 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2743 [rdx:0, rsi:0, r8:0, r10:0, stack:60, stack:64, stack:72]at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3           
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]   <||@
  Comment 2773 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2778 [rdx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2808 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2813 [rdx:0, rbx:0, rsi:0, rdi:0, r8:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2843 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2848 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2878 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2883 [rdx:0, rsi:0, r8:0, r10:0, stack:48, stack:60, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2913 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2918 [rdx:0, rbx:0, rsi:0, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2948 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2953 [rdx:0, rbx:0, rsi:0, r10:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 2983 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2988 [rcx:0, rdx:0, rbx:0, rsi:0, r10:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3018 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3023 [rdx:0, rsi:0, r9:0, r11:0, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3053 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3058 [rdx:0, rbx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3088 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3093 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3123 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3128 [rdx:0, rsi:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3158 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3163 [rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3193 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3198 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:120|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3228 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3233 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4         
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3263 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3268 [rdx:0, rsi:0, r10:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3298 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3303 [rdx:0, rbx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3333 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3338 [rdx:0, rsi:0, stack:32, stack:44, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:96|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:36|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3368 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3373 [rdx:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3403 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3408 [rdx:0, rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3438 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3443 [stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3473 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3478 [rsi:0, stack:32, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:96|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:80|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:32|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |-   <||@
  Comment 3486 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 3486 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 3492 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 3492 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
