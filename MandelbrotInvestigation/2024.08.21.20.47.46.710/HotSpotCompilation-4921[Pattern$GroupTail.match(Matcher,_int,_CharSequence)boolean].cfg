begin_compilation
  name " HotSpotCompilation-4921[java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-4921[java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence)]"
  date 1724269737576
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a1048 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a1048  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$GroupTail
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v1109 v1113 v1117 ?212 ?28 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v1160 v1157 v503 v402 ?157 ?880 ?28 ?881 v450 ?206 ?212 ?186 ?205 ?71 ?882 ?192 ?191 v566 ?116 ?201 ?879 ?121 ?140 v1108 v1112 v1155 v1156 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v491 v325 ?28 ?879 ?206 v503 ?71 v219 v554 v609 v566 ?121 ?140 v402 ?157 v438 v588 v450 ?191 ?192 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?879 ?28 v450 ?206 v503 ?71 ?191 ?192 v566 ?121 ?140 v402 ?157 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_1
code: ResolvedJavaMethodBytecode<Pattern$GroupTail.match(Matcher, int, CharSequence)>
localsSize: 7
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4991
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v901 a1048 i1050 i1052 v1055 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@~|@floating>@ <|@
tid v1108 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a1048 a1081 a1089 a1098 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1048 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: int[-65291|0xffffffffffff00f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: n# int[]
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: a1049 
=== Usages ===
a260 v1110 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1108 lastLocationAccess: - #next: a1049  <|@  <|@
f <@~|@floating>@ <|@
tid v1112 <|@
d <@d|@=== Debug Properties ===
displacement: 56
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a1049 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1049 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.groups
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 17]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1112 
lastLocationAccess: - 
=== Succesors ===
next: i1050 
=== Usages ===
a282 v1114 v1158 v1159 
=== Predecessor ===
a1048 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1112 lastLocationAccess: - #next: i1050  <|@  <|@
f <@~|@floating>@ <|@
tid v1110 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1048 
=== Succesors ===
=== Usages ===
i1050 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1048  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1050 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-67851|0xfffffffffffef6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1110 
lastLocationAccess: - 
=== Succesors ===
next: i1051 
=== Usages ===
v270 
=== Predecessor ===
a1049 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1110 lastLocationAccess: - #next: i1051  <|@  <|@
f <@~|@floating>@ <|@
tid v1109 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i1051 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1051 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupTail.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 5]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1109 
lastLocationAccess: - 
=== Succesors ===
next: v719 
=== Usages ===
j612 v270 
=== Predecessor ===
i1050 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1109 lastLocationAccess: - #next: v719  <|@  <|@
f <@~|@floating>@ <|@
tid v270 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1051 
y: i1050 
=== Succesors ===
=== Usages ===
v719 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1051 y: i1050  <|@  <|@
f <@~|@floating>@ <|@
tid j898 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 j937 j900 j900 j900 j978 j978 j937 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v719 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v270 
=== Succesors ===
trueSuccessor: v716 
falseSuccessor: v718 
=== Usages ===
=== Predecessor ===
i1051 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v270 #trueSuccessor: v716 #falseSuccessor: v718  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v716 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1052 
=== Usages ===
=== Predecessor ===
v719 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1052  <|@  <|@
f <@~|@floating>@ <|@
tid v1114 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1049 
=== Succesors ===
=== Usages ===
i1052 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1049  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1052 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-73483|0xfffffffffffee0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 24]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1114 
lastLocationAccess: - 
=== Succesors ===
next: i1053 
=== Usages ===
v318 v309 
=== Predecessor ===
v716 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1114 lastLocationAccess: - #next: i1053  <|@  <|@
f <@~|@floating>@ <|@
tid v1113 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i1053 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1053 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupTail.groupIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 21]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1113 
lastLocationAccess: - 
=== Succesors ===
next: v727 
=== Usages ===
v309 i26 j615 
=== Predecessor ===
i1052 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1113 lastLocationAccess: - #next: v727  <|@  <|@
f <@~|@floating>@ <|@
tid v309 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1053 
y: i1052 
=== Succesors ===
=== Usages ===
v727 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1053 y: i1052  <|@  <|@
f <@*|@fixed>@ <|@
tid v727 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v309 
=== Succesors ===
trueSuccessor: v724 
falseSuccessor: v726 
=== Usages ===
=== Predecessor ===
i1053 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v309 #trueSuccessor: v724 #falseSuccessor: v726  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v724 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v731 
=== Usages ===
v316 
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v731  <|@  <|@
f <@~|@floating>@ <|@
tid i17 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4996) [bci: 35]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
v214 i26 v35 i169 i98 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 60]
stamp: i32
=== Inputs ===
x: i1053 
y: i17 
=== Succesors ===
=== Usages ===
j616 v318 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i1053 y: i17  <|@  <|@
f <@~|@floating>@ <|@
tid v318 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i26 
y: i1052 
=== Succesors ===
=== Usages ===
v731 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i26 y: i1052  <|@  <|@
f <@*|@fixed>@ <|@
tid v731 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v318 
=== Succesors ===
trueSuccessor: v728 
falseSuccessor: v730 
=== Usages ===
=== Predecessor ===
v724 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v318 #trueSuccessor: v728 #falseSuccessor: v730  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v728 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1054 
=== Usages ===
v600 v325 
=== Predecessor ===
v731 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1054  <|@  <|@
f <@~|@floating>@ <|@
tid v1117 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a1054 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1054 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 64]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1117 
lastLocationAccess: - 
=== Succesors ===
next: v1055 
=== Usages ===
v1161 v1118 
=== Predecessor ===
v728 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1117 lastLocationAccess: - #next: v1055  <|@  <|@
f <@~|@floating>@ <|@
tid v1161 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1054 
=== Succesors ===
=== Usages ===
v1055 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1054  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1055 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-84235|0xfffffffffffeb6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1161 
lastLocationAccess: - 
=== Succesors ===
next: i1056 
=== Usages ===
v1015 
=== Predecessor ===
a1054 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1161 lastLocationAccess: - #next: i1056  <|@  <|@
f <@~|@floating>@ <|@
tid a260 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1048 
=== Succesors ===
=== Usages ===
v1111 a240 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1048  <|@  <|@
f <@~|@floating>@ <|@
tid j612 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1051 
=== Succesors ===
=== Usages ===
v1111 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1051  <|@  <|@
f <@~|@floating>@ <|@
tid v1111 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a260 
index: j612 
=== Succesors ===
=== Usages ===
i1056 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a260 index: j612  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1056 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1111 
lastLocationAccess: - 
=== Succesors ===
next: v851 
=== Usages ===
v10 v316 ?28 
=== Predecessor ===
v1055 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1111 lastLocationAccess: - #next: v851  <|@  <|@
f <@~|@floating>@ <|@
tid i9 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v10 v164 i70 v87 v93 i139 v158 ?157 ?205 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v10 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1056 
y: i9 
=== Succesors ===
=== Usages ===
v851 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i1056 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v851 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v10 
=== Succesors ===
trueSuccessor: v849 
falseSuccessor: v850 
=== Usages ===
=== Predecessor ===
i1056 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v10 #trueSuccessor: v849 #falseSuccessor: v850  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v849 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
stamp: void
=== Inputs ===
=== Succesors ===
next: v914 
=== Usages ===
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v914  <|@  <|@
f <@~|@floating>@ <|@
tid j283 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 21]
rawvalue: 20
stableDimension: 0
stamp: i64 [20]
stampKind: i64
value: long[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j900 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i915 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -217107
stableDimension: 0
stamp: i32 [-217107]
stampKind: i32
value: int[-217107|0xfffffffffffcafed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v914 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v849 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v850 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 16]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1057 
=== Usages ===
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1057  <|@  <|@
f <@~|@floating>@ <|@
tid a282 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 17]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1049 
=== Succesors ===
=== Usages ===
v1116 v1115 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1049  <|@  <|@
f <@~|@floating>@ <|@
tid j616 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i26 
=== Succesors ===
=== Usages ===
v1116 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v1116 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a282 
index: j616 
=== Succesors ===
=== Usages ===
v325 i1057 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a282 index: j616  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1057 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4996) [bci: 37]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1116 
lastLocationAccess: - 
=== Succesors ===
next: i1058 
=== Usages ===
?212 ?28 
=== Predecessor ===
v850 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1116 lastLocationAccess: - #next: i1058  <|@  <|@
f <@~|@floating>@ <|@
tid j615 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1053 
=== Succesors ===
=== Usages ===
v1115 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1053  <|@  <|@
f <@~|@floating>@ <|@
tid v1115 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a282 
index: j615 
=== Succesors ===
=== Usages ===
v316 i1058 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a282 index: j615  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1058 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 24]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1115 
lastLocationAccess: - 
=== Succesors ===
next: v316 
=== Usages ===
?212 ?28 
=== Predecessor ===
i1057 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1115 lastLocationAccess: - #next: v316  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v316 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v724 
address: v1115 
lastLocationAccess: - 
value: i1056 
stateAfter: - 
=== Succesors ===
next: v325 
=== Usages ===
=== Predecessor ===
i1058 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v724 address: v1115 lastLocationAccess: - value: i1056 stateAfter: - #next: v325  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v325 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v728 
address: v1116 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v54 
=== Usages ===
=== Predecessor ===
v316 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v728 address: v1116 lastLocationAccess: - value: i3 stateAfter: - #next: v54  <|@  <|@
tid ?28 <|@
d <@d|@=== Debug Properties ===
bci: 63
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Pattern$GroupTail.match(Matcher, int, CharSequence)>
localsSize: 7
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
sourceFile: Pattern.java
sourceLine: 5000
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i1056 i1058 i1057 
=== Succesors ===
=== Usages ===
v921 v1060 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i1056 i1058 i1057  <|@  <|@
f <@~|@floating>@ <|@
tid v1015 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1055 
=== Succesors ===
=== Usages ===
v54 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1055  <|@  <|@
f <@*|@fixed>@ <|@
tid v54 <|@
d <@d|@=== Debug Properties ===
hubs: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}]
keySuccessors: [I@760dc489
keys: [HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>, HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>]
profileData: PROFILED keyProbabilities: [0.6666871912931344, 0.3333128087068656, 0.0]
stamp: void
=== Inputs ===
value: v1015 
=== Succesors ===
successors: v41 v46 v49 
=== Usages ===
=== Predecessor ===
v325 >@ <|@
instruction <@TypeSwitch|@jdk.graal.compiler.nodes.java.TypeSwitchNode>@ value: v1015 #successors: v41 v46 v49  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v41 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: a1059 
=== Usages ===
=== Predecessor ===
v54 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1059  <|@  <|@
f <@~|@floating>@ <|@
tid v1118 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1054 
=== Succesors ===
=== Usages ===
a1059 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1054  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1059 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1118 
lastLocationAccess: - 
=== Succesors ===
next: v1060 
=== Usages ===
a332 v1119 v1120 v1123 v1162 
=== Predecessor ===
v41 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1118 lastLocationAccess: - #next: v1060  <|@  <|@
f <@~|@floating>@ <|@
tid v1162 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
v1060 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1060 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-85259|0xfffffffffffeb2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?28 
guard: - 
address: v1162 
lastLocationAccess: - 
=== Succesors ===
next: v743 
=== Usages ===
v1044 
=== Predecessor ===
a1059 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?28 guard: - address: v1162 lastLocationAccess: - #next: v743  <|@  <|@
f <@~|@floating>@ <|@
tid v1043 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1044 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1044 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1060 
y: v1043 
=== Succesors ===
=== Usages ===
v743 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1060 y: v1043  <|@  <|@
f <@*|@fixed>@ <|@
tid v743 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1044 
=== Succesors ===
trueSuccessor: v740 
falseSuccessor: v742 
=== Usages ===
=== Predecessor ===
v1060 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1044 #trueSuccessor: v740 #falseSuccessor: v742  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v740 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v68 
=== Usages ===
=== Predecessor ===
v743 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v68  <|@  <|@
f <@~|@floating>@ <|@
tid v1119 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
i1063 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
f <@~|@floating>@ <|@
tid a332 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1059 
=== Succesors ===
=== Usages ===
?121 ?192 ?71 ?206 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1059  <|@  <|@
f <@~|@floating>@ <|@
tid v1120 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
a1061 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
tid ?212 <|@
d <@d|@=== Debug Properties ===
bci: 70
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupTail.match(Matcher, int, CharSequence)>
localsSize: 7
locksSize: 0
sourceFile: Pattern.java
sourceLine: 5000
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 - - - i1058 i1057 
=== Succesors ===
=== Usages ===
?208 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 - - - i1058 i1057  <|@  <|@
tid ?208 <|@
d <@d|@=== Debug Properties ===
bci: 7
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?212 
=== Succesors ===
=== Usages ===
?71 ?121 ?192 ?206 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?212  <|@  <|@
f <@~|@floating>@ <|@
tid j945 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 3220
stableDimension: 0
stamp: i64 [3220]
stampKind: i64
value: long[3220|0xc94]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 j978 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j952 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 4500
stableDimension: 0
stamp: i64 [4500]
stampKind: i64
value: long[4500|0x1194]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 j978 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1045 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1046 v1047 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v68 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v69 
=== Predecessor ===
v740 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i70 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v69 
values: i9 i98 
=== Succesors ===
=== Usages ===
?71 v73 j619 ?206 v521 i98 ?121 ?192 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v69 values: i9 i98  <|@  <|@
f <@~|@floating>@ <|@
tid a240 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v69 
values: a260 a568 
=== Succesors ===
=== Usages ===
a241 v1149 v1142 v1141 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v69 values: a260 a568  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v69 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 21
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
osrLoop: false
peelings: 0
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v68 
=== Succesors ===
next: a1061 
=== Usages ===
i70 v89 v94 v99 a240 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v68 #next: a1061  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1061 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1120 
lastLocationAccess: - 
=== Succesors ===
next: i1062 
=== Usages ===
a339 v1121 
=== Predecessor ===
v69 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1120 lastLocationAccess: - #next: i1062  <|@  <|@
tid ?71 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
v938 i1062 a1066 i1093 v1067 v1096 i1084 v1087 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
f <@~|@floating>@ <|@
tid v1121 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1061 
=== Succesors ===
=== Usages ===
i1062 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1061  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1062 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-87307|0xfffffffffffeaaf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1121 
lastLocationAccess: - 
=== Succesors ===
next: v751 
=== Usages ===
v521 
=== Predecessor ===
a1061 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1121 lastLocationAccess: - #next: v751  <|@  <|@
f <@~|@floating>@ <|@
tid v521 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i70 
y: i1062 
=== Succesors ===
=== Usages ===
v751 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i70 y: i1062  <|@  <|@
f <@*|@fixed>@ <|@
tid v751 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v521 
=== Succesors ===
trueSuccessor: v748 
falseSuccessor: v750 
=== Usages ===
=== Predecessor ===
i1062 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v521 #trueSuccessor: v748 #falseSuccessor: v750  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v748 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1063 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1063  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1063 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1119 
lastLocationAccess: - 
=== Succesors ===
next: v855 
=== Usages ===
v73 
=== Predecessor ===
v748 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1119 lastLocationAccess: - #next: v855  <|@  <|@
f <@~|@floating>@ <|@
tid v73 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i70 
y: i1063 
=== Succesors ===
=== Usages ===
v855 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i70 y: i1063  <|@  <|@
f <@*|@fixed>@ <|@
tid v855 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v73 
=== Succesors ===
trueSuccessor: v853 
falseSuccessor: v854 
=== Usages ===
=== Predecessor ===
i1063 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v73 #trueSuccessor: v853 #falseSuccessor: v854  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v853 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1064 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1064  <|@  <|@
f <@~|@floating>@ <|@
tid a339 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1061 
=== Succesors ===
=== Usages ===
v1122 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1061  <|@  <|@
f <@~|@floating>@ <|@
tid j619 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i70 
=== Succesors ===
=== Usages ===
v1122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i70  <|@  <|@
f <@~|@floating>@ <|@
tid v1122 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a339 
index: j619 
=== Succesors ===
=== Usages ===
a1064 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a339 index: j619  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1064 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1122 
lastLocationAccess: - 
=== Succesors ===
next: v83 
=== Usages ===
v620 a529 v1148 v1150 v1168 
=== Predecessor ===
v853 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1122 lastLocationAccess: - #next: v83  <|@  <|@
f <@~|@floating>@ <|@
tid v620 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1064 
=== Succesors ===
=== Usages ===
v83 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1064  <|@  <|@
f <@~|@floating>@ <|@
tid v1141 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a240 
index: - 
=== Succesors ===
=== Usages ===
i1084 i1093 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a240 index: -  <|@  <|@
f <@*|@fixed>@ <|@
tid v83 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v620 
=== Succesors ===
trueSuccessor: v82 
falseSuccessor: v81 
=== Usages ===
=== Predecessor ===
a1064 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v620 #trueSuccessor: v82 #falseSuccessor: v81  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v82 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1065 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1065  <|@  <|@
f <@~|@floating>@ <|@
tid v1123 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
a1065 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1065 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1123 
lastLocationAccess: - 
=== Succesors ===
next: a1066 
=== Usages ===
v1124 
=== Predecessor ===
v82 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1123 lastLocationAccess: - #next: a1066  <|@  <|@
f <@~|@floating>@ <|@
tid v1124 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1065 
=== Succesors ===
=== Usages ===
a1066 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1065  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1066 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-91915|0xfffffffffffe98f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1124 
lastLocationAccess: - 
=== Succesors ===
next: v1067 
=== Usages ===
a363 v1125 v1126 v1129 v1143 v1163 
=== Predecessor ===
a1065 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1124 lastLocationAccess: - #next: v1067  <|@  <|@
f <@~|@floating>@ <|@
tid v1163 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
v1067 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1067 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-93195|0xfffffffffffe93f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1163 
lastLocationAccess: - 
=== Succesors ===
next: v134 
=== Usages ===
v1021 
=== Predecessor ===
a1066 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1163 lastLocationAccess: - #next: v134  <|@  <|@
f <@~|@floating>@ <|@
tid v1021 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1067 
=== Succesors ===
=== Usages ===
v134 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1067  <|@  <|@
f <@~|@floating>@ <|@
tid v1125 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
i1070 i1085 i1091 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@~|@floating>@ <|@
tid a363 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1066 
=== Succesors ===
=== Usages ===
?205 ?157 ?879 ?140 ?201 ?191 ?882 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1066  <|@  <|@
f <@*|@fixed>@ <|@
tid v134 <|@
d <@d|@=== Debug Properties ===
hubs: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}]
keySuccessors: [I@67c2b0a5
keys: [HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>, HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>]
profileData: PROFILED keyProbabilities: [0.6666288834409075, 0.3333711165590924, 0.0]
stamp: void
=== Inputs ===
value: v1021 
=== Succesors ===
successors: v124 v126 v129 
=== Usages ===
=== Predecessor ===
v1067 >@ <|@
instruction <@TypeSwitch|@jdk.graal.compiler.nodes.java.TypeSwitchNode>@ value: v1021 #successors: v124 v126 v129  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v137 
=== Usages ===
=== Predecessor ===
v134 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v137  <|@  <|@
f <@~|@floating>@ <|@
tid v1126 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
a1068 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@*|@fixed>@ <|@
tid v137 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v138 
=== Predecessor ===
v124 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i139 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v138 
values: i9 i169 
=== Succesors ===
=== Usages ===
?140 v142 j622 ?157 v404 i169 ?191 ?879 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v138 values: i9 i169  <|@  <|@
f <@~|@floating>@ <|@
tid a241 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v138 
values: a240 a452 
=== Succesors ===
=== Usages ===
v1134 v1135 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v138 values: a240 a452  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v138 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 94
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
osrLoop: false
peelings: 0
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v137 
=== Succesors ===
next: a1068 
=== Usages ===
i139 v160 v165 v170 a241 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v137 #next: a1068  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1068 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1126 
lastLocationAccess: - 
=== Succesors ===
next: i1069 
=== Usages ===
a369 v1127 
=== Predecessor ===
v138 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1126 lastLocationAccess: - #next: i1069  <|@  <|@
tid ?192 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
?140 ?157 ?191 ?879 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
tid ?140 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
v979 i1069 a1073 i1076 v1074 v1079 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: a363 a2 i3 a4 i139  <|@  <|@
f <@~|@floating>@ <|@
tid v1127 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1068 
=== Succesors ===
=== Usages ===
i1069 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1068  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1069 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-94987|0xfffffffffffe8cf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1127 
lastLocationAccess: - 
=== Succesors ===
next: v767 
=== Usages ===
v404 
=== Predecessor ===
a1068 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1127 lastLocationAccess: - #next: v767  <|@  <|@
f <@~|@floating>@ <|@
tid v404 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i139 
y: i1069 
=== Succesors ===
=== Usages ===
v767 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i139 y: i1069  <|@  <|@
f <@*|@fixed>@ <|@
tid v767 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v404 
=== Succesors ===
trueSuccessor: v764 
falseSuccessor: v766 
=== Usages ===
=== Predecessor ===
i1069 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v404 #trueSuccessor: v764 #falseSuccessor: v766  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v764 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1070 
=== Usages ===
=== Predecessor ===
v767 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1070  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1070 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1125 
lastLocationAccess: - 
=== Succesors ===
next: v859 
=== Usages ===
v142 
=== Predecessor ===
v764 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1125 lastLocationAccess: - #next: v859  <|@  <|@
f <@~|@floating>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i139 
y: i1070 
=== Succesors ===
=== Usages ===
v859 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i139 y: i1070  <|@  <|@
f <@*|@fixed>@ <|@
tid v859 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v142 
=== Succesors ===
trueSuccessor: v857 
falseSuccessor: v858 
=== Usages ===
=== Predecessor ===
i1070 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v142 #trueSuccessor: v857 #falseSuccessor: v858  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v857 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1071 
=== Usages ===
=== Predecessor ===
v859 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1071  <|@  <|@
f <@~|@floating>@ <|@
tid a369 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1068 
=== Succesors ===
=== Usages ===
v1128 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1068  <|@  <|@
f <@~|@floating>@ <|@
tid j622 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i139 
=== Succesors ===
=== Usages ===
v1128 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i139  <|@  <|@
f <@~|@floating>@ <|@
tid v1128 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a369 
index: j622 
=== Succesors ===
=== Usages ===
a1071 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a369 index: j622  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1071 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1128 
lastLocationAccess: - 
=== Succesors ===
next: v152 
=== Usages ===
v623 a412 v1133 v1136 v1165 
=== Predecessor ===
v857 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1128 lastLocationAccess: - #next: v152  <|@  <|@
f <@~|@floating>@ <|@
tid v623 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1071 
=== Succesors ===
=== Usages ===
v152 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1071  <|@  <|@
f <@*|@fixed>@ <|@
tid v152 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v623 
=== Succesors ===
trueSuccessor: v151 
falseSuccessor: v150 
=== Usages ===
=== Predecessor ===
a1071 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v623 #trueSuccessor: v151 #falseSuccessor: v150  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v151 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1072 
=== Usages ===
=== Predecessor ===
v152 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1072  <|@  <|@
f <@~|@floating>@ <|@
tid v1129 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
a1072 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1072 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1129 
lastLocationAccess: - 
=== Succesors ===
next: a1073 
=== Usages ===
v1130 
=== Predecessor ===
v151 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1129 lastLocationAccess: - #next: a1073  <|@  <|@
f <@~|@floating>@ <|@
tid v1130 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1072 
=== Succesors ===
=== Usages ===
a1073 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1072  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1073 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-99339|0xfffffffffffe7bf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1130 
lastLocationAccess: - 
=== Succesors ===
next: v1074 
=== Usages ===
a392 v1164 
=== Predecessor ===
a1072 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1130 lastLocationAccess: - #next: v1074  <|@  <|@
f <@~|@floating>@ <|@
tid v1164 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1073 
=== Succesors ===
=== Usages ===
v1074 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1073  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1074 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-100875|0xfffffffffffe75f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1164 
lastLocationAccess: - 
=== Succesors ===
next: v399 
=== Usages ===
v1024 
=== Predecessor ===
a1073 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1164 lastLocationAccess: - #next: v399  <|@  <|@
f <@~|@floating>@ <|@
tid v1024 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1074 
=== Succesors ===
=== Usages ===
v1131 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1074  <|@  <|@
f <@~|@floating>@ <|@
tid v1131 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1024 
index: - 
=== Succesors ===
=== Usages ===
v399 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1024 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v399 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1131 
lastLocationAccess: - 
=== Succesors ===
next: j401 
=== Usages ===
v1132 v402 
=== Predecessor ===
v1074 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1131 lastLocationAccess: - #next: j401  <|@  <|@
f <@~|@floating>@ <|@
tid v1132 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v399 
index: - 
=== Succesors ===
=== Usages ===
j401 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v399 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j401 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1132 
lastLocationAccess: - 
=== Succesors ===
next: i156 
=== Usages ===
v402 
=== Predecessor ===
v399 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1132 lastLocationAccess: - #next: i156  <|@  <|@
f <@~|@floating>@ <|@
tid a392 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1073 
=== Succesors ===
=== Usages ===
v402 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1073  <|@  <|@
tid v402 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j401 
metaspaceMethod: v399 
arguments: a392 a2 i3 a4 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j401 metaspaceMethod: v399 arguments: a392 a2 i3 a4  <|@  <|@
tid ?879 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: a363 a2 i3 a4 i139  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v402 
stateDuring: ?879 
=== Succesors ===
next: v863 
=== Usages ===
v158 
=== Predecessor ===
j401 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v402 stateDuring: ?879 #next: v863  <|@  <|@
f <@~|@floating>@ <|@
tid v158 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i156 
y: i9 
=== Succesors ===
=== Usages ===
v863 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i156 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v863 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v158 
=== Succesors ===
trueSuccessor: v862 
falseSuccessor: v160 
=== Usages ===
=== Predecessor ===
i156 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v158 #trueSuccessor: v862 #falseSuccessor: v160  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v862 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v861 
=== Usages ===
=== Predecessor ===
v863 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v861  <|@  <|@
tid ?157 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: i9 a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
v861 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: i9 a363 a2 i3 a4 i139  <|@  <|@
f <@*|@fixed>@ <|@
tid v861 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: UnreachedCode
speculation: {0x0000000000000f14[index: 120, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?157 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v862 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?157  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v150 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1075 
=== Usages ===
=== Predecessor ===
v152 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1075  <|@  <|@
f <@~|@floating>@ <|@
tid v1165 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1071 
=== Succesors ===
=== Usages ===
v1075 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1071  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1075 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: v779 
=== Usages ===
v1046 
=== Predecessor ===
v150 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1165 lastLocationAccess: - #next: v779  <|@  <|@
f <@~|@floating>@ <|@
tid v1046 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1075 
y: v1045 
=== Succesors ===
=== Usages ===
v779 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1075 y: v1045  <|@  <|@
f <@*|@fixed>@ <|@
tid v779 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1046 
=== Succesors ===
trueSuccessor: v776 
falseSuccessor: v778 
=== Usages ===
=== Predecessor ===
v1075 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1046 #trueSuccessor: v776 #falseSuccessor: v778  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v776 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1076 
=== Usages ===
=== Predecessor ===
v779 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1076  <|@  <|@
f <@~|@floating>@ <|@
tid v1134 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a241 
index: - 
=== Succesors ===
=== Usages ===
i1076 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a241 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1076 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-107019|0xfffffffffffe5df5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1134 
lastLocationAccess: - 
=== Succesors ===
next: i1077 
=== Usages ===
v431 
=== Predecessor ===
v776 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1134 lastLocationAccess: - #next: i1077  <|@  <|@
f <@~|@floating>@ <|@
tid v1133 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1071 
=== Succesors ===
=== Usages ===
i1077 i1083 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1071  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1077 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1133 
lastLocationAccess: - 
=== Succesors ===
next: v787 
=== Usages ===
v431 j627 
=== Predecessor ===
i1076 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1133 lastLocationAccess: - #next: v787  <|@  <|@
f <@~|@floating>@ <|@
tid v431 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1077 
y: i1076 
=== Succesors ===
=== Usages ===
v787 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1077 y: i1076  <|@  <|@
f <@*|@fixed>@ <|@
tid v787 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v431 
=== Succesors ===
trueSuccessor: v784 
falseSuccessor: v786 
=== Usages ===
=== Predecessor ===
i1077 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v431 #trueSuccessor: v784 #falseSuccessor: v786  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v784 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1078 
=== Usages ===
v438 
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1078  <|@  <|@
f <@~|@floating>@ <|@
tid v1136 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1071 
=== Succesors ===
=== Usages ===
a1078 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1071  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1078 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1136 
lastLocationAccess: - 
=== Succesors ===
next: v1079 
=== Usages ===
a441 v1166 
=== Predecessor ===
v784 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1136 lastLocationAccess: - #next: v1079  <|@  <|@
f <@~|@floating>@ <|@
tid v1166 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1078 
=== Succesors ===
=== Usages ===
v1079 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1078  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1079 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-113419|0xfffffffffffe44f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1166 
lastLocationAccess: - 
=== Succesors ===
next: i1080 
=== Usages ===
v1031 
=== Predecessor ===
a1078 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1166 lastLocationAccess: - #next: i1080  <|@  <|@
f <@~|@floating>@ <|@
tid j627 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1077 
=== Succesors ===
=== Usages ===
v1135 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1077  <|@  <|@
f <@~|@floating>@ <|@
tid v1135 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a241 
index: j627 
=== Succesors ===
=== Usages ===
v438 i1080 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a241 index: j627  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1080 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1135 
lastLocationAccess: - 
=== Succesors ===
next: v438 
=== Usages ===
?880 ?186 v466 
=== Predecessor ===
v1079 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1135 lastLocationAccess: - #next: v438  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v438 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v784 
address: v1135 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v447 
=== Usages ===
=== Predecessor ===
i1080 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v784 address: v1135 lastLocationAccess: - value: i3 stateAfter: - #next: v447  <|@  <|@
f <@~|@floating>@ <|@
tid v1031 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1079 
=== Succesors ===
=== Usages ===
v1137 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1079  <|@  <|@
f <@~|@floating>@ <|@
tid v1137 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1031 
index: - 
=== Succesors ===
=== Usages ===
v447 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1031 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v447 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1137 
lastLocationAccess: - 
=== Succesors ===
next: j449 
=== Usages ===
v1138 v450 
=== Predecessor ===
v438 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1137 lastLocationAccess: - #next: j449  <|@  <|@
f <@~|@floating>@ <|@
tid v1138 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v447 
index: - 
=== Succesors ===
=== Usages ===
j449 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v447 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j449 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1138 
lastLocationAccess: - 
=== Succesors ===
next: i185 
=== Usages ===
v450 
=== Predecessor ===
v447 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1138 lastLocationAccess: - #next: i185  <|@  <|@
f <@~|@floating>@ <|@
tid a441 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1078 
=== Succesors ===
=== Usages ===
v450 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1078  <|@  <|@
tid v450 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j449 
metaspaceMethod: v447 
arguments: a441 a2 i3 a4 
=== Succesors ===
=== Usages ===
i185 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j449 metaspaceMethod: v447 arguments: a441 a2 i3 a4  <|@  <|@
tid ?191 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
?880 ?186 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: a363 a2 i3 a4 i139  <|@  <|@
f <@~|@floating>@ <|@
tid a412 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1071 
=== Succesors ===
=== Usages ===
?186 ?880 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1071  <|@  <|@
tid ?880 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?191 
values: a412 a2 - - i1080 
=== Succesors ===
=== Usages ===
i185 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?191 values: a412 a2 - - i1080  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i185 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v450 
stateDuring: ?880 
=== Succesors ===
next: a1081 
=== Usages ===
v164 ?186 
=== Predecessor ===
j449 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v450 stateDuring: ?880 #next: a1081  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1081 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: i1082 
=== Usages ===
a452 v1139 
=== Predecessor ===
i185 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1108 lastLocationAccess: - #next: i1082  <|@  <|@
tid ?186 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?191 
values: i185 a412 a2 - - i1080 
=== Succesors ===
=== Usages ===
v1171 i1082 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?191 values: i185 a412 a2 - - i1080  <|@  <|@
f <@~|@floating>@ <|@
tid v1139 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1081 
=== Succesors ===
=== Usages ===
i1082 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1081  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1082 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-116491|0xfffffffffffe38f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?186 
guard: - 
address: v1139 
lastLocationAccess: - 
=== Succesors ===
next: i1083 
=== Usages ===
v459 
=== Predecessor ===
a1081 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?186 guard: - address: v1139 lastLocationAccess: - #next: i1083  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1083 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1133 
lastLocationAccess: - 
=== Succesors ===
next: v799 
=== Usages ===
j628 v459 
=== Predecessor ===
i1082 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1133 lastLocationAccess: - #next: v799  <|@  <|@
f <@~|@floating>@ <|@
tid v459 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1083 
y: i1082 
=== Succesors ===
=== Usages ===
v799 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1083 y: i1082  <|@  <|@
f <@*|@fixed>@ <|@
tid v799 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v459 
=== Succesors ===
trueSuccessor: v796 
falseSuccessor: v798 
=== Usages ===
=== Predecessor ===
i1083 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v459 #trueSuccessor: v796 #falseSuccessor: v798  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v796 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v466 
=== Usages ===
v466 
=== Predecessor ===
v799 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v466  <|@  <|@
f <@~|@floating>@ <|@
tid a452 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1081 
=== Succesors ===
=== Usages ===
v1140 a241 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1081  <|@  <|@
f <@~|@floating>@ <|@
tid j628 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1083 
=== Succesors ===
=== Usages ===
v1140 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1083  <|@  <|@
f <@~|@floating>@ <|@
tid v1140 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a452 
index: j628 
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a452 index: j628  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v796 
address: v1140 
lastLocationAccess: - 
value: i1080 
stateAfter: - 
=== Succesors ===
next: v168 
=== Usages ===
=== Predecessor ===
v796 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v796 address: v1140 lastLocationAccess: - value: i1080 stateAfter: - #next: v168  <|@  <|@
f <@~|@floating>@ <|@
tid v164 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i185 
y: i9 
=== Succesors ===
=== Usages ===
v168 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i185 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v168 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v164 
=== Succesors ===
trueSuccessor: v167 
falseSuccessor: v165 
=== Usages ===
=== Predecessor ===
v466 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v164 #trueSuccessor: v167 #falseSuccessor: v165  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v167 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v170 
=== Usages ===
=== Predecessor ===
v168 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v170  <|@  <|@
f <@~|@floating>@ <|@
tid i169 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
=== Inputs ===
x: i139 
y: i17 
=== Succesors ===
=== Usages ===
i139 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i139 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v170 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
loopBegin: v138 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v167 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v138  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v138 
=== Succesors ===
next: v207 
=== Usages ===
=== Predecessor ===
v168 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v138 #next: v207  <|@  <|@
f <@*|@fixed>@ <|@
tid v207 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v874 
=== Predecessor ===
v165 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v160 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v138 
=== Succesors ===
next: v125 
=== Usages ===
=== Predecessor ===
v863 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v138 #next: v125  <|@  <|@
f <@*|@fixed>@ <|@
tid v125 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v874 
=== Predecessor ===
v160 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v798 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1171 
=== Usages ===
=== Predecessor ===
v799 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1171  <|@  <|@
f <@*|@fixed>@ <|@
tid v1171 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 460
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?186 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v798 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?186  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v786 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v994 
=== Usages ===
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v994  <|@  <|@
f <@~|@floating>@ <|@
tid i995 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -110619
stableDimension: 0
stamp: i32 [-110619]
stampKind: i32
value: int[-110619|0xfffffffffffe4fe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v994 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v786 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v778 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v990 
=== Usages ===
=== Predecessor ===
v779 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v990  <|@  <|@
f <@~|@floating>@ <|@
tid i991 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -106035
stableDimension: 0
stamp: i32 [-106035]
stampKind: i32
value: int[-106035|0xfffffffffffe61cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v990 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v778 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v858 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v984 
=== Usages ===
=== Predecessor ===
v859 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v984  <|@  <|@
f <@~|@floating>@ <|@
tid i985 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -219155
stableDimension: 0
stamp: i32 [-219155]
stampKind: i32
value: int[-219155|0xfffffffffffca7ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v984 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v858 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v766 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v982 
=== Usages ===
=== Predecessor ===
v767 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v982  <|@  <|@
f <@~|@floating>@ <|@
tid i983 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -96283
stableDimension: 0
stamp: i32 [-96283]
stampKind: i32
value: int[-96283|0xfffffffffffe87e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v982 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v766 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i977 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [-219155 - -96283] bits:1...1x0xxx0xxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v974 
values: i983 i985 i991 i995 
=== Succesors ===
=== Usages ===
v979 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v974 values: i983 i985 i991 i995  <|@  <|@
f <@~|@floating>@ <|@
tid j978 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64 [0 - 4500] bits:0...0xxx0xx00x0x00
valueDescription: i64
=== Inputs ===
merge: v974 
values: j898 j945 j952 j898 
=== Succesors ===
=== Usages ===
v979 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v974 values: j898 j945 j952 j898  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v974 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v982 v984 v990 v994 
=== Succesors ===
next: v979 
=== Usages ===
i977 j978 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v982 v984 v990 v994 #next: v979  <|@  <|@
f <@*|@fixed>@ <|@
tid v979 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateBefore: ?140 
actionAndReason: i977 
speculation: j978 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v974 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?140 actionAndReason: i977 speculation: j978  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v126 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: i1084 
=== Usages ===
=== Predecessor ===
v134 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1084  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1084 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-120587|0xfffffffffffe28f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1141 
lastLocationAccess: - 
=== Succesors ===
next: i1085 
=== Usages ===
v484 
=== Predecessor ===
v126 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1141 lastLocationAccess: - #next: i1085  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1085 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1125 
lastLocationAccess: - 
=== Succesors ===
next: v807 
=== Usages ===
v484 j630 
=== Predecessor ===
i1084 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1125 lastLocationAccess: - #next: v807  <|@  <|@
f <@~|@floating>@ <|@
tid v484 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1085 
y: i1084 
=== Succesors ===
=== Usages ===
v807 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1085 y: i1084  <|@  <|@
f <@*|@fixed>@ <|@
tid v807 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v484 
=== Succesors ===
trueSuccessor: v804 
falseSuccessor: v806 
=== Usages ===
=== Predecessor ===
i1085 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v484 #trueSuccessor: v804 #falseSuccessor: v806  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v804 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1086 
=== Usages ===
v491 
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1086  <|@  <|@
f <@~|@floating>@ <|@
tid v1143 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
a1086 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1086 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1143 
lastLocationAccess: - 
=== Succesors ===
next: v1087 
=== Usages ===
a494 v1167 
=== Predecessor ===
v804 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1143 lastLocationAccess: - #next: v1087  <|@  <|@
f <@~|@floating>@ <|@
tid v1167 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1086 
=== Succesors ===
=== Usages ===
v1087 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1086  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1087 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-126987|0xfffffffffffe0ff5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1167 
lastLocationAccess: - 
=== Succesors ===
next: i1088 
=== Usages ===
v1035 
=== Predecessor ===
a1086 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1167 lastLocationAccess: - #next: i1088  <|@  <|@
f <@~|@floating>@ <|@
tid j630 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1085 
=== Succesors ===
=== Usages ===
v1142 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1085  <|@  <|@
f <@~|@floating>@ <|@
tid v1142 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a240 
index: j630 
=== Succesors ===
=== Usages ===
v491 i1088 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a240 index: j630  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1088 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1142 
lastLocationAccess: - 
=== Succesors ===
next: v491 
=== Usages ===
?882 ?201 v519 ?205 
=== Predecessor ===
v1087 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1142 lastLocationAccess: - #next: v491  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v491 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v804 
address: v1142 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v500 
=== Usages ===
=== Predecessor ===
i1088 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v804 address: v1142 lastLocationAccess: - value: i3 stateAfter: - #next: v500  <|@  <|@
f <@~|@floating>@ <|@
tid v1035 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1087 
=== Succesors ===
=== Usages ===
v1144 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1087  <|@  <|@
f <@~|@floating>@ <|@
tid v1144 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1035 
index: - 
=== Succesors ===
=== Usages ===
v500 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1035 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v500 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1144 
lastLocationAccess: - 
=== Succesors ===
next: j502 
=== Usages ===
v1145 v503 
=== Predecessor ===
v491 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1144 lastLocationAccess: - #next: j502  <|@  <|@
f <@~|@floating>@ <|@
tid v1145 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v500 
index: - 
=== Succesors ===
=== Usages ===
j502 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v500 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j502 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1145 
lastLocationAccess: - 
=== Succesors ===
next: i200 
=== Usages ===
v503 
=== Predecessor ===
v500 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1145 lastLocationAccess: - #next: i200  <|@  <|@
f <@~|@floating>@ <|@
tid a494 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1086 
=== Succesors ===
=== Usages ===
v503 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1086  <|@  <|@
tid v503 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j502 
metaspaceMethod: v500 
arguments: a494 a2 i3 a4 
=== Succesors ===
=== Usages ===
i200 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j502 metaspaceMethod: v500 arguments: a494 a2 i3 a4  <|@  <|@
tid ?206 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
?882 ?201 ?205 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
tid ?882 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?206 
values: a363 a2 - - i1088 
=== Succesors ===
=== Usages ===
i200 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?206 values: a363 a2 - - i1088  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i200 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v503 
stateDuring: ?882 
=== Succesors ===
next: a1089 
=== Usages ===
v87 ?201 
=== Predecessor ===
j502 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v503 stateDuring: ?882 #next: a1089  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1089 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: i1090 
=== Usages ===
a505 v1146 
=== Predecessor ===
i200 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1108 lastLocationAccess: - #next: i1090  <|@  <|@
tid ?201 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?206 
values: i200 a363 a2 - - i1088 
=== Succesors ===
=== Usages ===
v1172 i1090 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?206 values: i200 a363 a2 - - i1088  <|@  <|@
f <@~|@floating>@ <|@
tid v1146 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1089 
=== Succesors ===
=== Usages ===
i1090 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1089  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1090 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-130059|0xfffffffffffe03f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?201 
guard: - 
address: v1146 
lastLocationAccess: - 
=== Succesors ===
next: i1091 
=== Usages ===
v512 
=== Predecessor ===
a1089 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?201 guard: - address: v1146 lastLocationAccess: - #next: i1091  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1091 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1125 
lastLocationAccess: - 
=== Succesors ===
next: v819 
=== Usages ===
j631 v512 
=== Predecessor ===
i1090 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1125 lastLocationAccess: - #next: v819  <|@  <|@
f <@~|@floating>@ <|@
tid v512 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1091 
y: i1090 
=== Succesors ===
=== Usages ===
v819 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1091 y: i1090  <|@  <|@
f <@*|@fixed>@ <|@
tid v819 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v512 
=== Succesors ===
trueSuccessor: v816 
falseSuccessor: v818 
=== Usages ===
=== Predecessor ===
i1091 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v512 #trueSuccessor: v816 #falseSuccessor: v818  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v816 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v519 
=== Usages ===
v519 
=== Predecessor ===
v819 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v519  <|@  <|@
f <@~|@floating>@ <|@
tid a505 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1089 
=== Succesors ===
=== Usages ===
v1147 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1089  <|@  <|@
f <@~|@floating>@ <|@
tid j631 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1091 
=== Succesors ===
=== Usages ===
v1147 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1091  <|@  <|@
f <@~|@floating>@ <|@
tid v1147 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a505 
index: j631 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a505 index: j631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v519 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v816 
address: v1147 
lastLocationAccess: - 
value: i1088 
stateAfter: - 
=== Succesors ===
next: v868 
=== Usages ===
=== Predecessor ===
v816 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v816 address: v1147 lastLocationAccess: - value: i1088 stateAfter: - #next: v868  <|@  <|@
f <@~|@floating>@ <|@
tid v87 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i200 
y: i9 
=== Succesors ===
=== Usages ===
v868 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i200 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v868 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v87 
=== Succesors ===
trueSuccessor: v867 
falseSuccessor: v875 
=== Usages ===
=== Predecessor ===
v519 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v87 #trueSuccessor: v867 #falseSuccessor: v875  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v867 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v866 
=== Usages ===
=== Predecessor ===
v868 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v866  <|@  <|@
tid ?205 <|@
d <@d|@=== Debug Properties ===
bci: 44
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4971
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?206 
values: a363 a2 - - i1088 i9 
=== Succesors ===
=== Usages ===
v866 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?206 values: a363 a2 - - i1088 i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v866 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: UnreachedCode
speculation: {0x0000000000000f14[index: 120, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?205 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v867 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?205  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v875 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v876 
=== Usages ===
=== Predecessor ===
v868 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v876  <|@  <|@
f <@*|@fixed>@ <|@
tid v876 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v874 
=== Predecessor ===
v875 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v874 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v876 v125 v207 
=== Succesors ===
next: v89 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v876 v125 v207 #next: v89  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v818 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1172 
=== Usages ===
=== Predecessor ===
v819 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1172  <|@  <|@
f <@*|@fixed>@ <|@
tid v1172 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 513
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?201 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v818 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?201  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v806 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v964 
=== Usages ===
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v964  <|@  <|@
f <@~|@floating>@ <|@
tid i965 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -124187
stableDimension: 0
stamp: i32 [-124187]
stampKind: i32
value: int[-124187|0xfffffffffffe1ae5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v964 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v806 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v129 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v959 
=== Usages ===
=== Predecessor ===
v134 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v959  <|@  <|@
f <@~|@floating>@ <|@
tid j961 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 7060
stableDimension: 0
stamp: i64 [7060]
stampKind: i64
value: long[7060|0x1b94]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i960 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -32819
stableDimension: 0
stamp: i32 [-32819]
stampKind: i32
value: int[-32819|0xffffffffffff7fcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v959 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v129 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v81 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1092 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1092  <|@  <|@
f <@~|@floating>@ <|@
tid v1168 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1064 
=== Succesors ===
=== Usages ===
v1092 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1064  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1092 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1168 
lastLocationAccess: - 
=== Succesors ===
next: v823 
=== Usages ===
v1047 
=== Predecessor ===
v81 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1168 lastLocationAccess: - #next: v823  <|@  <|@
f <@~|@floating>@ <|@
tid v1047 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1092 
y: v1045 
=== Succesors ===
=== Usages ===
v823 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1092 y: v1045  <|@  <|@
f <@*|@fixed>@ <|@
tid v823 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1047 
=== Succesors ===
trueSuccessor: v820 
falseSuccessor: v822 
=== Usages ===
=== Predecessor ===
v1092 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1047 #trueSuccessor: v820 #falseSuccessor: v822  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v820 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1093 
=== Usages ===
=== Predecessor ===
v823 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1093 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-136715|0xfffffffffffde9f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1141 
lastLocationAccess: - 
=== Succesors ===
next: i1094 
=== Usages ===
v547 
=== Predecessor ===
v820 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1141 lastLocationAccess: - #next: i1094  <|@  <|@
f <@~|@floating>@ <|@
tid v1148 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1064 
=== Succesors ===
=== Usages ===
i1094 i1100 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1064  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1094 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1148 
lastLocationAccess: - 
=== Succesors ===
next: v831 
=== Usages ===
v547 j635 
=== Predecessor ===
i1093 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1148 lastLocationAccess: - #next: v831  <|@  <|@
f <@~|@floating>@ <|@
tid v547 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1094 
y: i1093 
=== Succesors ===
=== Usages ===
v831 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1094 y: i1093  <|@  <|@
f <@*|@fixed>@ <|@
tid v831 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v547 
=== Succesors ===
trueSuccessor: v828 
falseSuccessor: v830 
=== Usages ===
=== Predecessor ===
i1094 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v547 #trueSuccessor: v828 #falseSuccessor: v830  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v828 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1095 
=== Usages ===
v554 
=== Predecessor ===
v831 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1095  <|@  <|@
f <@~|@floating>@ <|@
tid v1150 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1064 
=== Succesors ===
=== Usages ===
a1095 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1064  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1095 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1150 
lastLocationAccess: - 
=== Succesors ===
next: v1096 
=== Usages ===
a557 v1169 
=== Predecessor ===
v828 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1150 lastLocationAccess: - #next: v1096  <|@  <|@
f <@~|@floating>@ <|@
tid v1169 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1095 
=== Succesors ===
=== Usages ===
v1096 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1095  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1096 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-143115|0xfffffffffffdd0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1169 
lastLocationAccess: - 
=== Succesors ===
next: i1097 
=== Usages ===
v1041 
=== Predecessor ===
a1095 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1169 lastLocationAccess: - #next: i1097  <|@  <|@
f <@~|@floating>@ <|@
tid j635 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1094 
=== Succesors ===
=== Usages ===
v1149 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1094  <|@  <|@
f <@~|@floating>@ <|@
tid v1149 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a240 
index: j635 
=== Succesors ===
=== Usages ===
v554 i1097 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a240 index: j635  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1097 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1149 
lastLocationAccess: - 
=== Succesors ===
next: v554 
=== Usages ===
?881 ?116 v582 
=== Predecessor ===
v1096 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1149 lastLocationAccess: - #next: v554  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v554 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v828 
address: v1149 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v563 
=== Usages ===
=== Predecessor ===
i1097 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v828 address: v1149 lastLocationAccess: - value: i3 stateAfter: - #next: v563  <|@  <|@
f <@~|@floating>@ <|@
tid v1041 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1096 
=== Succesors ===
=== Usages ===
v1151 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1096  <|@  <|@
f <@~|@floating>@ <|@
tid v1151 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1041 
index: - 
=== Succesors ===
=== Usages ===
v563 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1041 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v563 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1151 
lastLocationAccess: - 
=== Succesors ===
next: j565 
=== Usages ===
v1152 v566 
=== Predecessor ===
v554 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1151 lastLocationAccess: - #next: j565  <|@  <|@
f <@~|@floating>@ <|@
tid v1152 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v563 
index: - 
=== Succesors ===
=== Usages ===
j565 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v563 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j565 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1152 
lastLocationAccess: - 
=== Succesors ===
next: i115 
=== Usages ===
v566 
=== Predecessor ===
v563 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1152 lastLocationAccess: - #next: i115  <|@  <|@
f <@~|@floating>@ <|@
tid a557 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1095 
=== Succesors ===
=== Usages ===
v566 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1095  <|@  <|@
tid v566 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j565 
metaspaceMethod: v563 
arguments: a557 a2 i3 a4 
=== Succesors ===
=== Usages ===
i115 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j565 metaspaceMethod: v563 arguments: a557 a2 i3 a4  <|@  <|@
tid ?121 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
?881 ?116 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
f <@~|@floating>@ <|@
tid a529 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1064 
=== Succesors ===
=== Usages ===
?116 ?881 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1064  <|@  <|@
tid ?881 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?121 
values: a529 a2 - - i1097 
=== Succesors ===
=== Usages ===
i115 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?121 values: a529 a2 - - i1097  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i115 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v566 
stateDuring: ?881 
=== Succesors ===
next: a1098 
=== Usages ===
v93 ?116 
=== Predecessor ===
j565 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v566 stateDuring: ?881 #next: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1098 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: i1099 
=== Usages ===
a568 v1153 
=== Predecessor ===
i115 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1108 lastLocationAccess: - #next: i1099  <|@  <|@
tid ?116 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?121 
values: i115 a529 a2 - - i1097 
=== Succesors ===
=== Usages ===
v1170 i1099 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?121 values: i115 a529 a2 - - i1097  <|@  <|@
f <@~|@floating>@ <|@
tid v1153 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
i1099 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1099 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-146187|0xfffffffffffdc4f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?116 
guard: - 
address: v1153 
lastLocationAccess: - 
=== Succesors ===
next: i1100 
=== Usages ===
v575 
=== Predecessor ===
a1098 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?116 guard: - address: v1153 lastLocationAccess: - #next: i1100  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1100 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1148 
lastLocationAccess: - 
=== Succesors ===
next: v843 
=== Usages ===
j636 v575 
=== Predecessor ===
i1099 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1148 lastLocationAccess: - #next: v843  <|@  <|@
f <@~|@floating>@ <|@
tid v575 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1100 
y: i1099 
=== Succesors ===
=== Usages ===
v843 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1100 y: i1099  <|@  <|@
f <@*|@fixed>@ <|@
tid v843 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v575 
=== Succesors ===
trueSuccessor: v840 
falseSuccessor: v842 
=== Usages ===
=== Predecessor ===
i1100 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v575 #trueSuccessor: v840 #falseSuccessor: v842  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v840 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v582 
=== Usages ===
v582 
=== Predecessor ===
v843 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v582  <|@  <|@
f <@~|@floating>@ <|@
tid a568 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1098 
=== Succesors ===
=== Usages ===
v1154 a240 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1098  <|@  <|@
f <@~|@floating>@ <|@
tid j636 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1100 
=== Succesors ===
=== Usages ===
v1154 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1100  <|@  <|@
f <@~|@floating>@ <|@
tid v1154 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a568 
index: j636 
=== Succesors ===
=== Usages ===
v582 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a568 index: j636  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v582 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v840 
address: v1154 
lastLocationAccess: - 
value: i1097 
stateAfter: - 
=== Succesors ===
next: v97 
=== Usages ===
=== Predecessor ===
v840 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v840 address: v1154 lastLocationAccess: - value: i1097 stateAfter: - #next: v97  <|@  <|@
f <@~|@floating>@ <|@
tid v93 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i115 
y: i9 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i115 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v93 
=== Succesors ===
trueSuccessor: v96 
falseSuccessor: v94 
=== Usages ===
=== Predecessor ===
v582 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v93 #trueSuccessor: v96 #falseSuccessor: v94  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v96 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v99 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v99  <|@  <|@
f <@~|@floating>@ <|@
tid i98 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
=== Inputs ===
x: i70 
y: i17 
=== Succesors ===
=== Usages ===
i70 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i70 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v99 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
loopBegin: v69 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v96 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v69  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v69 
=== Succesors ===
next: v236 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v69 #next: v236  <|@  <|@
f <@*|@fixed>@ <|@
tid v236 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
v94 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v69 
=== Succesors ===
next: v42 
=== Usages ===
=== Predecessor ===
v874 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v69 #next: v42  <|@  <|@
f <@*|@fixed>@ <|@
tid v42 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
v89 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v842 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1170 
=== Usages ===
=== Predecessor ===
v843 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1170  <|@  <|@
f <@*|@fixed>@ <|@
tid v1170 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 576
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?116 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v842 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?116  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v830 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v955 
=== Usages ===
=== Predecessor ===
v831 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v955  <|@  <|@
f <@~|@floating>@ <|@
tid i956 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -140315
stableDimension: 0
stamp: i32 [-140315]
stampKind: i32
value: int[-140315|0xfffffffffffddbe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v955 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v830 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v822 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v950 
=== Usages ===
=== Predecessor ===
v823 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v950  <|@  <|@
f <@~|@floating>@ <|@
tid i951 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -135987
stableDimension: 0
stamp: i32 [-135987]
stampKind: i32
value: int[-135987|0xfffffffffffdeccd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v950 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v822 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v854 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v943 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v943  <|@  <|@
f <@~|@floating>@ <|@
tid i944 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -218131
stableDimension: 0
stamp: i32 [-218131]
stampKind: i32
value: int[-218131|0xfffffffffffcabed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v943 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v854 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v750 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v941 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v941  <|@  <|@
f <@~|@floating>@ <|@
tid i942 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -88603
stableDimension: 0
stamp: i32 [-88603]
stampKind: i32
value: int[-88603|0xfffffffffffea5e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v941 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v750 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i936 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [-218131 - -32819] bits:1...1xxxxxxxxxx11x0x101
valueDescription: i32
=== Inputs ===
merge: v933 
values: i942 i944 i951 i956 i960 i965 
=== Succesors ===
=== Usages ===
v938 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v933 values: i942 i944 i951 i956 i960 i965  <|@  <|@
f <@~|@floating>@ <|@
tid j937 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64 [0 - 7060] bits:0...0xxxxxx00x0x00
valueDescription: i64
=== Inputs ===
merge: v933 
values: j898 j945 j952 j898 j961 j898 
=== Succesors ===
=== Usages ===
v938 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v933 values: j898 j945 j952 j898 j961 j898  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v933 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v941 v943 v950 v955 v959 v964 
=== Succesors ===
next: v938 
=== Usages ===
i936 j937 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v941 v943 v950 v955 v959 v964 #next: v938  <|@  <|@
f <@*|@fixed>@ <|@
tid v938 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateBefore: ?71 
actionAndReason: i936 
speculation: j937 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v933 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?71 actionAndReason: i936 speculation: j937  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v742 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v927 
=== Usages ===
=== Predecessor ===
v743 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v927  <|@  <|@
f <@~|@floating>@ <|@
tid j929 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 2580
stableDimension: 0
stamp: i64 [2580]
stampKind: i64
value: long[2580|0xa14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j920 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i928 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -85555
stableDimension: 0
stamp: i32 [-85555]
stampKind: i32
value: int[-85555|0xfffffffffffeb1cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i919 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v927 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v916 
=== Predecessor ===
v742 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: i1101 
=== Usages ===
v609 
=== Predecessor ===
v54 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1101  <|@  <|@
f <@~|@floating>@ <|@
tid v1155 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i1101 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1101 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.acceptMode
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 1]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1155 
lastLocationAccess: - 
=== Succesors ===
next: v217 
=== Usages ===
v214 
=== Predecessor ===
v46 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1155 lastLocationAccess: - #next: v217  <|@  <|@
f <@~|@floating>@ <|@
tid v214 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 5]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1101 
y: i17 
=== Succesors ===
=== Usages ===
v217 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i1101 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v217 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 5]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 1.7961272660182992E-5
stamp: void
=== Inputs ===
condition: v214 
=== Succesors ===
trueSuccessor: v216 
falseSuccessor: v215 
=== Usages ===
=== Predecessor ===
i1101 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v214 #trueSuccessor: v216 #falseSuccessor: v215  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v216 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 8]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1102 
=== Usages ===
=== Predecessor ===
v217 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1102  <|@  <|@
f <@~|@floating>@ <|@
tid v1160 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i1102 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1102 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.to
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 10]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1160 
lastLocationAccess: - 
=== Succesors ===
next: v873 
=== Usages ===
v219 
=== Predecessor ===
v216 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1160 lastLocationAccess: - #next: v873  <|@  <|@
f <@~|@floating>@ <|@
tid v219 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 13]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i1102 
=== Succesors ===
=== Usages ===
v873 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i3 y: i1102  <|@  <|@
f <@*|@fixed>@ <|@
tid v873 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 13]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v219 
=== Succesors ===
trueSuccessor: v871 
falseSuccessor: v872 
=== Usages ===
=== Predecessor ===
i1102 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v219 #trueSuccessor: v871 #falseSuccessor: v872  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v871 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v223 
=== Usages ===
=== Predecessor ===
v873 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v223  <|@  <|@
f <@*|@fixed>@ <|@
tid v223 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v222 
=== Predecessor ===
v871 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v872 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 13]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v930 
=== Usages ===
=== Predecessor ===
v873 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v930  <|@  <|@
f <@~|@floating>@ <|@
tid j932 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 1940
stableDimension: 0
stamp: i64 [1940]
stampKind: i64
value: long[1940|0x794]
=== Inputs ===
=== Succesors ===
=== Usages ===
j920 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i931 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -222739
stableDimension: 0
stamp: i32 [-222739]
stampKind: i32
value: int[-222739|0xfffffffffffc99ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i919 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v930 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v916 
=== Predecessor ===
v872 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v215 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v221 
=== Usages ===
=== Predecessor ===
v217 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v221  <|@  <|@
f <@*|@fixed>@ <|@
tid v221 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v222 
=== Predecessor ===
v215 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v222 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v221 v223 
=== Succesors ===
next: v588 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v221 v223 #next: v588  <|@  <|@
f <@~|@floating>@ <|@
tid v1156 <|@
d <@d|@=== Debug Properties ===
displacement: 32
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
v588 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v588 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Matcher.last
location: Matcher.last
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 20]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: i1103 
=== Usages ===
=== Predecessor ===
v222 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - value: i3 stateAfter: - #next: i1103  <|@  <|@
f <@~|@floating>@ <|@
tid v1157 <|@
d <@d|@=== Debug Properties ===
displacement: 28
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i1103 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1103 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.first
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3760) [bci: 29]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1157 
lastLocationAccess: - 
=== Succesors ===
next: v600 
=== Usages ===
v600 
=== Predecessor ===
v588 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1157 lastLocationAccess: - #next: v600  <|@  <|@
f <@~|@floating>@ <|@
tid v1158 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1049 
=== Succesors ===
=== Usages ===
v600 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1049  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v600 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3760) [bci: 32]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v728 
address: v1158 
lastLocationAccess: - 
value: i1103 
stateAfter: - 
=== Succesors ===
next: v609 
=== Usages ===
=== Predecessor ===
i1103 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v728 address: v1158 lastLocationAccess: - value: i1103 stateAfter: - #next: v609  <|@  <|@
f <@~|@floating>@ <|@
tid v1159 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1049 
=== Succesors ===
=== Usages ===
v609 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1049  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v609 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3761) [bci: 42]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v46 
address: v1159 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v600 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v46 address: v1159 lastLocationAccess: - value: i3 stateAfter: - #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
v609 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
ends: v42 v47 v236 
=== Succesors ===
next: v35 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v42 v47 v236 #next: v35  <|@  <|@
f <@*|@fixed>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:5001) [bci: 77]
stamp: void
=== Inputs ===
memoryMap: - 
result: i17 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v36 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i17  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v924 
=== Usages ===
=== Predecessor ===
v54 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v924  <|@  <|@
f <@~|@floating>@ <|@
tid j926 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 1300
stableDimension: 0
stamp: i64 [1300]
stampKind: i64
value: long[1300|0x514]
=== Inputs ===
=== Succesors ===
=== Usages ===
j920 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i925 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -12339
stableDimension: 0
stamp: i32 [-12339]
stampKind: i32
value: int[-12339|0xffffffffffffcfcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i919 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v924 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v916 
=== Predecessor ===
v49 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i919 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [-222739 - -12339] bits:1...1xx1xxxxxx111x01101
valueDescription: i32
=== Inputs ===
merge: v916 
values: i925 i928 i931 
=== Succesors ===
=== Usages ===
v921 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v916 values: i925 i928 i931  <|@  <|@
f <@~|@floating>@ <|@
tid j920 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64 [1300 - 2580] bits:0...0xxxxx0010100
valueDescription: i64
=== Inputs ===
merge: v916 
values: j926 j929 j932 
=== Succesors ===
=== Usages ===
v921 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v916 values: j926 j929 j932  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v916 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v924 v927 v930 
=== Succesors ===
next: v921 
=== Usages ===
i919 j920 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v924 v927 v930 #next: v921  <|@  <|@
f <@*|@fixed>@ <|@
tid v921 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateBefore: ?28 
actionAndReason: i919 
speculation: j920 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v916 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?28 actionAndReason: i919 speculation: j920  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v730 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
stamp: void
=== Inputs ===
=== Succesors ===
next: v912 
=== Usages ===
=== Predecessor ===
v731 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v912  <|@  <|@
f <@~|@floating>@ <|@
tid i913 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -81691
stableDimension: 0
stamp: i32 [-81691]
stampKind: i32
value: int[-81691|0xfffffffffffec0e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v912 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v730 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v726 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v910 
=== Usages ===
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v910  <|@  <|@
f <@~|@floating>@ <|@
tid i911 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -79387
stableDimension: 0
stamp: i32 [-79387]
stampKind: i32
value: int[-79387|0xfffffffffffec9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v910 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v726 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v718 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v906 
=== Usages ===
=== Predecessor ===
v719 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v906  <|@  <|@
f <@~|@floating>@ <|@
tid i907 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -69403
stableDimension: 0
stamp: i32 [-69403]
stampKind: i32
value: int[-69403|0xfffffffffffef0e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v906 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v718 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i899 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: i32 [-217107 - -69403] bits:1...1x01xxxxxxx1110x101
valueDescription: i32
=== Inputs ===
merge: v895 
values: i907 i911 i913 i915 
=== Succesors ===
=== Usages ===
v901 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v895 values: i907 i911 i913 i915  <|@  <|@
f <@~|@floating>@ <|@
tid j900 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: i64 [0 - 20] bits:0...0x0x00
valueDescription: i64
=== Inputs ===
merge: v895 
values: j898 j898 j898 j283 
=== Succesors ===
=== Usages ===
v901 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v895 values: j898 j898 j898 j283  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v895 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v906 v910 v912 v914 
=== Succesors ===
next: v901 
=== Usages ===
i899 j900 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v906 v910 v912 v914 #next: v901  <|@  <|@
f <@*|@fixed>@ <|@
tid v901 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i899 
speculation: j900 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v895 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i899 speculation: j900  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr   -1  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a1048 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a1048  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$GroupTail
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v1109 v1113 v1117 ?212 ?28 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v1160 v1157 v503 v402 ?157 ?880 ?28 ?881 v450 ?206 ?212 ?186 ?205 ?71 ?882 ?192 ?191 v566 ?116 ?201 ?879 ?121 ?140 v1108 v1112 v1155 v1156 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v491 v325 ?28 ?879 ?206 v503 ?71 v219 v554 v609 v566 ?121 ?140 v402 ?157 v438 v588 v450 ?191 ?192 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
result v3|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?879 ?28 v450 ?206 v503 ?71 ?191 ?192 v566 ?121 ?140 v402 ?157 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_1
code: ResolvedJavaMethodBytecode<Pattern$GroupTail.match(Matcher, int, CharSequence)>
localsSize: 7
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4991
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v901 a1048 i1050 i1052 v1055 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@~|@floating>@ <|@
tid v1108 <|@
result [v1|QWORD[.] + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a1048 a1081 a1089 a1098 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1048 <|@
result v4|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: int[-65291|0xffffffffffff00f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: n# int[]
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: a1049 
=== Usages ===
a260 v1110 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1108 lastLocationAccess: - #next: a1049  <|@  <|@
f <@~|@floating>@ <|@
tid v1112 <|@
result [v1|QWORD[.] + 56] <|@
d <@d|@=== Debug Properties ===
displacement: 56
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a1049 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1049 <|@
result v5|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.groups
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 17]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1112 
lastLocationAccess: - 
=== Succesors ===
next: i1050 
=== Usages ===
a282 v1114 v1158 v1159 
=== Predecessor ===
a1048 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1112 lastLocationAccess: - #next: i1050  <|@  <|@
f <@~|@floating>@ <|@
tid v1110 <|@
result [v4|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1048 
=== Succesors ===
=== Usages ===
i1050 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1048  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1050 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-67851|0xfffffffffffef6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1110 
lastLocationAccess: - 
=== Succesors ===
next: i1051 
=== Usages ===
v270 
=== Predecessor ===
a1049 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1110 lastLocationAccess: - #next: i1051  <|@  <|@
f <@~|@floating>@ <|@
tid v1109 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i1051 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1051 <|@
result v7|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupTail.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 5]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1109 
lastLocationAccess: - 
=== Succesors ===
next: v719 
=== Usages ===
j612 v270 
=== Predecessor ===
i1050 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1109 lastLocationAccess: - #next: v719  <|@  <|@
f <@~|@floating>@ <|@
tid v270 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1051 
y: i1050 
=== Succesors ===
=== Usages ===
v719 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1051 y: i1050  <|@  <|@
f <@~|@floating>@ <|@
tid j898 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 j937 j900 j900 j900 j978 j978 j937 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v719 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v270 
=== Succesors ===
trueSuccessor: v716 
falseSuccessor: v718 
=== Usages ===
=== Predecessor ===
i1051 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v270 #trueSuccessor: v716 #falseSuccessor: v718  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v716 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1052 
=== Usages ===
=== Predecessor ===
v719 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1052  <|@  <|@
f <@~|@floating>@ <|@
tid v1114 <|@
result [v5|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1049 
=== Succesors ===
=== Usages ===
i1052 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1049  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1052 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-73483|0xfffffffffffee0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 24]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1114 
lastLocationAccess: - 
=== Succesors ===
next: i1053 
=== Usages ===
v318 v309 
=== Predecessor ===
v716 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1114 lastLocationAccess: - #next: i1053  <|@  <|@
f <@~|@floating>@ <|@
tid v1113 <|@
result [v0|QWORD[.] + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i1053 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1053 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupTail.groupIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 21]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1113 
lastLocationAccess: - 
=== Succesors ===
next: v727 
=== Usages ===
v309 i26 j615 
=== Predecessor ===
i1052 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1113 lastLocationAccess: - #next: v727  <|@  <|@
f <@~|@floating>@ <|@
tid v309 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1053 
y: i1052 
=== Succesors ===
=== Usages ===
v727 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1053 y: i1052  <|@  <|@
f <@*|@fixed>@ <|@
tid v727 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v309 
=== Succesors ===
trueSuccessor: v724 
falseSuccessor: v726 
=== Usages ===
=== Predecessor ===
i1053 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v309 #trueSuccessor: v724 #falseSuccessor: v726  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v724 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v731 
=== Usages ===
v316 
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v731  <|@  <|@
f <@~|@floating>@ <|@
tid i17 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4996) [bci: 35]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
v214 i26 v35 i169 i98 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 60]
stamp: i32
=== Inputs ===
x: i1053 
y: i17 
=== Succesors ===
=== Usages ===
j616 v318 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i1053 y: i17  <|@  <|@
f <@~|@floating>@ <|@
tid v318 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i26 
y: i1052 
=== Succesors ===
=== Usages ===
v731 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i26 y: i1052  <|@  <|@
f <@*|@fixed>@ <|@
tid v731 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v318 
=== Succesors ===
trueSuccessor: v728 
falseSuccessor: v730 
=== Usages ===
=== Predecessor ===
v724 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v318 #trueSuccessor: v728 #falseSuccessor: v730  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v728 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1054 
=== Usages ===
v600 v325 
=== Predecessor ===
v731 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1054  <|@  <|@
f <@~|@floating>@ <|@
tid v1117 <|@
result [v0|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a1054 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1054 <|@
result v11|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 64]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1117 
lastLocationAccess: - 
=== Succesors ===
next: v1055 
=== Usages ===
v1161 v1118 
=== Predecessor ===
v728 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1117 lastLocationAccess: - #next: v1055  <|@  <|@
f <@~|@floating>@ <|@
tid v1161 <|@
result [v11|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1054 
=== Succesors ===
=== Usages ===
v1055 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1054  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1055 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-84235|0xfffffffffffeb6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v1161 
lastLocationAccess: - 
=== Succesors ===
next: i1056 
=== Usages ===
v1015 
=== Predecessor ===
a1054 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v1161 lastLocationAccess: - #next: i1056  <|@  <|@
f <@~|@floating>@ <|@
tid a260 <|@
result v13|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1048 
=== Succesors ===
=== Usages ===
v1111 a240 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1048  <|@  <|@
f <@~|@floating>@ <|@
tid j612 <|@
result v7|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1051 
=== Succesors ===
=== Usages ===
v1111 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1051  <|@  <|@
f <@~|@floating>@ <|@
tid v1111 <|@
result [v13|QWORD[.] + v7|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a260 
index: j612 
=== Succesors ===
=== Usages ===
i1056 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a260 index: j612  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1056 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1111 
lastLocationAccess: - 
=== Succesors ===
next: v851 
=== Usages ===
v10 v316 ?28 
=== Predecessor ===
v1055 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1111 lastLocationAccess: - #next: v851  <|@  <|@
f <@~|@floating>@ <|@
tid i9 <|@
result int[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v10 v164 i70 v87 v93 i139 v158 ?157 ?205 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v10 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1056 
y: i9 
=== Succesors ===
=== Usages ===
v851 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i1056 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v851 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v10 
=== Succesors ===
trueSuccessor: v849 
falseSuccessor: v850 
=== Usages ===
=== Predecessor ===
i1056 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v10 #trueSuccessor: v849 #falseSuccessor: v850  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v849 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4992) [bci: 13]
stamp: void
=== Inputs ===
=== Succesors ===
next: v914 
=== Usages ===
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v914  <|@  <|@
f <@~|@floating>@ <|@
tid j283 <|@
result long[20|0x14] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 21]
rawvalue: 20
stableDimension: 0
stamp: i64 [20]
stampKind: i64
value: long[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j900 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i915 <|@
result int[-217107|0xfffffffffffcafed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -217107
stableDimension: 0
stamp: i32 [-217107]
stampKind: i32
value: int[-217107|0xfffffffffffcafed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v914 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v849 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v850 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 16]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1057 
=== Usages ===
=== Predecessor ===
v851 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1057  <|@  <|@
f <@~|@floating>@ <|@
tid a282 <|@
result v15|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 17]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1049 
=== Succesors ===
=== Usages ===
v1116 v1115 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1049  <|@  <|@
f <@~|@floating>@ <|@
tid j616 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i26 
=== Succesors ===
=== Usages ===
v1116 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v1116 <|@
result [v15|QWORD[.] + v10|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a282 
index: j616 
=== Succesors ===
=== Usages ===
v325 i1057 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a282 index: j616  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1057 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4996) [bci: 37]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1116 
lastLocationAccess: - 
=== Succesors ===
next: i1058 
=== Usages ===
?212 ?28 
=== Predecessor ===
v850 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1116 lastLocationAccess: - #next: i1058  <|@  <|@
f <@~|@floating>@ <|@
tid j615 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1053 
=== Succesors ===
=== Usages ===
v1115 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1053  <|@  <|@
f <@~|@floating>@ <|@
tid v1115 <|@
result [v15|QWORD[.] + v9|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a282 
index: j615 
=== Succesors ===
=== Usages ===
v316 i1058 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a282 index: j615  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1058 <|@
result v17|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4995) [bci: 24]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1115 
lastLocationAccess: - 
=== Succesors ===
next: v316 
=== Usages ===
?212 ?28 
=== Predecessor ===
i1057 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1115 lastLocationAccess: - #next: v316  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v316 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v724 
address: v1115 
lastLocationAccess: - 
value: i1056 
stateAfter: - 
=== Succesors ===
next: v325 
=== Usages ===
=== Predecessor ===
i1058 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v724 address: v1115 lastLocationAccess: - value: i1056 stateAfter: - #next: v325  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v325 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v728 
address: v1116 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v54 
=== Usages ===
=== Predecessor ===
v316 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v728 address: v1116 lastLocationAccess: - value: i3 stateAfter: - #next: v54  <|@  <|@
tid ?28 <|@
d <@d|@=== Debug Properties ===
bci: 63
bytecode: aload_0
code: ResolvedJavaMethodBytecode<Pattern$GroupTail.match(Matcher, int, CharSequence)>
localsSize: 7
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
sourceFile: Pattern.java
sourceLine: 5000
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i1056 i1058 i1057 
=== Succesors ===
=== Usages ===
v921 v1060 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i1056 i1058 i1057  <|@  <|@
f <@~|@floating>@ <|@
tid v1015 <|@
result v18|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1055 
=== Succesors ===
=== Usages ===
v54 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1055  <|@  <|@
f <@*|@fixed>@ <|@
tid v54 <|@
d <@d|@=== Debug Properties ===
hubs: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}]
keySuccessors: [I@760dc489
keys: [HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>, HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>]
profileData: PROFILED keyProbabilities: [0.6666871912931344, 0.3333128087068656, 0.0]
stamp: void
=== Inputs ===
value: v1015 
=== Succesors ===
successors: v41 v46 v49 
=== Usages ===
=== Predecessor ===
v325 >@ <|@
instruction <@TypeSwitch|@jdk.graal.compiler.nodes.java.TypeSwitchNode>@ value: v1015 #successors: v41 v46 v49  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v41 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: a1059 
=== Usages ===
=== Predecessor ===
v54 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1059  <|@  <|@
f <@~|@floating>@ <|@
tid v1118 <|@
result [v11|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1054 
=== Succesors ===
=== Usages ===
a1059 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1054  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1059 <|@
result v20|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1118 
lastLocationAccess: - 
=== Succesors ===
next: v1060 
=== Usages ===
a332 v1119 v1120 v1123 v1162 
=== Predecessor ===
v41 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1118 lastLocationAccess: - #next: v1060  <|@  <|@
f <@~|@floating>@ <|@
tid v1162 <|@
result [v20|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
v1060 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1060 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-85259|0xfffffffffffeb2f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?28 
guard: - 
address: v1162 
lastLocationAccess: - 
=== Succesors ===
next: v743 
=== Usages ===
v1044 
=== Predecessor ===
a1059 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?28 guard: - address: v1162 lastLocationAccess: - #next: v743  <|@  <|@
f <@~|@floating>@ <|@
tid v1043 <|@
result meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1044 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1044 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1060 
y: v1043 
=== Succesors ===
=== Usages ===
v743 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1060 y: v1043  <|@  <|@
f <@*|@fixed>@ <|@
tid v743 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1044 
=== Succesors ===
trueSuccessor: v740 
falseSuccessor: v742 
=== Usages ===
=== Predecessor ===
v1060 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1044 #trueSuccessor: v740 #falseSuccessor: v742  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v740 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v68 
=== Usages ===
=== Predecessor ===
v743 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v68  <|@  <|@
f <@~|@floating>@ <|@
tid v1119 <|@
result [v20|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
i1063 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
f <@~|@floating>@ <|@
tid a332 <|@
result v21|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 1]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1059 
=== Succesors ===
=== Usages ===
?121 ?192 ?71 ?206 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1059  <|@  <|@
f <@~|@floating>@ <|@
tid v1120 <|@
result [v20|DWORD[_] * 8 + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
a1061 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
tid ?212 <|@
d <@d|@=== Debug Properties ===
bci: 70
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupTail.match(Matcher, int, CharSequence)>
localsSize: 7
locksSize: 0
sourceFile: Pattern.java
sourceLine: 5000
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 - - - i1058 i1057 
=== Succesors ===
=== Usages ===
?208 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 - - - i1058 i1057  <|@  <|@
tid ?208 <|@
d <@d|@=== Debug Properties ===
bci: 7
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$BranchConn.match(Matcher, int, CharSequence)>
localsSize: 4
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4878
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?212 
=== Succesors ===
=== Usages ===
?71 ?121 ?192 ?206 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?212  <|@  <|@
f <@~|@floating>@ <|@
tid j945 <|@
result long[3220|0xc94] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 3220
stableDimension: 0
stamp: i64 [3220]
stampKind: i64
value: long[3220|0xc94]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 j978 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j952 <|@
result long[4500|0x1194] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 4500
stableDimension: 0
stamp: i64 [4500]
stampKind: i64
value: long[4500|0x1194]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 j978 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v1045 <|@
result meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v1046 v1047 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v68 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v69 
=== Predecessor ===
v740 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i70 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v69 
values: i9 i98 
=== Succesors ===
=== Usages ===
?71 v73 j619 ?206 v521 i98 ?121 ?192 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v69 values: i9 i98  <|@  <|@
f <@~|@floating>@ <|@
tid a240 <|@
result v23|QWORD[.] <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v69 
values: a260 a568 
=== Succesors ===
=== Usages ===
a241 v1149 v1142 v1141 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v69 values: a260 a568  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v69 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 21
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
osrLoop: false
peelings: 0
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v68 
=== Succesors ===
next: a1061 
=== Usages ===
i70 v89 v94 v99 a240 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v68 #next: a1061  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1061 <|@
result v24|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1120 
lastLocationAccess: - 
=== Succesors ===
next: i1062 
=== Usages ===
a339 v1121 
=== Predecessor ===
v69 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1120 lastLocationAccess: - #next: i1062  <|@  <|@
tid ?71 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
v938 i1062 a1066 i1093 v1067 v1096 i1084 v1087 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
f <@~|@floating>@ <|@
tid v1121 <|@
result [v24|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1061 
=== Succesors ===
=== Usages ===
i1062 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1061  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1062 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-87307|0xfffffffffffeaaf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1121 
lastLocationAccess: - 
=== Succesors ===
next: v751 
=== Usages ===
v521 
=== Predecessor ===
a1061 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1121 lastLocationAccess: - #next: v751  <|@  <|@
f <@~|@floating>@ <|@
tid v521 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i70 
y: i1062 
=== Succesors ===
=== Usages ===
v751 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i70 y: i1062  <|@  <|@
f <@*|@fixed>@ <|@
tid v751 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v521 
=== Succesors ===
trueSuccessor: v748 
falseSuccessor: v750 
=== Usages ===
=== Predecessor ===
i1062 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v521 #trueSuccessor: v748 #falseSuccessor: v750  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v748 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1063 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1063  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1063 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1119 
lastLocationAccess: - 
=== Succesors ===
next: v855 
=== Usages ===
v73 
=== Predecessor ===
v748 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1119 lastLocationAccess: - #next: v855  <|@  <|@
f <@~|@floating>@ <|@
tid v73 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i70 
y: i1063 
=== Succesors ===
=== Usages ===
v855 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i70 y: i1063  <|@  <|@
f <@*|@fixed>@ <|@
tid v855 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v73 
=== Succesors ===
trueSuccessor: v853 
falseSuccessor: v854 
=== Usages ===
=== Predecessor ===
i1063 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v73 #trueSuccessor: v853 #falseSuccessor: v854  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v853 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1064 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1064  <|@  <|@
f <@~|@floating>@ <|@
tid a339 <|@
result v25|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1061 
=== Succesors ===
=== Usages ===
v1122 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1061  <|@  <|@
f <@~|@floating>@ <|@
tid j619 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i70 
=== Succesors ===
=== Usages ===
v1122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i70  <|@  <|@
f <@~|@floating>@ <|@
tid v1122 <|@
result [v25|QWORD[.] + v22|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a339 
index: j619 
=== Succesors ===
=== Usages ===
a1064 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a339 index: j619  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1064 <|@
result v26|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1122 
lastLocationAccess: - 
=== Succesors ===
next: v83 
=== Usages ===
v620 a529 v1148 v1150 v1168 
=== Predecessor ===
v853 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1122 lastLocationAccess: - #next: v83  <|@  <|@
f <@~|@floating>@ <|@
tid v620 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1064 
=== Succesors ===
=== Usages ===
v83 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1064  <|@  <|@
f <@~|@floating>@ <|@
tid v1141 <|@
result [v23|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a240 
index: - 
=== Succesors ===
=== Usages ===
i1084 i1093 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a240 index: -  <|@  <|@
f <@*|@fixed>@ <|@
tid v83 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v620 
=== Succesors ===
trueSuccessor: v82 
falseSuccessor: v81 
=== Usages ===
=== Predecessor ===
a1064 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v620 #trueSuccessor: v82 #falseSuccessor: v81  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v82 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1065 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1065  <|@  <|@
f <@~|@floating>@ <|@
tid v1123 <|@
result [v20|DWORD[_] * 8 + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1059 
=== Succesors ===
=== Usages ===
a1065 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1059  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1065 <|@
result v27|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1123 
lastLocationAccess: - 
=== Succesors ===
next: a1066 
=== Usages ===
v1124 
=== Predecessor ===
v82 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1123 lastLocationAccess: - #next: a1066  <|@  <|@
f <@~|@floating>@ <|@
tid v1124 <|@
result [v27|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1065 
=== Succesors ===
=== Usages ===
a1066 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1065  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1066 <|@
result v28|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-91915|0xfffffffffffe98f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1124 
lastLocationAccess: - 
=== Succesors ===
next: v1067 
=== Usages ===
a363 v1125 v1126 v1129 v1143 v1163 
=== Predecessor ===
a1065 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1124 lastLocationAccess: - #next: v1067  <|@  <|@
f <@~|@floating>@ <|@
tid v1163 <|@
result [v28|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
v1067 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1067 <|@
result v29|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-93195|0xfffffffffffe93f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1163 
lastLocationAccess: - 
=== Succesors ===
next: v134 
=== Usages ===
v1021 
=== Predecessor ===
a1066 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1163 lastLocationAccess: - #next: v134  <|@  <|@
f <@~|@floating>@ <|@
tid v1021 <|@
result v30|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1067 
=== Succesors ===
=== Usages ===
v134 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1067  <|@  <|@
f <@~|@floating>@ <|@
tid v1125 <|@
result [v28|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
i1070 i1085 i1091 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@~|@floating>@ <|@
tid a363 <|@
result v32|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1066 
=== Succesors ===
=== Usages ===
?205 ?157 ?879 ?140 ?201 ?191 ?882 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1066  <|@  <|@
f <@*|@fixed>@ <|@
tid v134 <|@
d <@d|@=== Debug Properties ===
hubs: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}]
keySuccessors: [I@67c2b0a5
keys: [HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>, HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>]
profileData: PROFILED keyProbabilities: [0.6666288834409075, 0.3333711165590924, 0.0]
stamp: void
=== Inputs ===
value: v1021 
=== Succesors ===
successors: v124 v126 v129 
=== Usages ===
=== Predecessor ===
v1067 >@ <|@
instruction <@TypeSwitch|@jdk.graal.compiler.nodes.java.TypeSwitchNode>@ value: v1021 #successors: v124 v126 v129  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v137 
=== Usages ===
=== Predecessor ===
v134 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v137  <|@  <|@
f <@~|@floating>@ <|@
tid v1126 <|@
result [v28|DWORD[_] * 8 + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
a1068 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@*|@fixed>@ <|@
tid v137 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v138 
=== Predecessor ===
v124 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i139 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v138 
values: i9 i169 
=== Succesors ===
=== Usages ===
?140 v142 j622 ?157 v404 i169 ?191 ?879 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v138 values: i9 i169  <|@  <|@
f <@~|@floating>@ <|@
tid a241 <|@
result v34|QWORD[.] <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v138 
values: a240 a452 
=== Succesors ===
=== Usages ===
v1134 v1135 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v138 values: a240 a452  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v138 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: 94
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
osrLoop: false
peelings: 0
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v137 
=== Succesors ===
next: a1068 
=== Usages ===
i139 v160 v165 v170 a241 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v137 #next: a1068  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1068 <|@
result v35|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1126 
lastLocationAccess: - 
=== Succesors ===
next: i1069 
=== Usages ===
a369 v1127 
=== Predecessor ===
v138 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1126 lastLocationAccess: - #next: i1069  <|@  <|@
tid ?192 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
?140 ?157 ?191 ?879 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
tid ?140 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
v979 i1069 a1073 i1076 v1074 v1079 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: a363 a2 i3 a4 i139  <|@  <|@
f <@~|@floating>@ <|@
tid v1127 <|@
result [v35|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1068 
=== Succesors ===
=== Usages ===
i1069 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1068  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1069 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-94987|0xfffffffffffe8cf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1127 
lastLocationAccess: - 
=== Succesors ===
next: v767 
=== Usages ===
v404 
=== Predecessor ===
a1068 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1127 lastLocationAccess: - #next: v767  <|@  <|@
f <@~|@floating>@ <|@
tid v404 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i139 
y: i1069 
=== Succesors ===
=== Usages ===
v767 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i139 y: i1069  <|@  <|@
f <@*|@fixed>@ <|@
tid v767 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v404 
=== Succesors ===
trueSuccessor: v764 
falseSuccessor: v766 
=== Usages ===
=== Predecessor ===
i1069 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v404 #trueSuccessor: v764 #falseSuccessor: v766  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v764 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1070 
=== Usages ===
=== Predecessor ===
v767 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1070  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1070 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1125 
lastLocationAccess: - 
=== Succesors ===
next: v859 
=== Usages ===
v142 
=== Predecessor ===
v764 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1125 lastLocationAccess: - #next: v859  <|@  <|@
f <@~|@floating>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i139 
y: i1070 
=== Succesors ===
=== Usages ===
v859 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i139 y: i1070  <|@  <|@
f <@*|@fixed>@ <|@
tid v859 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v142 
=== Succesors ===
trueSuccessor: v857 
falseSuccessor: v858 
=== Usages ===
=== Predecessor ===
i1070 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v142 #trueSuccessor: v857 #falseSuccessor: v858  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v857 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1071 
=== Usages ===
=== Predecessor ===
v859 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1071  <|@  <|@
f <@~|@floating>@ <|@
tid a369 <|@
result v36|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a1068 
=== Succesors ===
=== Usages ===
v1128 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1068  <|@  <|@
f <@~|@floating>@ <|@
tid j622 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i139 
=== Succesors ===
=== Usages ===
v1128 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i139  <|@  <|@
f <@~|@floating>@ <|@
tid v1128 <|@
result [v36|QWORD[.] + v33|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a369 
index: j622 
=== Succesors ===
=== Usages ===
a1071 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a369 index: j622  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1071 <|@
result v37|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1128 
lastLocationAccess: - 
=== Succesors ===
next: v152 
=== Usages ===
v623 a412 v1133 v1136 v1165 
=== Predecessor ===
v857 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1128 lastLocationAccess: - #next: v152  <|@  <|@
f <@~|@floating>@ <|@
tid v623 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a1071 
=== Succesors ===
=== Usages ===
v152 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a1071  <|@  <|@
f <@*|@fixed>@ <|@
tid v152 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.37500622448719334
stamp: void
=== Inputs ===
condition: v623 
=== Succesors ===
trueSuccessor: v151 
falseSuccessor: v150 
=== Usages ===
=== Predecessor ===
a1071 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v623 #trueSuccessor: v151 #falseSuccessor: v150  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v151 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1072 
=== Usages ===
=== Predecessor ===
v152 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1072  <|@  <|@
f <@~|@floating>@ <|@
tid v1129 <|@
result [v28|DWORD[_] * 8 + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
a1072 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1072 <|@
result v38|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1129 
lastLocationAccess: - 
=== Succesors ===
next: a1073 
=== Usages ===
v1130 
=== Predecessor ===
v151 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1129 lastLocationAccess: - #next: a1073  <|@  <|@
f <@~|@floating>@ <|@
tid v1130 <|@
result [v38|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1072 
=== Succesors ===
=== Usages ===
a1073 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1072  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1073 <|@
result v39|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-99339|0xfffffffffffe7bf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1130 
lastLocationAccess: - 
=== Succesors ===
next: v1074 
=== Usages ===
a392 v1164 
=== Predecessor ===
a1072 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1130 lastLocationAccess: - #next: v1074  <|@  <|@
f <@~|@floating>@ <|@
tid v1164 <|@
result [v39|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1073 
=== Succesors ===
=== Usages ===
v1074 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1073  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1074 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-100875|0xfffffffffffe75f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1164 
lastLocationAccess: - 
=== Succesors ===
next: v399 
=== Usages ===
v1024 
=== Predecessor ===
a1073 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1164 lastLocationAccess: - #next: v399  <|@  <|@
f <@~|@floating>@ <|@
tid v1024 <|@
result v41|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1074 
=== Succesors ===
=== Usages ===
v1131 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1074  <|@  <|@
f <@~|@floating>@ <|@
tid v1131 <|@
result [v41|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1024 
index: - 
=== Succesors ===
=== Usages ===
v399 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1024 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v399 <|@
result v43|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1131 
lastLocationAccess: - 
=== Succesors ===
next: j401 
=== Usages ===
v1132 v402 
=== Predecessor ===
v1074 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1131 lastLocationAccess: - #next: j401  <|@  <|@
f <@~|@floating>@ <|@
tid v1132 <|@
result [v43|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v399 
index: - 
=== Succesors ===
=== Usages ===
j401 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v399 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j401 <|@
result v44|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1132 
lastLocationAccess: - 
=== Succesors ===
next: i156 
=== Usages ===
v402 
=== Predecessor ===
v399 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1132 lastLocationAccess: - #next: i156  <|@  <|@
f <@~|@floating>@ <|@
tid a392 <|@
result v45|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1073 
=== Succesors ===
=== Usages ===
v402 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1073  <|@  <|@
tid v402 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j401 
metaspaceMethod: v399 
arguments: a392 a2 i3 a4 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j401 metaspaceMethod: v399 arguments: a392 a2 i3 a4  <|@  <|@
tid ?879 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: a363 a2 i3 a4 i139  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v402 
stateDuring: ?879 
=== Succesors ===
next: v863 
=== Usages ===
v158 
=== Predecessor ===
j401 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v402 stateDuring: ?879 #next: v863  <|@  <|@
f <@~|@floating>@ <|@
tid v158 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i156 
y: i9 
=== Succesors ===
=== Usages ===
v863 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i156 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v863 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v158 
=== Succesors ===
trueSuccessor: v862 
falseSuccessor: v160 
=== Usages ===
=== Predecessor ===
i156 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v158 #trueSuccessor: v862 #falseSuccessor: v160  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v862 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v861 
=== Usages ===
=== Predecessor ===
v863 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v861  <|@  <|@
tid ?157 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: i9 a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
v861 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: i9 a363 a2 i3 a4 i139  <|@  <|@
f <@*|@fixed>@ <|@
tid v861 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: UnreachedCode
speculation: {0x0000000000000f14[index: 120, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?157 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v862 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?157  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v150 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1075 
=== Usages ===
=== Predecessor ===
v152 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1075  <|@  <|@
f <@~|@floating>@ <|@
tid v1165 <|@
result [v37|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1071 
=== Succesors ===
=== Usages ===
v1075 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1071  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1075 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1165 
lastLocationAccess: - 
=== Succesors ===
next: v779 
=== Usages ===
v1046 
=== Predecessor ===
v150 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1165 lastLocationAccess: - #next: v779  <|@  <|@
f <@~|@floating>@ <|@
tid v1046 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1075 
y: v1045 
=== Succesors ===
=== Usages ===
v779 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1075 y: v1045  <|@  <|@
f <@*|@fixed>@ <|@
tid v779 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1046 
=== Succesors ===
trueSuccessor: v776 
falseSuccessor: v778 
=== Usages ===
=== Predecessor ===
v1075 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1046 #trueSuccessor: v776 #falseSuccessor: v778  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v776 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1076 
=== Usages ===
=== Predecessor ===
v779 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1076  <|@  <|@
f <@~|@floating>@ <|@
tid v1134 <|@
result [v34|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a241 
index: - 
=== Succesors ===
=== Usages ===
i1076 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a241 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1076 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-107019|0xfffffffffffe5df5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1134 
lastLocationAccess: - 
=== Succesors ===
next: i1077 
=== Usages ===
v431 
=== Predecessor ===
v776 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1134 lastLocationAccess: - #next: i1077  <|@  <|@
f <@~|@floating>@ <|@
tid v1133 <|@
result [v37|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1071 
=== Succesors ===
=== Usages ===
i1077 i1083 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1071  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1077 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1133 
lastLocationAccess: - 
=== Succesors ===
next: v787 
=== Usages ===
v431 j627 
=== Predecessor ===
i1076 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1133 lastLocationAccess: - #next: v787  <|@  <|@
f <@~|@floating>@ <|@
tid v431 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1077 
y: i1076 
=== Succesors ===
=== Usages ===
v787 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1077 y: i1076  <|@  <|@
f <@*|@fixed>@ <|@
tid v787 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v431 
=== Succesors ===
trueSuccessor: v784 
falseSuccessor: v786 
=== Usages ===
=== Predecessor ===
i1077 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v431 #trueSuccessor: v784 #falseSuccessor: v786  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v784 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1078 
=== Usages ===
v438 
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1078  <|@  <|@
f <@~|@floating>@ <|@
tid v1136 <|@
result [v37|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1071 
=== Succesors ===
=== Usages ===
a1078 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1071  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1078 <|@
result v49|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1136 
lastLocationAccess: - 
=== Succesors ===
next: v1079 
=== Usages ===
a441 v1166 
=== Predecessor ===
v784 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1136 lastLocationAccess: - #next: v1079  <|@  <|@
f <@~|@floating>@ <|@
tid v1166 <|@
result [v49|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1078 
=== Succesors ===
=== Usages ===
v1079 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1078  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1079 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-113419|0xfffffffffffe44f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?140 
guard: - 
address: v1166 
lastLocationAccess: - 
=== Succesors ===
next: i1080 
=== Usages ===
v1031 
=== Predecessor ===
a1078 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?140 guard: - address: v1166 lastLocationAccess: - #next: i1080  <|@  <|@
f <@~|@floating>@ <|@
tid j627 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1077 
=== Succesors ===
=== Usages ===
v1135 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1077  <|@  <|@
f <@~|@floating>@ <|@
tid v1135 <|@
result [v34|QWORD[.] + v48|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a241 
index: j627 
=== Succesors ===
=== Usages ===
v438 i1080 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a241 index: j627  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1080 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1135 
lastLocationAccess: - 
=== Succesors ===
next: v438 
=== Usages ===
?880 ?186 v466 
=== Predecessor ===
v1079 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1135 lastLocationAccess: - #next: v438  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v438 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v784 
address: v1135 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v447 
=== Usages ===
=== Predecessor ===
i1080 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v784 address: v1135 lastLocationAccess: - value: i3 stateAfter: - #next: v447  <|@  <|@
f <@~|@floating>@ <|@
tid v1031 <|@
result v52|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1079 
=== Succesors ===
=== Usages ===
v1137 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1079  <|@  <|@
f <@~|@floating>@ <|@
tid v1137 <|@
result [v52|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1031 
index: - 
=== Succesors ===
=== Usages ===
v447 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1031 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v447 <|@
result v54|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1137 
lastLocationAccess: - 
=== Succesors ===
next: j449 
=== Usages ===
v1138 v450 
=== Predecessor ===
v438 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1137 lastLocationAccess: - #next: j449  <|@  <|@
f <@~|@floating>@ <|@
tid v1138 <|@
result [v54|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v447 
index: - 
=== Succesors ===
=== Usages ===
j449 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v447 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j449 <|@
result v55|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1138 
lastLocationAccess: - 
=== Succesors ===
next: i185 
=== Usages ===
v450 
=== Predecessor ===
v447 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1138 lastLocationAccess: - #next: i185  <|@  <|@
f <@~|@floating>@ <|@
tid a441 <|@
result v56|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1078 
=== Succesors ===
=== Usages ===
v450 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1078  <|@  <|@
tid v450 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j449 
metaspaceMethod: v447 
arguments: a441 a2 i3 a4 
=== Succesors ===
=== Usages ===
i185 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j449 metaspaceMethod: v447 arguments: a441 a2 i3 a4  <|@  <|@
tid ?191 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?192 
values: a363 a2 i3 a4 i139 
=== Succesors ===
=== Usages ===
?880 ?186 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?192 values: a363 a2 i3 a4 i139  <|@  <|@
f <@~|@floating>@ <|@
tid a412 <|@
result v57|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1071 
=== Succesors ===
=== Usages ===
?186 ?880 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1071  <|@  <|@
tid ?880 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?191 
values: a412 a2 - - i1080 
=== Succesors ===
=== Usages ===
i185 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?191 values: a412 a2 - - i1080  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i185 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v450 
stateDuring: ?880 
=== Succesors ===
next: a1081 
=== Usages ===
v164 ?186 
=== Predecessor ===
j449 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v450 stateDuring: ?880 #next: a1081  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1081 <|@
result v59|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: i1082 
=== Usages ===
a452 v1139 
=== Predecessor ===
i185 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1108 lastLocationAccess: - #next: i1082  <|@  <|@
tid ?186 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?191 
values: i185 a412 a2 - - i1080 
=== Succesors ===
=== Usages ===
v1171 i1082 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?191 values: i185 a412 a2 - - i1080  <|@  <|@
f <@~|@floating>@ <|@
tid v1139 <|@
result [v59|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1081 
=== Succesors ===
=== Usages ===
i1082 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1081  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1082 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-116491|0xfffffffffffe38f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?186 
guard: - 
address: v1139 
lastLocationAccess: - 
=== Succesors ===
next: i1083 
=== Usages ===
v459 
=== Predecessor ===
a1081 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?186 guard: - address: v1139 lastLocationAccess: - #next: i1083  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1083 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1133 
lastLocationAccess: - 
=== Succesors ===
next: v799 
=== Usages ===
j628 v459 
=== Predecessor ===
i1082 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1133 lastLocationAccess: - #next: v799  <|@  <|@
f <@~|@floating>@ <|@
tid v459 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1083 
y: i1082 
=== Succesors ===
=== Usages ===
v799 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1083 y: i1082  <|@  <|@
f <@*|@fixed>@ <|@
tid v799 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v459 
=== Succesors ===
trueSuccessor: v796 
falseSuccessor: v798 
=== Usages ===
=== Predecessor ===
i1083 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v459 #trueSuccessor: v796 #falseSuccessor: v798  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v796 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v466 
=== Usages ===
v466 
=== Predecessor ===
v799 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v466  <|@  <|@
f <@~|@floating>@ <|@
tid a452 <|@
result v62|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1081 
=== Succesors ===
=== Usages ===
v1140 a241 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1081  <|@  <|@
f <@~|@floating>@ <|@
tid j628 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1083 
=== Succesors ===
=== Usages ===
v1140 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1083  <|@  <|@
f <@~|@floating>@ <|@
tid v1140 <|@
result [v62|QWORD[.] + v61|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a452 
index: j628 
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a452 index: j628  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v796 
address: v1140 
lastLocationAccess: - 
value: i1080 
stateAfter: - 
=== Succesors ===
next: v168 
=== Usages ===
=== Predecessor ===
v796 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v796 address: v1140 lastLocationAccess: - value: i1080 stateAfter: - #next: v168  <|@  <|@
f <@~|@floating>@ <|@
tid v164 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i185 
y: i9 
=== Succesors ===
=== Usages ===
v168 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i185 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v168 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v164 
=== Succesors ===
trueSuccessor: v167 
falseSuccessor: v165 
=== Usages ===
=== Predecessor ===
v466 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v164 #trueSuccessor: v167 #falseSuccessor: v165  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v167 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v170 
=== Usages ===
=== Predecessor ===
v168 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v170  <|@  <|@
f <@~|@floating>@ <|@
tid i169 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
=== Inputs ===
x: i139 
y: i17 
=== Succesors ===
=== Usages ===
i139 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i139 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v170 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
loopBegin: v138 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v167 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v138  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v138 
=== Succesors ===
next: v207 
=== Usages ===
=== Predecessor ===
v168 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v138 #next: v207  <|@  <|@
f <@*|@fixed>@ <|@
tid v207 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v874 
=== Predecessor ===
v165 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v160 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v138 
=== Succesors ===
next: v125 
=== Usages ===
=== Predecessor ===
v863 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v138 #next: v125  <|@  <|@
f <@*|@fixed>@ <|@
tid v125 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v874 
=== Predecessor ===
v160 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v798 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1171 
=== Usages ===
=== Predecessor ===
v799 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1171  <|@  <|@
f <@*|@fixed>@ <|@
tid v1171 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 460
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?186 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v798 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?186  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v786 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v994 
=== Usages ===
=== Predecessor ===
v787 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v994  <|@  <|@
f <@~|@floating>@ <|@
tid i995 <|@
result int[-110619|0xfffffffffffe4fe5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -110619
stableDimension: 0
stamp: i32 [-110619]
stampKind: i32
value: int[-110619|0xfffffffffffe4fe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v994 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v786 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v778 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v990 
=== Usages ===
=== Predecessor ===
v779 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v990  <|@  <|@
f <@~|@floating>@ <|@
tid i991 <|@
result int[-106035|0xfffffffffffe61cd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -106035
stableDimension: 0
stamp: i32 [-106035]
stampKind: i32
value: int[-106035|0xfffffffffffe61cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v990 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v778 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v858 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v984 
=== Usages ===
=== Predecessor ===
v859 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v984  <|@  <|@
f <@~|@floating>@ <|@
tid i985 <|@
result int[-219155|0xfffffffffffca7ed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -219155
stableDimension: 0
stamp: i32 [-219155]
stampKind: i32
value: int[-219155|0xfffffffffffca7ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v984 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v858 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v766 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v982 
=== Usages ===
=== Predecessor ===
v767 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v982  <|@  <|@
f <@~|@floating>@ <|@
tid i983 <|@
result int[-96283|0xfffffffffffe87e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -96283
stableDimension: 0
stamp: i32 [-96283]
stampKind: i32
value: int[-96283|0xfffffffffffe87e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i977 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v982 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v974 
=== Predecessor ===
v766 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i977 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [-219155 - -96283] bits:1...1x0xxx0xxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v974 
values: i983 i985 i991 i995 
=== Succesors ===
=== Usages ===
v979 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v974 values: i983 i985 i991 i995  <|@  <|@
f <@~|@floating>@ <|@
tid j978 <|@
result v65|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64 [0 - 4500] bits:0...0xxx0xx00x0x00
valueDescription: i64
=== Inputs ===
merge: v974 
values: j898 j945 j952 j898 
=== Succesors ===
=== Usages ===
v979 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v974 values: j898 j945 j952 j898  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v974 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v982 v984 v990 v994 
=== Succesors ===
next: v979 
=== Usages ===
i977 j978 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v982 v984 v990 v994 #next: v979  <|@  <|@
f <@*|@fixed>@ <|@
tid v979 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateBefore: ?140 
actionAndReason: i977 
speculation: j978 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v974 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?140 actionAndReason: i977 speculation: j978  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v126 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: i1084 
=== Usages ===
=== Predecessor ===
v134 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1084  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1084 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-120587|0xfffffffffffe28f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1141 
lastLocationAccess: - 
=== Succesors ===
next: i1085 
=== Usages ===
v484 
=== Predecessor ===
v126 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1141 lastLocationAccess: - #next: i1085  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1085 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1125 
lastLocationAccess: - 
=== Succesors ===
next: v807 
=== Usages ===
v484 j630 
=== Predecessor ===
i1084 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1125 lastLocationAccess: - #next: v807  <|@  <|@
f <@~|@floating>@ <|@
tid v484 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1085 
y: i1084 
=== Succesors ===
=== Usages ===
v807 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1085 y: i1084  <|@  <|@
f <@*|@fixed>@ <|@
tid v807 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v484 
=== Succesors ===
trueSuccessor: v804 
falseSuccessor: v806 
=== Usages ===
=== Predecessor ===
i1085 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v484 #trueSuccessor: v804 #falseSuccessor: v806  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v804 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1086 
=== Usages ===
v491 
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1086  <|@  <|@
f <@~|@floating>@ <|@
tid v1143 <|@
result [v28|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1066 
=== Succesors ===
=== Usages ===
a1086 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1066  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1086 <|@
result v68|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1143 
lastLocationAccess: - 
=== Succesors ===
next: v1087 
=== Usages ===
a494 v1167 
=== Predecessor ===
v804 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1143 lastLocationAccess: - #next: v1087  <|@  <|@
f <@~|@floating>@ <|@
tid v1167 <|@
result [v68|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1086 
=== Succesors ===
=== Usages ===
v1087 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1086  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1087 <|@
result v69|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-126987|0xfffffffffffe0ff5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1167 
lastLocationAccess: - 
=== Succesors ===
next: i1088 
=== Usages ===
v1035 
=== Predecessor ===
a1086 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1167 lastLocationAccess: - #next: i1088  <|@  <|@
f <@~|@floating>@ <|@
tid j630 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1085 
=== Succesors ===
=== Usages ===
v1142 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1085  <|@  <|@
f <@~|@floating>@ <|@
tid v1142 <|@
result [v23|QWORD[.] + v67|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a240 
index: j630 
=== Succesors ===
=== Usages ===
v491 i1088 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a240 index: j630  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1088 <|@
result v70|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1142 
lastLocationAccess: - 
=== Succesors ===
next: v491 
=== Usages ===
?882 ?201 v519 ?205 
=== Predecessor ===
v1087 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1142 lastLocationAccess: - #next: v491  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v491 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v804 
address: v1142 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v500 
=== Usages ===
=== Predecessor ===
i1088 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v804 address: v1142 lastLocationAccess: - value: i3 stateAfter: - #next: v500  <|@  <|@
f <@~|@floating>@ <|@
tid v1035 <|@
result v71|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1087 
=== Succesors ===
=== Usages ===
v1144 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1087  <|@  <|@
f <@~|@floating>@ <|@
tid v1144 <|@
result [v71|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1035 
index: - 
=== Succesors ===
=== Usages ===
v500 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1035 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v500 <|@
result v73|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1144 
lastLocationAccess: - 
=== Succesors ===
next: j502 
=== Usages ===
v1145 v503 
=== Predecessor ===
v491 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1144 lastLocationAccess: - #next: j502  <|@  <|@
f <@~|@floating>@ <|@
tid v1145 <|@
result [v73|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v500 
index: - 
=== Succesors ===
=== Usages ===
j502 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v500 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j502 <|@
result v74|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1145 
lastLocationAccess: - 
=== Succesors ===
next: i200 
=== Usages ===
v503 
=== Predecessor ===
v500 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1145 lastLocationAccess: - #next: i200  <|@  <|@
f <@~|@floating>@ <|@
tid a494 <|@
result v75|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1086 
=== Succesors ===
=== Usages ===
v503 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1086  <|@  <|@
tid v503 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j502 
metaspaceMethod: v500 
arguments: a494 a2 i3 a4 
=== Succesors ===
=== Usages ===
i200 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j502 metaspaceMethod: v500 arguments: a494 a2 i3 a4  <|@  <|@
tid ?206 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
?882 ?201 ?205 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
tid ?882 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?206 
values: a363 a2 - - i1088 
=== Succesors ===
=== Usages ===
i200 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?206 values: a363 a2 - - i1088  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i200 <|@
result v76|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v503 
stateDuring: ?882 
=== Succesors ===
next: a1089 
=== Usages ===
v87 ?201 
=== Predecessor ===
j502 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v503 stateDuring: ?882 #next: a1089  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1089 <|@
result v77|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: i1090 
=== Usages ===
a505 v1146 
=== Predecessor ===
i200 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1108 lastLocationAccess: - #next: i1090  <|@  <|@
tid ?201 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?206 
values: i200 a363 a2 - - i1088 
=== Succesors ===
=== Usages ===
v1172 i1090 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?206 values: i200 a363 a2 - - i1088  <|@  <|@
f <@~|@floating>@ <|@
tid v1146 <|@
result [v77|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1089 
=== Succesors ===
=== Usages ===
i1090 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1089  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1090 <|@
result v78|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-130059|0xfffffffffffe03f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?201 
guard: - 
address: v1146 
lastLocationAccess: - 
=== Succesors ===
next: i1091 
=== Usages ===
v512 
=== Predecessor ===
a1089 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?201 guard: - address: v1146 lastLocationAccess: - #next: i1091  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1091 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1125 
lastLocationAccess: - 
=== Succesors ===
next: v819 
=== Usages ===
j631 v512 
=== Predecessor ===
i1090 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1125 lastLocationAccess: - #next: v819  <|@  <|@
f <@~|@floating>@ <|@
tid v512 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1091 
y: i1090 
=== Succesors ===
=== Usages ===
v819 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1091 y: i1090  <|@  <|@
f <@*|@fixed>@ <|@
tid v819 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v512 
=== Succesors ===
trueSuccessor: v816 
falseSuccessor: v818 
=== Usages ===
=== Predecessor ===
i1091 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v512 #trueSuccessor: v816 #falseSuccessor: v818  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v816 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v519 
=== Usages ===
v519 
=== Predecessor ===
v819 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v519  <|@  <|@
f <@~|@floating>@ <|@
tid a505 <|@
result v80|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1089 
=== Succesors ===
=== Usages ===
v1147 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1089  <|@  <|@
f <@~|@floating>@ <|@
tid j631 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1091 
=== Succesors ===
=== Usages ===
v1147 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1091  <|@  <|@
f <@~|@floating>@ <|@
tid v1147 <|@
result [v80|QWORD[.] + v79|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a505 
index: j631 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a505 index: j631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v519 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v816 
address: v1147 
lastLocationAccess: - 
value: i1088 
stateAfter: - 
=== Succesors ===
next: v868 
=== Usages ===
=== Predecessor ===
v816 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v816 address: v1147 lastLocationAccess: - value: i1088 stateAfter: - #next: v868  <|@  <|@
f <@~|@floating>@ <|@
tid v87 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i200 
y: i9 
=== Succesors ===
=== Usages ===
v868 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i200 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v868 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v87 
=== Succesors ===
trueSuccessor: v867 
falseSuccessor: v875 
=== Usages ===
=== Predecessor ===
v519 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v87 #trueSuccessor: v867 #falseSuccessor: v875  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v867 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v866 
=== Usages ===
=== Predecessor ===
v868 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v866  <|@  <|@
tid ?205 <|@
d <@d|@=== Debug Properties ===
bci: 44
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4971
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?206 
values: a363 a2 - - i1088 i9 
=== Succesors ===
=== Usages ===
v866 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?206 values: a363 a2 - - i1088 i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v866 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: UnreachedCode
speculation: {0x0000000000000f14[index: 120, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?205 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v867 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?205  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v875 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v876 
=== Usages ===
=== Predecessor ===
v868 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v876  <|@  <|@
f <@*|@fixed>@ <|@
tid v876 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v874 
=== Predecessor ===
v875 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v874 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v876 v125 v207 
=== Succesors ===
next: v89 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v876 v125 v207 #next: v89  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v818 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1172 
=== Usages ===
=== Predecessor ===
v819 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1172  <|@  <|@
f <@*|@fixed>@ <|@
tid v1172 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 513
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?201 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v818 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?201  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v806 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v964 
=== Usages ===
=== Predecessor ===
v807 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v964  <|@  <|@
f <@~|@floating>@ <|@
tid i965 <|@
result int[-124187|0xfffffffffffe1ae5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -124187
stableDimension: 0
stamp: i32 [-124187]
stampKind: i32
value: int[-124187|0xfffffffffffe1ae5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v964 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v806 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v129 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v959 
=== Usages ===
=== Predecessor ===
v134 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v959  <|@  <|@
f <@~|@floating>@ <|@
tid j961 <|@
result long[7060|0x1b94] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 7060
stableDimension: 0
stamp: i64 [7060]
stampKind: i64
value: long[7060|0x1b94]
=== Inputs ===
=== Succesors ===
=== Usages ===
j937 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i960 <|@
result int[-32819|0xffffffffffff7fcd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -32819
stableDimension: 0
stamp: i32 [-32819]
stampKind: i32
value: int[-32819|0xffffffffffff7fcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v959 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v129 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v81 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1092 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1092  <|@  <|@
f <@~|@floating>@ <|@
tid v1168 <|@
result [v26|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1064 
=== Succesors ===
=== Usages ===
v1092 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1064  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1092 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1168 
lastLocationAccess: - 
=== Succesors ===
next: v823 
=== Usages ===
v1047 
=== Predecessor ===
v81 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1168 lastLocationAccess: - #next: v823  <|@  <|@
f <@~|@floating>@ <|@
tid v1047 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v1092 
y: v1045 
=== Succesors ===
=== Usages ===
v823 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v1092 y: v1045  <|@  <|@
f <@*|@fixed>@ <|@
tid v823 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v1047 
=== Succesors ===
trueSuccessor: v820 
falseSuccessor: v822 
=== Usages ===
=== Predecessor ===
v1092 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v1047 #trueSuccessor: v820 #falseSuccessor: v822  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v820 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1093 
=== Usages ===
=== Predecessor ===
v823 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1093  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1093 <|@
result v81|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-136715|0xfffffffffffde9f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1141 
lastLocationAccess: - 
=== Succesors ===
next: i1094 
=== Usages ===
v547 
=== Predecessor ===
v820 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1141 lastLocationAccess: - #next: i1094  <|@  <|@
f <@~|@floating>@ <|@
tid v1148 <|@
result [v26|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1064 
=== Succesors ===
=== Usages ===
i1094 i1100 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1064  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1094 <|@
result v82|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1148 
lastLocationAccess: - 
=== Succesors ===
next: v831 
=== Usages ===
v547 j635 
=== Predecessor ===
i1093 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1148 lastLocationAccess: - #next: v831  <|@  <|@
f <@~|@floating>@ <|@
tid v547 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1094 
y: i1093 
=== Succesors ===
=== Usages ===
v831 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1094 y: i1093  <|@  <|@
f <@*|@fixed>@ <|@
tid v831 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v547 
=== Succesors ===
trueSuccessor: v828 
falseSuccessor: v830 
=== Usages ===
=== Predecessor ===
i1094 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v547 #trueSuccessor: v828 #falseSuccessor: v830  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v828 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: a1095 
=== Usages ===
v554 
=== Predecessor ===
v831 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a1095  <|@  <|@
f <@~|@floating>@ <|@
tid v1150 <|@
result [v26|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1064 
=== Succesors ===
=== Usages ===
a1095 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1064  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1095 <|@
result v83|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1150 
lastLocationAccess: - 
=== Succesors ===
next: v1096 
=== Usages ===
a557 v1169 
=== Predecessor ===
v828 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1150 lastLocationAccess: - #next: v1096  <|@  <|@
f <@~|@floating>@ <|@
tid v1169 <|@
result [v83|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1095 
=== Succesors ===
=== Usages ===
v1096 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1095  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v1096 <|@
result v84|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-143115|0xfffffffffffdd0f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?71 
guard: - 
address: v1169 
lastLocationAccess: - 
=== Succesors ===
next: i1097 
=== Usages ===
v1041 
=== Predecessor ===
a1095 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?71 guard: - address: v1169 lastLocationAccess: - #next: i1097  <|@  <|@
f <@~|@floating>@ <|@
tid j635 <|@
result v82|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1094 
=== Succesors ===
=== Usages ===
v1149 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1094  <|@  <|@
f <@~|@floating>@ <|@
tid v1149 <|@
result [v23|QWORD[.] + v82|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a240 
index: j635 
=== Succesors ===
=== Usages ===
v554 i1097 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a240 index: j635  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1097 <|@
result v85|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1149 
lastLocationAccess: - 
=== Succesors ===
next: v554 
=== Usages ===
?881 ?116 v582 
=== Predecessor ===
v1096 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1149 lastLocationAccess: - #next: v554  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v554 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v828 
address: v1149 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v563 
=== Usages ===
=== Predecessor ===
i1097 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v828 address: v1149 lastLocationAccess: - value: i3 stateAfter: - #next: v563  <|@  <|@
f <@~|@floating>@ <|@
tid v1041 <|@
result v86|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v1096 
=== Succesors ===
=== Usages ===
v1151 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v1096  <|@  <|@
f <@~|@floating>@ <|@
tid v1151 <|@
result [v86|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v1041 
index: - 
=== Succesors ===
=== Usages ===
v563 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v1041 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v563 <|@
result v88|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1151 
lastLocationAccess: - 
=== Succesors ===
next: j565 
=== Usages ===
v1152 v566 
=== Predecessor ===
v554 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1151 lastLocationAccess: - #next: j565  <|@  <|@
f <@~|@floating>@ <|@
tid v1152 <|@
result [v88|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v563 
index: - 
=== Succesors ===
=== Usages ===
j565 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v563 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j565 <|@
result v89|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1152 
lastLocationAccess: - 
=== Succesors ===
next: i115 
=== Usages ===
v566 
=== Predecessor ===
v563 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1152 lastLocationAccess: - #next: i115  <|@  <|@
f <@~|@floating>@ <|@
tid a557 <|@
result v90|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1095 
=== Succesors ===
=== Usages ===
v566 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1095  <|@  <|@
tid v566 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j565 
metaspaceMethod: v563 
arguments: a557 a2 i3 a4 
=== Succesors ===
=== Usages ===
i115 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j565 metaspaceMethod: v563 arguments: a557 a2 i3 a4  <|@  <|@
tid ?121 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?208 
values: a332 a2 i3 a4 i70 
=== Succesors ===
=== Usages ===
?881 ?116 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?208 values: a332 a2 i3 a4 i70  <|@  <|@
f <@~|@floating>@ <|@
tid a529 <|@
result v91|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a1064 
=== Succesors ===
=== Usages ===
?116 ?881 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1064  <|@  <|@
tid ?881 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?121 
values: a529 a2 - - i1097 
=== Succesors ===
=== Usages ===
i115 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?121 values: a529 a2 - - i1097  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i115 <|@
result v92|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v566 
stateDuring: ?881 
=== Succesors ===
next: a1098 
=== Usages ===
v93 ?116 
=== Predecessor ===
j565 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v566 stateDuring: ?881 #next: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a1098 <|@
result v93|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1108 
lastLocationAccess: - 
=== Succesors ===
next: i1099 
=== Usages ===
a568 v1153 
=== Predecessor ===
i115 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1108 lastLocationAccess: - #next: i1099  <|@  <|@
tid ?116 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?121 
values: i115 a529 a2 - - i1097 
=== Succesors ===
=== Usages ===
v1170 i1099 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?121 values: i115 a529 a2 - - i1097  <|@  <|@
f <@~|@floating>@ <|@
tid v1153 <|@
result [v93|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1098 
=== Succesors ===
=== Usages ===
i1099 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1098  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1099 <|@
result v94|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-146187|0xfffffffffffdc4f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?116 
guard: - 
address: v1153 
lastLocationAccess: - 
=== Succesors ===
next: i1100 
=== Usages ===
v575 
=== Predecessor ===
a1098 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?116 guard: - address: v1153 lastLocationAccess: - #next: i1100  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1100 <|@
result v95|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1148 
lastLocationAccess: - 
=== Succesors ===
next: v843 
=== Usages ===
j636 v575 
=== Predecessor ===
i1099 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1148 lastLocationAccess: - #next: v843  <|@  <|@
f <@~|@floating>@ <|@
tid v575 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1100 
y: i1099 
=== Succesors ===
=== Usages ===
v843 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i1100 y: i1099  <|@  <|@
f <@*|@fixed>@ <|@
tid v843 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v575 
=== Succesors ===
trueSuccessor: v840 
falseSuccessor: v842 
=== Usages ===
=== Predecessor ===
i1100 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v575 #trueSuccessor: v840 #falseSuccessor: v842  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v840 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v582 
=== Usages ===
v582 
=== Predecessor ===
v843 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v582  <|@  <|@
f <@~|@floating>@ <|@
tid a568 <|@
result v96|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a1098 
=== Succesors ===
=== Usages ===
v1154 a240 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a1098  <|@  <|@
f <@~|@floating>@ <|@
tid j636 <|@
result v95|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i1100 
=== Succesors ===
=== Usages ===
v1154 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i1100  <|@  <|@
f <@~|@floating>@ <|@
tid v1154 <|@
result [v96|QWORD[.] + v95|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a568 
index: j636 
=== Succesors ===
=== Usages ===
v582 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a568 index: j636  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v582 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v840 
address: v1154 
lastLocationAccess: - 
value: i1097 
stateAfter: - 
=== Succesors ===
next: v97 
=== Usages ===
=== Predecessor ===
v840 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v840 address: v1154 lastLocationAccess: - value: i1097 stateAfter: - #next: v97  <|@  <|@
f <@~|@floating>@ <|@
tid v93 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i115 
y: i9 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i115 y: i9  <|@  <|@
f <@*|@fixed>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 0.5999901871342643
stamp: void
=== Inputs ===
condition: v93 
=== Succesors ===
trueSuccessor: v96 
falseSuccessor: v94 
=== Usages ===
=== Predecessor ===
v582 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v93 #trueSuccessor: v96 #falseSuccessor: v94  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v96 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v99 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v99  <|@  <|@
f <@~|@floating>@ <|@
tid i98 <|@
result v97|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
=== Inputs ===
x: i70 
y: i17 
=== Succesors ===
=== Usages ===
i70 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i70 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v99 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
loopBegin: v69 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v96 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v69  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v69 
=== Succesors ===
next: v236 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v69 #next: v236  <|@  <|@
f <@*|@fixed>@ <|@
tid v236 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
v94 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v69 
=== Succesors ===
next: v42 
=== Usages ===
=== Predecessor ===
v874 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v69 #next: v42  <|@  <|@
f <@*|@fixed>@ <|@
tid v42 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
v89 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v842 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v1170 
=== Usages ===
=== Predecessor ===
v843 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v1170  <|@  <|@
f <@*|@fixed>@ <|@
tid v1170 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 576
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?116 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v842 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?116  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v830 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v955 
=== Usages ===
=== Predecessor ===
v831 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v955  <|@  <|@
f <@~|@floating>@ <|@
tid i956 <|@
result int[-140315|0xfffffffffffddbe5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -140315
stableDimension: 0
stamp: i32 [-140315]
stampKind: i32
value: int[-140315|0xfffffffffffddbe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v955 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v830 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v822 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v950 
=== Usages ===
=== Predecessor ===
v823 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v950  <|@  <|@
f <@~|@floating>@ <|@
tid i951 <|@
result int[-135987|0xfffffffffffdeccd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -135987
stableDimension: 0
stamp: i32 [-135987]
stampKind: i32
value: int[-135987|0xfffffffffffdeccd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v950 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v822 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v854 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v943 
=== Usages ===
=== Predecessor ===
v855 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v943  <|@  <|@
f <@~|@floating>@ <|@
tid i944 <|@
result int[-218131|0xfffffffffffcabed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -218131
stableDimension: 0
stamp: i32 [-218131]
stampKind: i32
value: int[-218131|0xfffffffffffcabed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v943 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v854 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v750 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v941 
=== Usages ===
=== Predecessor ===
v751 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v941  <|@  <|@
f <@~|@floating>@ <|@
tid i942 <|@
result int[-88603|0xfffffffffffea5e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -88603
stableDimension: 0
stamp: i32 [-88603]
stampKind: i32
value: int[-88603|0xfffffffffffea5e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i936 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v941 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v933 
=== Predecessor ===
v750 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i936 <|@
result v98|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [-218131 - -32819] bits:1...1xxxxxxxxxx11x0x101
valueDescription: i32
=== Inputs ===
merge: v933 
values: i942 i944 i951 i956 i960 i965 
=== Succesors ===
=== Usages ===
v938 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v933 values: i942 i944 i951 i956 i960 i965  <|@  <|@
f <@~|@floating>@ <|@
tid j937 <|@
result v99|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64 [0 - 7060] bits:0...0xxxxxx00x0x00
valueDescription: i64
=== Inputs ===
merge: v933 
values: j898 j945 j952 j898 j961 j898 
=== Succesors ===
=== Usages ===
v938 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v933 values: j898 j945 j952 j898 j961 j898  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v933 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v941 v943 v950 v955 v959 v964 
=== Succesors ===
next: v938 
=== Usages ===
i936 j937 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v941 v943 v950 v955 v959 v964 #next: v938  <|@  <|@
f <@*|@fixed>@ <|@
tid v938 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateBefore: ?71 
actionAndReason: i936 
speculation: j937 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v933 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?71 actionAndReason: i936 speculation: j937  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v742 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v927 
=== Usages ===
=== Predecessor ===
v743 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v927  <|@  <|@
f <@~|@floating>@ <|@
tid j929 <|@
result long[2580|0xa14] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 2580
stableDimension: 0
stamp: i64 [2580]
stampKind: i64
value: long[2580|0xa14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j920 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i928 <|@
result int[-85555|0xfffffffffffeb1cd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -85555
stableDimension: 0
stamp: i32 [-85555]
stampKind: i32
value: int[-85555|0xfffffffffffeb1cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i919 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v927 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v916 
=== Predecessor ===
v742 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: i1101 
=== Usages ===
v609 
=== Predecessor ===
v54 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1101  <|@  <|@
f <@~|@floating>@ <|@
tid v1155 <|@
result [v1|QWORD[.] + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i1101 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1101 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.acceptMode
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 1]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1155 
lastLocationAccess: - 
=== Succesors ===
next: v217 
=== Usages ===
v214 
=== Predecessor ===
v46 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1155 lastLocationAccess: - #next: v217  <|@  <|@
f <@~|@floating>@ <|@
tid v214 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 5]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i1101 
y: i17 
=== Succesors ===
=== Usages ===
v217 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i1101 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v217 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 5]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: PROFILED designatedSuccessorProbability: 1.7961272660182992E-5
stamp: void
=== Inputs ===
condition: v214 
=== Succesors ===
trueSuccessor: v216 
falseSuccessor: v215 
=== Usages ===
=== Predecessor ===
i1101 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v214 #trueSuccessor: v216 #falseSuccessor: v215  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v216 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 8]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: i1102 
=== Usages ===
=== Predecessor ===
v217 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i1102  <|@  <|@
f <@~|@floating>@ <|@
tid v1160 <|@
result [v1|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i1102 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1102 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.to
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 10]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1160 
lastLocationAccess: - 
=== Succesors ===
next: v873 
=== Usages ===
v219 
=== Predecessor ===
v216 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1160 lastLocationAccess: - #next: v873  <|@  <|@
f <@~|@floating>@ <|@
tid v219 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 13]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i1102 
=== Succesors ===
=== Usages ===
v873 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i3 y: i1102  <|@  <|@
f <@*|@fixed>@ <|@
tid v873 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 13]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v219 
=== Succesors ===
trueSuccessor: v871 
falseSuccessor: v872 
=== Usages ===
=== Predecessor ===
i1102 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v219 #trueSuccessor: v871 #falseSuccessor: v872  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v871 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v223 
=== Usages ===
=== Predecessor ===
v873 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v223  <|@  <|@
f <@*|@fixed>@ <|@
tid v223 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v222 
=== Predecessor ===
v871 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v872 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3757) [bci: 13]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v930 
=== Usages ===
=== Predecessor ===
v873 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v930  <|@  <|@
f <@~|@floating>@ <|@
tid j932 <|@
result long[1940|0x794] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 1940
stableDimension: 0
stamp: i64 [1940]
stampKind: i64
value: long[1940|0x794]
=== Inputs ===
=== Succesors ===
=== Usages ===
j920 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i931 <|@
result int[-222739|0xfffffffffffc99ed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -222739
stableDimension: 0
stamp: i32 [-222739]
stampKind: i32
value: int[-222739|0xfffffffffffc99ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i919 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v930 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v916 
=== Predecessor ===
v872 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v215 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
next: v221 
=== Usages ===
=== Predecessor ===
v217 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v221  <|@  <|@
f <@*|@fixed>@ <|@
tid v221 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v222 
=== Predecessor ===
v215 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v222 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 18]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v221 v223 
=== Succesors ===
next: v588 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v221 v223 #next: v588  <|@  <|@
f <@~|@floating>@ <|@
tid v1156 <|@
result [v1|QWORD[.] + 32] <|@
d <@d|@=== Debug Properties ===
displacement: 32
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
v588 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v588 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Matcher.last
location: Matcher.last
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3759) [bci: 20]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1156 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: i1103 
=== Usages ===
=== Predecessor ===
v222 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v1156 lastLocationAccess: - value: i3 stateAfter: - #next: i1103  <|@  <|@
f <@~|@floating>@ <|@
tid v1157 <|@
result [v1|QWORD[.] + 28] <|@
d <@d|@=== Debug Properties ===
displacement: 28
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i1103 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i1103 <|@
result v100|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.first
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3760) [bci: 29]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v1157 
lastLocationAccess: - 
=== Succesors ===
next: v600 
=== Usages ===
v600 
=== Predecessor ===
v588 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v1157 lastLocationAccess: - #next: v600  <|@  <|@
f <@~|@floating>@ <|@
tid v1158 <|@
result [v5|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1049 
=== Succesors ===
=== Usages ===
v600 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1049  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v600 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3760) [bci: 32]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v728 
address: v1158 
lastLocationAccess: - 
value: i1103 
stateAfter: - 
=== Succesors ===
next: v609 
=== Usages ===
=== Predecessor ===
i1103 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v728 address: v1158 lastLocationAccess: - value: i1103 stateAfter: - #next: v609  <|@  <|@
f <@~|@floating>@ <|@
tid v1159 <|@
result [v5|DWORD[_] * 8 + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a1049 
=== Succesors ===
=== Usages ===
v609 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a1049  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v609 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$LastNode.match(Pattern.java:3761) [bci: 42]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v46 
address: v1159 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v600 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v46 address: v1159 lastLocationAccess: - value: i3 stateAfter: - #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v36 
=== Predecessor ===
v609 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
ends: v42 v47 v236 
=== Succesors ===
next: v35 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v42 v47 v236 #next: v35  <|@  <|@
f <@*|@fixed>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:5001) [bci: 77]
stamp: void
=== Inputs ===
memoryMap: - 
result: i17 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v36 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i17  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
=== Succesors ===
next: v924 
=== Usages ===
=== Predecessor ===
v54 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v924  <|@  <|@
f <@~|@floating>@ <|@
tid j926 <|@
result long[1300|0x514] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: 1300
stableDimension: 0
stamp: i64 [1300]
stampKind: i64
value: long[1300|0x514]
=== Inputs ===
=== Succesors ===
=== Usages ===
j920 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i925 <|@
result int[-12339|0xffffffffffffcfcd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
rawvalue: -12339
stableDimension: 0
stamp: i32 [-12339]
stampKind: i32
value: int[-12339|0xffffffffffffcfcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i919 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v924 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v916 
=== Predecessor ===
v49 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i919 <|@
result v101|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i32 [-222739 - -12339] bits:1...1xx1xxxxxx111x01101
valueDescription: i32
=== Inputs ===
merge: v916 
values: i925 i928 i931 
=== Succesors ===
=== Usages ===
v921 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v916 values: i925 i928 i931  <|@  <|@
f <@~|@floating>@ <|@
tid j920 <|@
result v102|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: i64 [1300 - 2580] bits:0...0xxxxx0010100
valueDescription: i64
=== Inputs ===
merge: v916 
values: j926 j929 j932 
=== Succesors ===
=== Usages ===
v921 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v916 values: j926 j929 j932  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v916 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v924 v927 v930 
=== Succesors ===
next: v921 
=== Usages ===
i919 j920 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v924 v927 v930 #next: v921  <|@  <|@
f <@*|@fixed>@ <|@
tid v921 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
stamp: void
=== Inputs ===
stateBefore: ?28 
actionAndReason: i919 
speculation: j920 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v916 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?28 actionAndReason: i919 speculation: j920  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v730 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4999) [bci: 62]
stamp: void
=== Inputs ===
=== Succesors ===
next: v912 
=== Usages ===
=== Predecessor ===
v731 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v912  <|@  <|@
f <@~|@floating>@ <|@
tid i913 <|@
result int[-81691|0xfffffffffffec0e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -81691
stableDimension: 0
stamp: i32 [-81691]
stampKind: i32
value: int[-81691|0xfffffffffffec0e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v912 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v730 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v726 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4998) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v910 
=== Usages ===
=== Predecessor ===
v727 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v910  <|@  <|@
f <@~|@floating>@ <|@
tid i911 <|@
result int[-79387|0xfffffffffffec9e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -79387
stableDimension: 0
stamp: i32 [-79387]
stampKind: i32
value: int[-79387|0xfffffffffffec9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v910 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v726 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v718 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v906 
=== Usages ===
=== Predecessor ===
v719 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v906  <|@  <|@
f <@~|@floating>@ <|@
tid i907 <|@
result int[-69403|0xfffffffffffef0e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
rawvalue: -69403
stableDimension: 0
stamp: i32 [-69403]
stampKind: i32
value: int[-69403|0xfffffffffffef0e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i899 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v906 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v895 
=== Predecessor ===
v718 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i899 <|@
result v103|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: i32 [-217107 - -69403] bits:1...1x01xxxxxxx1110x101
valueDescription: i32
=== Inputs ===
merge: v895 
values: i907 i911 i913 i915 
=== Succesors ===
=== Usages ===
v901 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v895 values: i907 i911 i913 i915  <|@  <|@
f <@~|@floating>@ <|@
tid j900 <|@
result v104|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: i64 [0 - 20] bits:0...0x0x00
valueDescription: i64
=== Inputs ===
merge: v895 
values: j898 j898 j898 j283 
=== Succesors ===
=== Usages ===
v901 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v895 values: j898 j898 j898 j283  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v895 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v906 v910 v912 v914 
=== Succesors ===
next: v901 
=== Usages ===
i899 j900 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v906 v910 v912 v914 #next: v901  <|@  <|@
f <@*|@fixed>@ <|@
tid v901 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 1]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i899 
speculation: j900 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v895 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i899 speculation: j900  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGTSlowdown"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr   -1  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr   -1  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr   -1  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr   -1  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr   -1  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   40  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  162  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  164  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  356  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  378  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr  384  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  386  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr  390  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  656  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  664  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  666  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  670  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  672  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  676  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  840  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  854  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  964  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  972  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr  974  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  978  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  980  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  984  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   40  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  162  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  164  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  356  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  378  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr  384  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  386  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr  390  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  656  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  664  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  666  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  670  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  672  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  676  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  840  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  854  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  964  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  972  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr  974  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  978  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  980  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  984  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v89|q [0, 1[[380, 384[[666, 670[[850, 854[[974, 978[[1068, 1070[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 38[[374, 383[[660, 669[[844, 853[[968, 977[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 36[[372, 383[[658, 669[[842, 853[[966, 977[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v88|q [0, 1[[378, 383[[664, 669[[848, 853[[972, 977[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 30[[382, 383[[668, 669[[852, 853[[976, 977[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v90|q [0, 34[[370, 383[[656, 669[[840, 853[[964, 977[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 40[[376, 383[[662, 669[[846, 853[[970, 977[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  v0|q QWORD "[v0|q]" v0|q rsi|- [34, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[34 MustHaveRegister 48 MustHaveRegister 68 MustHaveRegister 108 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|- [36, 756[[774, 858[[868, 1010[[1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[36 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister 372 ShouldHaveRegister 386 MustHaveRegister 429 LiveAtLoopEnd 658 ShouldHaveRegister 672 MustHaveRegister 715 LiveAtLoopEnd 726 MustHaveRegister 754 MustHaveRegister 756 MustHaveRegister 842 ShouldHaveRegister 966 ShouldHaveRegister 980 MustHaveRegister 1082 MustHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|- [38, 760[[774, 858[[868, 1010[[1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[38 MustHaveRegister 166 MustHaveRegister 356 MustHaveRegister 374 ShouldHaveRegister 429 LiveAtLoopEnd 642 MustHaveRegister 660 ShouldHaveRegister 715 LiveAtLoopEnd 754 MustHaveRegister 760 MustHaveRegister 844 ShouldHaveRegister 952 MustHaveRegister 968 ShouldHaveRegister 1082 MustHaveRegister  "NoSpillStore"
  v3|q QWORD "[v3|q]" v3|q r8|- [40, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[40 MustHaveRegister 376 ShouldHaveRegister 429 LiveAtLoopEnd 662 ShouldHaveRegister 715 LiveAtLoopEnd 846 ShouldHaveRegister 970 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d -1 [42, 112[42 MustHaveRegister 46 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [44, 174[[716, 760[[1072, 1094[44 MustHaveRegister 66 MustHaveRegister 158 MustHaveRegister 758 MustHaveRegister 760 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d -1 [46, 50[46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [48, 114[48 MustHaveRegister 50 ShouldHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d -1 [66, 86[66 MustHaveRegister 70 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[v9|d]" v9|d -1 [68, 164[68 MustHaveRegister 70 ShouldHaveRegister 84 ShouldHaveRegister 162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[v10|d]" v10|d v9|d [84, 166[84 MustHaveRegister 86 ShouldHaveRegister 160 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[v11|d]" v11|d -1 [108, 186[108 MustHaveRegister 110 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d -1 [110, 170[110 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[v13|q]" v13|q v4|d [112, 205[112 MustHaveRegister 114 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d -1 [114, 190[[716, 728[[1072, 1084[[1104, 1114[[1158, 1168[[1334, 1365[114 MustHaveRegister 116 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[v15|q]" v15|q v5|d [158, 166[158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d -1 [160, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1429[160 MustHaveRegister  "NoSpillStore"
  v17|d DWORD "[v17|d]" v17|d -1 [162, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1429[162 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[v18|q]" v18|q v12|d [170, 173[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v19|q QWORD "[v19|q]" v19|q -1 [168, 171[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v20|d DWORD "[v20|d]" v20|d -1 [186, 468[186 MustHaveRegister 188 MustHaveRegister 202 MustHaveRegister 218 MustHaveRegister 232 MustHaveRegister 429 LiveAtLoopEnd 468 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[v21|q]" v21|q v20|d [202, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1429[202 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[v22|d]" v22|d v97|d [206, 426[[430, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1429[220 MustHaveRegister 232 MustHaveRegister 252 MustHaveRegister 426 ShouldHaveRegister  "NoSpillStore"
  v23|q QWORD "[v23|q]" v23|q v13|q [206, 356[[430, 491[[868, 952[282 MustHaveRegister 354 MustHaveRegister 356 MustHaveRegister 490 ShouldHaveRegister 882 MustHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[v24|d]" v24|d -1 [218, 250[218 MustHaveRegister 220 MustHaveRegister 250 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[v25|q]" v25|q v24|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[v26|d]" v26|d -1 [252, 390[252 MustHaveRegister 254 MustHaveRegister 266 MustHaveRegister 284 MustHaveRegister 350 MustHaveRegister 368 MustHaveRegister 390 MustHaveRegister  "NoSpillStore"
  v27|d DWORD "[v27|d]" v27|d -1 [468, 470[468 MustHaveRegister 470 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d -1 [470, 716[[774, 824[[868, 984[470 MustHaveRegister 472 MustHaveRegister 478 MustHaveRegister 504 MustHaveRegister 518 MustHaveRegister 715 LiveAtLoopEnd 824 MustHaveRegister 884 MustHaveRegister 946 MustHaveRegister 984 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d -1 [472, 476[472 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v30|q QWORD "[v30|q]" v30|q v29|d [476, 481[476 MustHaveRegister 480 MustHaveRegister  "NoSpillStore"
  v31|q QWORD "[v31|q]" v31|q -1 [474, 477[474 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[v32|q]" v32|q v28|d [478, 716[[774, 858[[868, 1010[[1114, 1135[[1136, 1157[[1178, 1198[[1208, 1218[[1228, 1259[[1292, 1313[[1376, 1397[478 MustHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d v63|d [492, 712[[774, 858[[1114, 1135[[1178, 1198[[1208, 1218[[1228, 1259[[1376, 1397[506 MustHaveRegister 518 MustHaveRegister 538 MustHaveRegister 712 ShouldHaveRegister  "NoSpillStore"
  v34|q QWORD "[v34|q]" v34|q v23|q [492, 642[568 MustHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d -1 [504, 536[504 MustHaveRegister 506 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[v36|q]" v36|q v35|d [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d -1 [538, 676[538 MustHaveRegister 540 MustHaveRegister 552 MustHaveRegister 570 MustHaveRegister 636 MustHaveRegister 654 MustHaveRegister 676 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d -1 [824, 826[824 MustHaveRegister 826 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [826, 838[826 MustHaveRegister 828 MustHaveRegister 838 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d -1 [828, 832[828 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[v41|q]" v41|q v40|d [832, 834[832 MustHaveRegister 834 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[v42|q]" v42|q -1 [830, 833[830 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[v43|q]" v43|q -1 [834, 848[834 MustHaveRegister 836 MustHaveRegister 848 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[v44|q]" v44|q -1 [836, 850[836 MustHaveRegister 850 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[v45|q]" v45|q v39|d [838, 840[838 MustHaveRegister 840 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d rax|d [854, 856[854 MustHaveRegister 856 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d -1 [568, 572[568 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d -1 [570, 642[570 MustHaveRegister 572 ShouldHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d -1 [636, 652[636 MustHaveRegister 638 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d -1 [638, 646[638 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d -1 [640, 698[[1114, 1135[640 MustHaveRegister 698 MustHaveRegister  "NoSpillStore"
  v52|q QWORD "[v52|q]" v52|q v50|d [646, 648[646 MustHaveRegister 648 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[v53|q]" v53|q -1 [644, 647[644 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[v54|q]" v54|q -1 [648, 664[648 MustHaveRegister 650 MustHaveRegister 664 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[v55|q]" v55|q -1 [650, 666[650 MustHaveRegister 666 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[v56|q]" v56|q v49|d [652, 656[652 MustHaveRegister 656 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[v57|q]" v57|q v37|d [654, 680[[1114, 1135[654 MustHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d rax|d [670, 700[[1114, 1135[670 MustHaveRegister 700 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d -1 [672, 696[672 MustHaveRegister 674 MustHaveRegister 696 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d -1 [674, 678[674 MustHaveRegister 678 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d -1 [676, 698[676 MustHaveRegister 678 ShouldHaveRegister 698 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[v62|q]" v62|q v59|d [696, 715[696 MustHaveRegister 698 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v33|d [712, 715[712 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d -1 [1238, 1254[1254 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[v65|q]" v65|q -1 [1238, 1256[1256 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d -1 [882, 886[882 MustHaveRegister 886 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[v67|d]" v67|d -1 [884, 952[884 MustHaveRegister 886 ShouldHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[v68|d]" v68|d -1 [946, 962[946 MustHaveRegister 948 MustHaveRegister 962 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[v69|d]" v69|d -1 [948, 956[948 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v70|d DWORD "[v70|d]" v70|d -1 [950, 1010[[1136, 1157[[1292, 1313[950 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v71|q QWORD "[v71|q]" v71|q v69|d [956, 958[956 MustHaveRegister 958 MustHaveRegister  "NoSpillStore"
  v72|q QWORD "[v72|q]" v72|q -1 [954, 957[954 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v73|q QWORD "[v73|q]" v73|q -1 [958, 972[958 MustHaveRegister 960 MustHaveRegister 972 ShouldHaveRegister  "NoSpillStore"
  v74|q QWORD "[v74|q]" v74|q -1 [960, 974[960 MustHaveRegister 974 ShouldHaveRegister  "NoSpillStore"
  v75|q QWORD "[v75|q]" v75|q v68|d [962, 964[962 MustHaveRegister 964 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[v76|d]" v76|d rax|d [978, 1008[[1292, 1313[978 MustHaveRegister 1008 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[v77|d]" v77|d -1 [980, 1004[980 MustHaveRegister 982 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[v78|d]" v78|d -1 [982, 986[982 MustHaveRegister 986 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[v79|d]" v79|d -1 [984, 1006[984 MustHaveRegister 986 ShouldHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[v80|q]" v80|q v77|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[v81|d]" v81|d -1 [282, 286[282 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[v82|d]" v82|d -1 [284, 356[284 MustHaveRegister 286 ShouldHaveRegister 354 MustHaveRegister 356 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[v83|d]" v83|d -1 [350, 366[350 MustHaveRegister 352 MustHaveRegister 366 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[v84|d]" v84|d -1 [352, 360[352 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v85|d DWORD "[v85|d]" v85|d -1 [354, 412[[1260, 1281[354 MustHaveRegister 412 MustHaveRegister  "NoSpillStore"
  v86|q QWORD "[v86|q]" v86|q v84|d [360, 362[360 MustHaveRegister 362 MustHaveRegister  "NoSpillStore"
  v87|q QWORD "[v87|q]" v87|q -1 [358, 361[358 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[v88|q]" v88|q -1 [362, 378[362 MustHaveRegister 364 MustHaveRegister 378 ShouldHaveRegister  "NoSpillStore"
  v89|q QWORD "[v89|q]" v89|q -1 [364, 380[364 MustHaveRegister 380 ShouldHaveRegister  "NoSpillStore"
  v90|q QWORD "[v90|q]" v90|q v83|d [366, 370[366 MustHaveRegister 370 ShouldHaveRegister  "NoSpillStore"
  v91|q QWORD "[v91|q]" v91|q v26|d [368, 394[[1260, 1281[368 MustHaveRegister  "NoSpillStore"
  v92|d DWORD "[v92|d]" v92|d rax|d [384, 414[[1260, 1281[384 MustHaveRegister 414 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[v93|d]" v93|d -1 [386, 410[386 MustHaveRegister 388 MustHaveRegister 410 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[v94|d]" v94|d -1 [388, 392[388 MustHaveRegister 392 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[v95|d]" v95|d -1 [390, 412[390 MustHaveRegister 392 ShouldHaveRegister 412 MustHaveRegister  "NoSpillStore"
  v96|q QWORD "[v96|q]" v96|q v93|d [410, 429[410 MustHaveRegister 412 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[v97|d]" v97|d v22|d [426, 429[426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[v98|d]" v98|d -1 [1408, 1424[1424 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[v99|q]" v99|q -1 [1408, 1426[1426 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[v100|d]" v100|d -1 [756, 758[756 MustHaveRegister 758 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[v101|d]" v101|d -1 [1344, 1360[1360 MustHaveRegister  "NoSpillStore"
  v102|q QWORD "[v102|q]" v102|q -1 [1344, 1362[1362 MustHaveRegister  "NoSpillStore"
  v103|d DWORD "[v103|d]" v103|d -1 [1440, 1456[1456 MustHaveRegister  "NoSpillStore"
  v104|q QWORD "[v104|q]" v104|q -1 [1440, 1458[1458 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v89|q [0, 1[[380, 384[[666, 670[[850, 854[[974, 978[[1068, 1070[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 38[[374, 383[[660, 669[[844, 853[[968, 977[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 36[[372, 383[[658, 669[[842, 853[[966, 977[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v88|q [0, 1[[378, 383[[664, 669[[848, 853[[972, 977[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 30[[382, 383[[668, 669[[852, 853[[976, 977[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v90|q [0, 34[[370, 383[[656, 669[[840, 853[[964, 977[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 40[[376, 383[[662, 669[[846, 853[[970, 977[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [34, 206[34 MustHaveRegister 48 MustHaveRegister 68 MustHaveRegister 108 MustHaveRegister  "SpillInDominator"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [36, 371[36 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [38, 373[38 MustHaveRegister 166 MustHaveRegister 356 MustHaveRegister  "SpillInDominator"
  v3|q QWORD "[r8|q]" v3|q r8|- [40, 375[40 MustHaveRegister  "SpillInDominator"
  v4|d DWORD "[rbx|d]" v4|d -1 [42, 112[42 MustHaveRegister 46 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [44, 161[44 MustHaveRegister 66 MustHaveRegister 158 MustHaveRegister  "OneSpillStore"
  v6|d DWORD "[rax|d]" v6|d -1 [46, 50[46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r11|d]" v7|d -1 [48, 114[48 MustHaveRegister 50 ShouldHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rax|d]" v8|d -1 [66, 86[66 MustHaveRegister 70 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[r9|d]" v9|d -1 [68, 164[68 MustHaveRegister 70 ShouldHaveRegister 84 ShouldHaveRegister 162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rdi|d]" v10|d v9|d [84, 166[84 MustHaveRegister 86 ShouldHaveRegister 160 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d -1 [108, 186[108 MustHaveRegister 110 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rbp|d]" v12|d -1 [110, 170[110 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rbx|q]" v13|q v4|d [112, 205[112 MustHaveRegister 114 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[r11|d]" v14|d -1 [114, 190[114 MustHaveRegister 116 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[r13|q]" v15|q v5|d [158, 166[158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[r14|d]" v16|d -1 [160, 206[160 MustHaveRegister  "SpillInDominator"
  v17|d DWORD "[r10|d]" v17|d -1 [162, 206[162 MustHaveRegister  "SpillInDominator"
  v18|q QWORD "[rbp|q]" v18|q v12|d [170, 173[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v19|q QWORD "[r9|q]" v19|q -1 [168, 171[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v20|d DWORD "[r9|d]" v20|d -1 [186, 288[186 MustHaveRegister 188 MustHaveRegister 202 MustHaveRegister 218 MustHaveRegister 232 MustHaveRegister  "SpillInDominator"
  v21|q QWORD "[r11|q]" v21|q v20|d [202, 206[202 MustHaveRegister  "SpillInDominator"
  v22|d DWORD "[r10|d]" v22|d v97|d [206, 288[220 MustHaveRegister 232 MustHaveRegister 252 MustHaveRegister  "SpillInDominator"
  v23|q QWORD "[rbx|q]" v23|q v13|q [206, 356[[430, 491[[868, 952[282 MustHaveRegister 354 MustHaveRegister 356 MustHaveRegister 490 ShouldHaveRegister 882 MustHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rax|d]" v24|d -1 [218, 250[218 MustHaveRegister 220 MustHaveRegister 250 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rax|q]" v25|q v24|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[rbp|d]" v26|d -1 [252, 381[252 MustHaveRegister 254 MustHaveRegister 266 MustHaveRegister 284 MustHaveRegister 350 MustHaveRegister 368 MustHaveRegister  "OneSpillStore"
  v27|d DWORD "[rsi|d]" v27|d -1 [468, 470[468 MustHaveRegister 470 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d -1 [470, 574[470 MustHaveRegister 472 MustHaveRegister 478 MustHaveRegister 504 MustHaveRegister 518 MustHaveRegister  "SpillInDominator"
  v29|d DWORD "[rsi|d]" v29|d -1 [472, 476[472 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v30|q QWORD "[rsi|q]" v30|q v29|d [476, 481[476 MustHaveRegister 480 MustHaveRegister  "NoSpillStore"
  v31|q QWORD "[rcx|q]" v31|q -1 [474, 477[474 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[r11|q]" v32|q v28|d [478, 492[478 MustHaveRegister  "SpillInDominator"
  v33|d DWORD "[r11|d]" v33|d v63|d [492, 574[506 MustHaveRegister 518 MustHaveRegister 538 MustHaveRegister  "OneSpillStore"
  v34|q QWORD "[rbx|q]" v34|q v23|q [492, 642[568 MustHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rsi|d]" v35|d -1 [504, 536[504 MustHaveRegister 506 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rsi|q]" v36|q v35|d [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [538, 667[538 MustHaveRegister 540 MustHaveRegister 552 MustHaveRegister 570 MustHaveRegister 636 MustHaveRegister 654 MustHaveRegister  "OneSpillStore"
  v38|d DWORD "[rsi|d]" v38|d -1 [824, 826[824 MustHaveRegister 826 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [826, 838[826 MustHaveRegister 828 MustHaveRegister 838 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[r8|d]" v40|d -1 [828, 832[828 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[r8|q]" v41|q v40|d [832, 834[832 MustHaveRegister 834 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[rbx|q]" v42|q -1 [830, 833[830 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[rbx|q]" v43|q -1 [834, 848[834 MustHaveRegister 836 MustHaveRegister 848 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[rax|q]" v44|q -1 [836, 850[836 MustHaveRegister 850 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[rsi|q]" v45|q v39|d [838, 840[838 MustHaveRegister 840 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d rax|d [854, 856[854 MustHaveRegister 856 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rsi|d]" v47|d -1 [568, 572[568 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d -1 [570, 642[570 MustHaveRegister 572 ShouldHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rsi|d]" v49|d -1 [636, 652[636 MustHaveRegister 638 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[rax|d]" v50|d -1 [638, 646[638 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rbp|d]" v51|d -1 [640, 667[640 MustHaveRegister  "OneSpillStore"
  v52|q QWORD "[rax|q]" v52|q v50|d [646, 648[646 MustHaveRegister 648 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[r8|q]" v53|q -1 [644, 647[644 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rbx|q]" v54|q -1 [648, 664[648 MustHaveRegister 650 MustHaveRegister 664 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[rax|q]" v55|q -1 [650, 666[650 MustHaveRegister 666 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rsi|q]" v56|q v49|d [652, 656[652 MustHaveRegister 656 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[r13|q]" v57|q v37|d [654, 667[654 MustHaveRegister  "OneSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [670, 700[[1114, 1135[670 MustHaveRegister 700 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rsi|d]" v59|d -1 [672, 696[672 MustHaveRegister 674 MustHaveRegister 696 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rcx|d]" v60|d -1 [674, 678[674 MustHaveRegister 678 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [676, 698[676 MustHaveRegister 678 ShouldHaveRegister 698 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[rsi|q]" v62|q v59|d [696, 715[696 MustHaveRegister 698 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r11|d]" v63|d v33|d [712, 715[712 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d -1 [1238, 1254[1254 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[r11|q]" v65|q -1 [1238, 1256[1256 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[rsi|d]" v66|d -1 [882, 886[882 MustHaveRegister 886 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[rdx|d]" v67|d -1 [884, 952[884 MustHaveRegister 886 ShouldHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[rsi|d]" v68|d -1 [946, 962[946 MustHaveRegister 948 MustHaveRegister 962 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r8|d]" v69|d -1 [948, 956[948 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v70|d DWORD "[r9|d]" v70|d -1 [950, 975[950 MustHaveRegister  "OneSpillStore"
  v71|q QWORD "[r8|q]" v71|q v69|d [956, 958[956 MustHaveRegister 958 MustHaveRegister  "NoSpillStore"
  v72|q QWORD "[rdx|q]" v72|q -1 [954, 957[954 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v73|q QWORD "[rbx|q]" v73|q -1 [958, 972[958 MustHaveRegister 960 MustHaveRegister 972 ShouldHaveRegister  "NoSpillStore"
  v74|q QWORD "[rax|q]" v74|q -1 [960, 974[960 MustHaveRegister 974 ShouldHaveRegister  "NoSpillStore"
  v75|q QWORD "[rsi|q]" v75|q v68|d [962, 964[962 MustHaveRegister 964 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[rax|d]" v76|d rax|d [978, 1008[[1292, 1313[978 MustHaveRegister 1008 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d -1 [980, 1004[980 MustHaveRegister 982 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[r11|d]" v78|d -1 [982, 986[982 MustHaveRegister 986 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d -1 [984, 1006[984 MustHaveRegister 986 ShouldHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[r10|q]" v80|q v77|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d -1 [282, 286[282 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r13|d]" v82|d -1 [284, 356[284 MustHaveRegister 286 ShouldHaveRegister 354 MustHaveRegister 356 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d -1 [350, 366[350 MustHaveRegister 352 MustHaveRegister 366 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d -1 [352, 360[352 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v85|d DWORD "[r11|d]" v85|d -1 [354, 373[354 MustHaveRegister  "SpillInDominator"
  v86|q QWORD "[r10|q]" v86|q v84|d [360, 362[360 MustHaveRegister 362 MustHaveRegister  "NoSpillStore"
  v87|q QWORD "[rbx|q]" v87|q -1 [358, 361[358 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[rbx|q]" v88|q -1 [362, 378[362 MustHaveRegister 364 MustHaveRegister 378 ShouldHaveRegister  "NoSpillStore"
  v89|q QWORD "[r10|q]" v89|q -1 [364, 380[364 MustHaveRegister 380 ShouldHaveRegister  "NoSpillStore"
  v90|q QWORD "[rax|q]" v90|q v83|d [366, 370[366 MustHaveRegister 370 ShouldHaveRegister  "NoSpillStore"
  v91|q QWORD "[r13|q]" v91|q v26|d [368, 381[368 MustHaveRegister  "OneSpillStore"
  v92|d DWORD "[rax|d]" v92|d rax|d [384, 414[[1260, 1281[384 MustHaveRegister 414 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[rsi|d]" v93|d -1 [386, 410[386 MustHaveRegister 388 MustHaveRegister 410 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[rcx|d]" v94|d -1 [388, 392[388 MustHaveRegister 392 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[r8|d]" v95|d -1 [390, 412[390 MustHaveRegister 392 ShouldHaveRegister 412 MustHaveRegister  "NoSpillStore"
  v96|q QWORD "[rsi|q]" v96|q v93|d [410, 429[410 MustHaveRegister 412 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[r10|d]" v97|d v22|d [426, 429[426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r10|d]" v98|d -1 [1408, 1424[1424 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[r11|q]" v99|q -1 [1408, 1426[1426 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[rsi|d]" v100|d -1 [756, 758[756 MustHaveRegister 758 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d -1 [1344, 1360[1360 MustHaveRegister  "NoSpillStore"
  v102|q QWORD "[r8|q]" v102|q -1 [1344, 1362[1362 MustHaveRegister  "NoSpillStore"
  v103|d DWORD "[r10|d]" v103|d -1 [1440, 1456[1456 MustHaveRegister  "NoSpillStore"
  v104|q QWORD "[r11|q]" v104|q -1 [1440, 1458[1458 MustHaveRegister  "NoSpillStore"
  v105|q QWORD "[vstack:3|q]" v0|q v0|q [206, 288[ "SpillInDominator"
  v106|q QWORD "[rax|q]" v1|q v1|q [371, 379[372 ShouldHaveRegister  "SpillInDominator"
  v107|d DWORD "[r11|d]" v2|d v2|d [373, 375[374 ShouldHaveRegister  "SpillInDominator"
  v108|q QWORD "[r11|q]" v3|q v3|q [375, 381[376 ShouldHaveRegister  "SpillInDominator"
  v109|d DWORD "[vstack:13|d]" v16|d v16|d [206, 288[ "SpillInDominator"
  v110|d DWORD "[vstack:2|d]" v17|d v17|d [206, 288[ "SpillInDominator"
  v111|d DWORD "[r10|d]" v5|d v5|d [738, 760[[1072, 1094[758 MustHaveRegister 760 MustHaveRegister  "OneSpillStore"
  v112|d DWORD "[vstack:0|d]" v5|d v5|d [161, 174[[716, 738[ "OneSpillStore"
  v113|d DWORD "[vstack:10|d]" v20|d v20|d [288, 381[ "SpillInDominator"
  v114|q QWORD "[vstack:12|q]" v21|q v21|q [206, 288[ "SpillInDominator"
  v115|d DWORD "[vstack:1|d]" v22|d v22|d [288, 381[ "SpillInDominator"
  v116|q QWORD "[vstack:12|q]" v21|q v21|q [288, 381[ "SpillInDominator"
  v117|d DWORD "[vstack:2|d]" v17|d v17|d [288, 381[ "SpillInDominator"
  v118|d DWORD "[vstack:13|d]" v16|d v16|d [288, 381[ "SpillInDominator"
  v119|q QWORD "[vstack:3|q]" v0|q v0|q [288, 369[ "SpillInDominator"
  v120|d DWORD "[vstack:8|d]" v26|d v26|d [381, 389[ "OneSpillStore"
  v121|d DWORD "[vstack:1|d]" v22|d v22|d [381, 426[[430, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1408[426 ShouldHaveRegister  "SpillInDominator"
  v122|d DWORD "[vstack:10|d]" v20|d v20|d [381, 430[429 LiveAtLoopEnd  "SpillInDominator"
  v123|q QWORD "[vstack:3|q]" v0|q v0|q [369, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1440[ "SpillInDominator"
  v124|d DWORD "[vstack:13|d]" v16|d v16|d [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1408[ "SpillInDominator"
  v125|d DWORD "[vstack:2|d]" v17|d v17|d [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1408[ "SpillInDominator"
  v126|q QWORD "[vstack:12|q]" v21|q v21|q [381, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1408[ "SpillInDominator"
  v127|d DWORD "[vstack:5|d]" v85|d v85|d [381, 394[ "SpillInDominator"
  v128|q QWORD "[vstack:11|q]" v91|q v91|q [381, 394[ "OneSpillStore"
  v129|q QWORD "[rsi|q]" v0|q v0|q [1440, 1461[ "SpillInDominator"
  v130|q QWORD "[vstack:7|q]" v1|q v1|q [379, 385[ "SpillInDominator"
  v131|d DWORD "[vstack:6|d]" v2|d v2|d [381, 492[429 LiveAtLoopEnd  "SpillInDominator"
  v132|d DWORD "[vstack:5|d]" v85|d v85|d [373, 381[ "SpillInDominator"
  v133|d DWORD "[r11|d]" v14|d v14|d [716, 728[[1072, 1084[[1104, 1114[[1158, 1168[[1334, 1365[ "NoSpillStore"
  v134|q QWORD "[vstack:9|q]" v3|q v3|q [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1440[429 LiveAtLoopEnd 662 ShouldHaveRegister 715 LiveAtLoopEnd 846 ShouldHaveRegister 970 ShouldHaveRegister  "SpillInDominator"
  v135|d DWORD "[vstack:6|d]" v2|d v2|d [375, 381[ "SpillInDominator"
  v136|q QWORD "[rdx|q]" v1|q v1|q [385, 657[386 MustHaveRegister 429 LiveAtLoopEnd  "SpillInDominator"
  v137|d DWORD "[rbp|d]" v26|d v26|d [389, 390[390 MustHaveRegister  "OneSpillStore"
  v138|d DWORD "[r11|d]" v85|d v85|d [394, 412[[1260, 1281[412 MustHaveRegister  "SpillInDominator"
  v139|d DWORD "[rbx|d]" v22|d v22|d [1408, 1429[ "SpillInDominator"
  v140|q QWORD "[r8|q]" v3|q v3|q [1440, 1461[ "SpillInDominator"
  v141|d DWORD "[rcx|d]" v2|d v2|d [492, 659[642 MustHaveRegister  "SpillInDominator"
  v142|d DWORD "[r9|d]" v20|d v20|d [430, 468[468 MustHaveRegister  "SpillInDominator"
  v143|q QWORD "[r13|q]" v91|q v91|q [1260, 1281[ "OneSpillStore"
  v144|q QWORD "[r9|q]" v21|q v21|q [1408, 1429[ "SpillInDominator"
  v145|d DWORD "[r8|d]" v17|d v17|d [1408, 1429[ "SpillInDominator"
  v146|d DWORD "[r14|d]" v16|d v16|d [1408, 1429[ "SpillInDominator"
  v147|q QWORD "[r14|q]" v1|q v1|q [657, 667[658 ShouldHaveRegister  "SpillInDominator"
  v148|d DWORD "[vstack:15|d]" v28|d v28|d [574, 667[ "SpillInDominator"
  v149|q QWORD "[vstack:20|q]" v32|q v32|q [492, 574[ "SpillInDominator"
  v150|d DWORD "[vstack:18|d]" v33|d v33|d [574, 667[ "OneSpillStore"
  v151|d DWORD "[r10|d]" v2|d v2|d [659, 667[660 ShouldHaveRegister  "SpillInDominator"
  v152|q QWORD "[vstack:20|q]" v32|q v32|q [574, 667[ "SpillInDominator"
  v153|d DWORD "[vstack:16|d]" v37|d v37|d [667, 675[ "OneSpillStore"
  v154|d DWORD "[vstack:18|d]" v33|d v33|d [667, 712[[774, 858[[1114, 1135[[1178, 1198[[1208, 1218[[1228, 1259[712 ShouldHaveRegister  "OneSpillStore"
  v155|d DWORD "[vstack:15|d]" v28|d v28|d [667, 716[715 LiveAtLoopEnd  "SpillInDominator"
  v156|q QWORD "[vstack:20|q]" v32|q v32|q [667, 716[[774, 858[[868, 1010[[1114, 1135[[1136, 1157[[1178, 1198[[1208, 1218[[1228, 1259[[1292, 1313[ "SpillInDominator"
  v157|d DWORD "[vstack:17|d]" v51|d v51|d [667, 680[ "OneSpillStore"
  v158|q QWORD "[vstack:19|q]" v57|q v57|q [667, 680[ "OneSpillStore"
  v159|q QWORD "[vstack:7|q]" v1|q v1|q [667, 671[ "SpillInDominator"
  v160|d DWORD "[vstack:6|d]" v2|d v2|d [667, 738[715 LiveAtLoopEnd  "SpillInDominator"
  v161|q QWORD "[rdx|q]" v1|q v1|q [671, 756[[774, 841[672 MustHaveRegister 715 LiveAtLoopEnd 726 MustHaveRegister 754 MustHaveRegister 756 MustHaveRegister  "SpillInDominator"
  v162|d DWORD "[rdi|d]" v37|d v37|d [675, 676[676 MustHaveRegister  "OneSpillStore"
  v163|d DWORD "[rbp|d]" v51|d v51|d [680, 698[[1114, 1135[698 MustHaveRegister  "OneSpillStore"
  v164|d DWORD "[r10|d]" v33|d v33|d [1376, 1397[ "OneSpillStore"
  v165|d DWORD "[rcx|d]" v2|d v2|d [738, 760[[774, 843[754 MustHaveRegister 760 MustHaveRegister  "SpillInDominator"
  v166|d DWORD "[r10|d]" v28|d v28|d [774, 824[[868, 975[824 MustHaveRegister 884 MustHaveRegister 946 MustHaveRegister  "SpillInDominator"
  v167|q QWORD "[r13|q]" v57|q v57|q [1114, 1135[ "OneSpillStore"
  v168|q QWORD "[r11|q]" v32|q v32|q [1376, 1397[ "SpillInDominator"
  v169|q QWORD "[r10|q]" v1|q v1|q [841, 851[842 ShouldHaveRegister  "SpillInDominator"
  v170|d DWORD "[r11|d]" v2|d v2|d [843, 851[844 ShouldHaveRegister  "SpillInDominator"
  v171|d DWORD "[vstack:15|d]" v28|d v28|d [975, 983[ "SpillInDominator"
  v172|q QWORD "[vstack:7|q]" v1|q v1|q [851, 858[[868, 888[ "SpillInDominator"
  v173|d DWORD "[vstack:6|d]" v2|d v2|d [851, 858[[868, 888[ "SpillInDominator"
  v174|d DWORD "[rcx|d]" v2|d v2|d [888, 967[952 MustHaveRegister  "SpillInDominator"
  v175|q QWORD "[r11|q]" v1|q v1|q [888, 975[966 ShouldHaveRegister  "SpillInDominator"
  v176|d DWORD "[rdi|d]" v2|d v2|d [967, 975[968 ShouldHaveRegister  "SpillInDominator"
  v177|q QWORD "[vstack:7|q]" v1|q v1|q [975, 979[ "SpillInDominator"
  v178|d DWORD "[vstack:21|d]" v70|d v70|d [975, 988[ "OneSpillStore"
  v179|d DWORD "[vstack:6|d]" v2|d v2|d [975, 1010[ "SpillInDominator"
  v180|q QWORD "[rdx|q]" v1|q v1|q [979, 1010[[1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[980 MustHaveRegister 1082 MustHaveRegister  "SpillInDominator"
  v181|d DWORD "[r8|d]" v28|d v28|d [983, 984[984 MustHaveRegister  "SpillInDominator"
  v182|d DWORD "[r9|d]" v70|d v70|d [988, 1010[[1136, 1157[[1292, 1313[1006 MustHaveRegister  "OneSpillStore"
  v183|d DWORD "[rcx|d]" v2|d v2|d [1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[1082 MustHaveRegister  "SpillInDominator"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   40  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  164  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  356  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = STACKMOVE (input: v119|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v106|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v135|DWORD = MOVE input: v107|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  378  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v106|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = STACKMOVE (input: v118|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = STACKMOVE (input: v117|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v126|QWORD[.] = STACKMOVE (input: v116|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v128|QWORD[.] = MOVE input: v91|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v122|DWORD[_] = STACKMOVE (input: v113|DWORD[_], ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = STACKMOVE (input: v135|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v108|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = STACKMOVE (input: v115|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|DWORD = STACKMOVE (input: v132|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v120|DWORD[_] = MOVE input: v26|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr  384  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v136|QWORD[.] = MOVE input: v130|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  386  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v137|DWORD[_] = MOVE input: v120|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  390  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  656  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v147|QWORD[.] = MOVE input: v136|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v151|DWORD = MOVE input: v141|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  664  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  666  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = STACKMOVE (input: v152|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v158|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v155|DWORD[_] = STACKMOVE (input: v148|DWORD[_], ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD = MOVE input: v151|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = STACKMOVE (input: v150|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v157|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v159|QWORD[.] = MOVE input: v147|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  670  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v161|QWORD[.] = MOVE input: v159|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  672  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v162|DWORD[_] = MOVE input: v153|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  676  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  840  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v169|QWORD[.] = MOVE input: v161|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v165|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v172|QWORD[.] = MOVE input: v169|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v173|DWORD = MOVE input: v170|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  854  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  964  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v174|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  972  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr  974  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v176|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v178|DWORD = MOVE input: v70|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v171|DWORD[_] = MOVE input: v166|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v177|QWORD[.] = MOVE input: v175|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  978  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v177|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  980  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v171|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  984  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v89|q [0, 1[[380, 384[[666, 670[[850, 854[[974, 978[[1068, 1070[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 38[[374, 383[[660, 669[[844, 853[[968, 977[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 36[[372, 383[[658, 669[[842, 853[[966, 977[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v88|q [0, 1[[378, 383[[664, 669[[848, 853[[972, 977[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 30[[382, 383[[668, 669[[852, 853[[976, 977[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v90|q [0, 34[[370, 383[[656, 669[[840, 853[[964, 977[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 40[[376, 383[[662, 669[[846, 853[[970, 977[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [34, 206[34 MustHaveRegister 48 MustHaveRegister 68 MustHaveRegister 108 MustHaveRegister  "StoreAtDefinition"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [36, 371[36 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [38, 373[38 MustHaveRegister 166 MustHaveRegister 356 MustHaveRegister  "StoreAtDefinition"
  v3|q QWORD "[r8|q]" v3|q r8|- [40, 375[40 MustHaveRegister  "StoreAtDefinition"
  v4|d DWORD "[rbx|d]" v4|d -1 [42, 112[42 MustHaveRegister 46 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [44, 161[44 MustHaveRegister 66 MustHaveRegister 158 MustHaveRegister  "OneSpillStore"
  v6|d DWORD "[rax|d]" v6|d -1 [46, 50[46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r11|d]" v7|d -1 [48, 114[48 MustHaveRegister 50 ShouldHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rax|d]" v8|d -1 [66, 86[66 MustHaveRegister 70 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[r9|d]" v9|d -1 [68, 164[68 MustHaveRegister 70 ShouldHaveRegister 84 ShouldHaveRegister 162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rdi|d]" v10|d v9|d [84, 166[84 MustHaveRegister 86 ShouldHaveRegister 160 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d -1 [108, 186[108 MustHaveRegister 110 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rbp|d]" v12|d -1 [110, 170[110 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rbx|q]" v13|q v4|d [112, 205[112 MustHaveRegister 114 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[r11|d]" v14|d -1 [114, 190[114 MustHaveRegister 116 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[r13|q]" v15|q v5|d [158, 166[158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[r14|d]" v16|d -1 [160, 206[160 MustHaveRegister  "StoreAtDefinition"
  v17|d DWORD "[r10|d]" v17|d -1 [162, 206[162 MustHaveRegister  "StoreAtDefinition"
  v18|q QWORD "[rbp|q]" v18|q v12|d [170, 173[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v19|q QWORD "[r9|q]" v19|q -1 [168, 171[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v20|d DWORD "[r9|d]" v20|d -1 [186, 288[186 MustHaveRegister 188 MustHaveRegister 202 MustHaveRegister 218 MustHaveRegister 232 MustHaveRegister  "StoreAtDefinition"
  v21|q QWORD "[r11|q]" v21|q v20|d [202, 206[202 MustHaveRegister  "StoreAtDefinition"
  v22|d DWORD "[r10|d]" v22|d v97|d [206, 288[220 MustHaveRegister 232 MustHaveRegister 252 MustHaveRegister  "StoreAtDefinition"
  v23|q QWORD "[rbx|q]" v23|q v13|q [206, 356[[430, 491[[868, 952[282 MustHaveRegister 354 MustHaveRegister 356 MustHaveRegister 490 ShouldHaveRegister 882 MustHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rax|d]" v24|d -1 [218, 250[218 MustHaveRegister 220 MustHaveRegister 250 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rax|q]" v25|q v24|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[rbp|d]" v26|d -1 [252, 381[252 MustHaveRegister 254 MustHaveRegister 266 MustHaveRegister 284 MustHaveRegister 350 MustHaveRegister 368 MustHaveRegister  "OneSpillStore"
  v27|d DWORD "[rsi|d]" v27|d -1 [468, 470[468 MustHaveRegister 470 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d -1 [470, 574[470 MustHaveRegister 472 MustHaveRegister 478 MustHaveRegister 504 MustHaveRegister 518 MustHaveRegister  "StoreAtDefinition"
  v29|d DWORD "[rsi|d]" v29|d -1 [472, 476[472 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v30|q QWORD "[rsi|q]" v30|q v29|d [476, 481[476 MustHaveRegister 480 MustHaveRegister  "NoSpillStore"
  v31|q QWORD "[rcx|q]" v31|q -1 [474, 477[474 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[r11|q]" v32|q v28|d [478, 492[478 MustHaveRegister  "StoreAtDefinition"
  v33|d DWORD "[r11|d]" v33|d v63|d [492, 574[506 MustHaveRegister 518 MustHaveRegister 538 MustHaveRegister  "OneSpillStore"
  v34|q QWORD "[rbx|q]" v34|q v23|q [492, 642[568 MustHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rsi|d]" v35|d -1 [504, 536[504 MustHaveRegister 506 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rsi|q]" v36|q v35|d [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [538, 667[538 MustHaveRegister 540 MustHaveRegister 552 MustHaveRegister 570 MustHaveRegister 636 MustHaveRegister 654 MustHaveRegister  "OneSpillStore"
  v38|d DWORD "[rsi|d]" v38|d -1 [824, 826[824 MustHaveRegister 826 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [826, 838[826 MustHaveRegister 828 MustHaveRegister 838 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[r8|d]" v40|d -1 [828, 832[828 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[r8|q]" v41|q v40|d [832, 834[832 MustHaveRegister 834 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[rbx|q]" v42|q -1 [830, 833[830 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[rbx|q]" v43|q -1 [834, 848[834 MustHaveRegister 836 MustHaveRegister 848 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[rax|q]" v44|q -1 [836, 850[836 MustHaveRegister 850 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[rsi|q]" v45|q v39|d [838, 840[838 MustHaveRegister 840 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d rax|d [854, 856[854 MustHaveRegister 856 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rsi|d]" v47|d -1 [568, 572[568 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d -1 [570, 642[570 MustHaveRegister 572 ShouldHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rsi|d]" v49|d -1 [636, 652[636 MustHaveRegister 638 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[rax|d]" v50|d -1 [638, 646[638 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rbp|d]" v51|d -1 [640, 667[640 MustHaveRegister  "OneSpillStore"
  v52|q QWORD "[rax|q]" v52|q v50|d [646, 648[646 MustHaveRegister 648 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[r8|q]" v53|q -1 [644, 647[644 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rbx|q]" v54|q -1 [648, 664[648 MustHaveRegister 650 MustHaveRegister 664 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[rax|q]" v55|q -1 [650, 666[650 MustHaveRegister 666 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rsi|q]" v56|q v49|d [652, 656[652 MustHaveRegister 656 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[r13|q]" v57|q v37|d [654, 667[654 MustHaveRegister  "OneSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [670, 700[[1114, 1135[670 MustHaveRegister 700 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rsi|d]" v59|d -1 [672, 696[672 MustHaveRegister 674 MustHaveRegister 696 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rcx|d]" v60|d -1 [674, 678[674 MustHaveRegister 678 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [676, 698[676 MustHaveRegister 678 ShouldHaveRegister 698 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[rsi|q]" v62|q v59|d [696, 715[696 MustHaveRegister 698 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r11|d]" v63|d v33|d [712, 715[712 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d -1 [1238, 1254[1254 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[r11|q]" v65|q -1 [1238, 1256[1256 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[rsi|d]" v66|d -1 [882, 886[882 MustHaveRegister 886 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[rdx|d]" v67|d -1 [884, 952[884 MustHaveRegister 886 ShouldHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[rsi|d]" v68|d -1 [946, 962[946 MustHaveRegister 948 MustHaveRegister 962 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r8|d]" v69|d -1 [948, 956[948 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v70|d DWORD "[r9|d]" v70|d -1 [950, 975[950 MustHaveRegister  "OneSpillStore"
  v71|q QWORD "[r8|q]" v71|q v69|d [956, 958[956 MustHaveRegister 958 MustHaveRegister  "NoSpillStore"
  v72|q QWORD "[rdx|q]" v72|q -1 [954, 957[954 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v73|q QWORD "[rbx|q]" v73|q -1 [958, 972[958 MustHaveRegister 960 MustHaveRegister 972 ShouldHaveRegister  "NoSpillStore"
  v74|q QWORD "[rax|q]" v74|q -1 [960, 974[960 MustHaveRegister 974 ShouldHaveRegister  "NoSpillStore"
  v75|q QWORD "[rsi|q]" v75|q v68|d [962, 964[962 MustHaveRegister 964 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[rax|d]" v76|d rax|d [978, 1008[[1292, 1313[978 MustHaveRegister 1008 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d -1 [980, 1004[980 MustHaveRegister 982 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[r11|d]" v78|d -1 [982, 986[982 MustHaveRegister 986 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d -1 [984, 1006[984 MustHaveRegister 986 ShouldHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[r10|q]" v80|q v77|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d -1 [282, 286[282 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r13|d]" v82|d -1 [284, 356[284 MustHaveRegister 286 ShouldHaveRegister 354 MustHaveRegister 356 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d -1 [350, 366[350 MustHaveRegister 352 MustHaveRegister 366 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d -1 [352, 360[352 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v85|d DWORD "[r11|d]" v85|d -1 [354, 373[354 MustHaveRegister  "StoreAtDefinition"
  v86|q QWORD "[r10|q]" v86|q v84|d [360, 362[360 MustHaveRegister 362 MustHaveRegister  "NoSpillStore"
  v87|q QWORD "[rbx|q]" v87|q -1 [358, 361[358 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[rbx|q]" v88|q -1 [362, 378[362 MustHaveRegister 364 MustHaveRegister 378 ShouldHaveRegister  "NoSpillStore"
  v89|q QWORD "[r10|q]" v89|q -1 [364, 380[364 MustHaveRegister 380 ShouldHaveRegister  "NoSpillStore"
  v90|q QWORD "[rax|q]" v90|q v83|d [366, 370[366 MustHaveRegister 370 ShouldHaveRegister  "NoSpillStore"
  v91|q QWORD "[r13|q]" v91|q v26|d [368, 381[368 MustHaveRegister  "OneSpillStore"
  v92|d DWORD "[rax|d]" v92|d rax|d [384, 414[[1260, 1281[384 MustHaveRegister 414 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[rsi|d]" v93|d -1 [386, 410[386 MustHaveRegister 388 MustHaveRegister 410 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[rcx|d]" v94|d -1 [388, 392[388 MustHaveRegister 392 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[r8|d]" v95|d -1 [390, 412[390 MustHaveRegister 392 ShouldHaveRegister 412 MustHaveRegister  "NoSpillStore"
  v96|q QWORD "[rsi|q]" v96|q v93|d [410, 429[410 MustHaveRegister 412 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[r10|d]" v97|d v22|d [426, 429[426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r10|d]" v98|d -1 [1408, 1424[1424 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[r11|q]" v99|q -1 [1408, 1426[1426 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[rsi|d]" v100|d -1 [756, 758[756 MustHaveRegister 758 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d -1 [1344, 1360[1360 MustHaveRegister  "NoSpillStore"
  v102|q QWORD "[r8|q]" v102|q -1 [1344, 1362[1362 MustHaveRegister  "NoSpillStore"
  v103|d DWORD "[r10|d]" v103|d -1 [1440, 1456[1456 MustHaveRegister  "NoSpillStore"
  v104|q QWORD "[r11|q]" v104|q -1 [1440, 1458[1458 MustHaveRegister  "NoSpillStore"
  v105|q QWORD "[vstack:3|q]" v0|q v0|q [206, 288[ "StoreAtDefinition"
  v106|q QWORD "[rax|q]" v1|q v1|q [371, 379[372 ShouldHaveRegister  "SpillInDominator"
  v107|d DWORD "[r11|d]" v2|d v2|d [373, 375[374 ShouldHaveRegister  "StoreAtDefinition"
  v108|q QWORD "[r11|q]" v3|q v3|q [375, 381[376 ShouldHaveRegister  "StoreAtDefinition"
  v109|d DWORD "[vstack:13|d]" v16|d v16|d [206, 288[ "StoreAtDefinition"
  v110|d DWORD "[vstack:2|d]" v17|d v17|d [206, 288[ "StoreAtDefinition"
  v111|d DWORD "[r10|d]" v5|d v5|d [738, 760[[1072, 1094[758 MustHaveRegister 760 MustHaveRegister  "OneSpillStore"
  v112|d DWORD "[vstack:0|d]" v5|d v5|d [161, 174[[716, 738[ "OneSpillStore"
  v113|d DWORD "[vstack:10|d]" v20|d v20|d [288, 381[ "StoreAtDefinition"
  v114|q QWORD "[vstack:12|q]" v21|q v21|q [206, 288[ "StoreAtDefinition"
  v115|d DWORD "[vstack:1|d]" v22|d v22|d [288, 381[ "StoreAtDefinition"
  v116|q QWORD "[vstack:12|q]" v21|q v21|q [288, 381[ "StoreAtDefinition"
  v117|d DWORD "[vstack:2|d]" v17|d v17|d [288, 381[ "StoreAtDefinition"
  v118|d DWORD "[vstack:13|d]" v16|d v16|d [288, 381[ "StoreAtDefinition"
  v119|q QWORD "[vstack:3|q]" v0|q v0|q [288, 369[ "StoreAtDefinition"
  v120|d DWORD "[vstack:8|d]" v26|d v26|d [381, 389[ "OneSpillStore"
  v121|d DWORD "[vstack:1|d]" v22|d v22|d [381, 426[[430, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1408[426 ShouldHaveRegister  "StoreAtDefinition"
  v122|d DWORD "[vstack:10|d]" v20|d v20|d [381, 430[429 LiveAtLoopEnd  "StoreAtDefinition"
  v123|q QWORD "[vstack:3|q]" v0|q v0|q [369, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1440[ "StoreAtDefinition"
  v124|d DWORD "[vstack:13|d]" v16|d v16|d [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1408[ "StoreAtDefinition"
  v125|d DWORD "[vstack:2|d]" v17|d v17|d [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1408[ "StoreAtDefinition"
  v126|q QWORD "[vstack:12|q]" v21|q v21|q [381, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1408[ "StoreAtDefinition"
  v127|d DWORD "[vstack:5|d]" v85|d v85|d [381, 394[ "StoreAtDefinition"
  v128|q QWORD "[vstack:11|q]" v91|q v91|q [381, 394[ "OneSpillStore"
  v129|q QWORD "[rsi|q]" v0|q v0|q [1440, 1461[ "StoreAtDefinition"
  v130|q QWORD "[vstack:7|q]" v1|q v1|q [379, 385[ "SpillInDominator"
  v131|d DWORD "[vstack:6|d]" v2|d v2|d [381, 492[429 LiveAtLoopEnd  "StoreAtDefinition"
  v132|d DWORD "[vstack:5|d]" v85|d v85|d [373, 381[ "StoreAtDefinition"
  v133|d DWORD "[r11|d]" v14|d v14|d [716, 728[[1072, 1084[[1104, 1114[[1158, 1168[[1334, 1365[ "NoSpillStore"
  v134|q QWORD "[vstack:9|q]" v3|q v3|q [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1440[429 LiveAtLoopEnd 662 ShouldHaveRegister 715 LiveAtLoopEnd 846 ShouldHaveRegister 970 ShouldHaveRegister  "StoreAtDefinition"
  v135|d DWORD "[vstack:6|d]" v2|d v2|d [375, 381[ "StoreAtDefinition"
  v136|q QWORD "[rdx|q]" v1|q v1|q [385, 657[386 MustHaveRegister 429 LiveAtLoopEnd  "SpillInDominator"
  v137|d DWORD "[rbp|d]" v26|d v26|d [389, 390[390 MustHaveRegister  "OneSpillStore"
  v138|d DWORD "[r11|d]" v85|d v85|d [394, 412[[1260, 1281[412 MustHaveRegister  "StoreAtDefinition"
  v139|d DWORD "[rbx|d]" v22|d v22|d [1408, 1429[ "StoreAtDefinition"
  v140|q QWORD "[r8|q]" v3|q v3|q [1440, 1461[ "StoreAtDefinition"
  v141|d DWORD "[rcx|d]" v2|d v2|d [492, 659[642 MustHaveRegister  "StoreAtDefinition"
  v142|d DWORD "[r9|d]" v20|d v20|d [430, 468[468 MustHaveRegister  "StoreAtDefinition"
  v143|q QWORD "[r13|q]" v91|q v91|q [1260, 1281[ "OneSpillStore"
  v144|q QWORD "[r9|q]" v21|q v21|q [1408, 1429[ "StoreAtDefinition"
  v145|d DWORD "[r8|d]" v17|d v17|d [1408, 1429[ "StoreAtDefinition"
  v146|d DWORD "[r14|d]" v16|d v16|d [1408, 1429[ "StoreAtDefinition"
  v147|q QWORD "[r14|q]" v1|q v1|q [657, 667[658 ShouldHaveRegister  "SpillInDominator"
  v148|d DWORD "[vstack:15|d]" v28|d v28|d [574, 667[ "StoreAtDefinition"
  v149|q QWORD "[vstack:20|q]" v32|q v32|q [492, 574[ "StoreAtDefinition"
  v150|d DWORD "[vstack:18|d]" v33|d v33|d [574, 667[ "OneSpillStore"
  v151|d DWORD "[r10|d]" v2|d v2|d [659, 667[660 ShouldHaveRegister  "StoreAtDefinition"
  v152|q QWORD "[vstack:20|q]" v32|q v32|q [574, 667[ "StoreAtDefinition"
  v153|d DWORD "[vstack:16|d]" v37|d v37|d [667, 675[ "OneSpillStore"
  v154|d DWORD "[vstack:18|d]" v33|d v33|d [667, 712[[774, 858[[1114, 1135[[1178, 1198[[1208, 1218[[1228, 1259[712 ShouldHaveRegister  "OneSpillStore"
  v155|d DWORD "[vstack:15|d]" v28|d v28|d [667, 716[715 LiveAtLoopEnd  "StoreAtDefinition"
  v156|q QWORD "[vstack:20|q]" v32|q v32|q [667, 716[[774, 858[[868, 1010[[1114, 1135[[1136, 1157[[1178, 1198[[1208, 1218[[1228, 1259[[1292, 1313[ "StoreAtDefinition"
  v157|d DWORD "[vstack:17|d]" v51|d v51|d [667, 680[ "OneSpillStore"
  v158|q QWORD "[vstack:19|q]" v57|q v57|q [667, 680[ "OneSpillStore"
  v159|q QWORD "[vstack:7|q]" v1|q v1|q [667, 671[ "SpillInDominator"
  v160|d DWORD "[vstack:6|d]" v2|d v2|d [667, 738[715 LiveAtLoopEnd  "StoreAtDefinition"
  v161|q QWORD "[rdx|q]" v1|q v1|q [671, 756[[774, 841[672 MustHaveRegister 715 LiveAtLoopEnd 726 MustHaveRegister 754 MustHaveRegister 756 MustHaveRegister  "SpillInDominator"
  v162|d DWORD "[rdi|d]" v37|d v37|d [675, 676[676 MustHaveRegister  "OneSpillStore"
  v163|d DWORD "[rbp|d]" v51|d v51|d [680, 698[[1114, 1135[698 MustHaveRegister  "OneSpillStore"
  v164|d DWORD "[r10|d]" v33|d v33|d [1376, 1397[ "OneSpillStore"
  v165|d DWORD "[rcx|d]" v2|d v2|d [738, 760[[774, 843[754 MustHaveRegister 760 MustHaveRegister  "StoreAtDefinition"
  v166|d DWORD "[r10|d]" v28|d v28|d [774, 824[[868, 975[824 MustHaveRegister 884 MustHaveRegister 946 MustHaveRegister  "StoreAtDefinition"
  v167|q QWORD "[r13|q]" v57|q v57|q [1114, 1135[ "OneSpillStore"
  v168|q QWORD "[r11|q]" v32|q v32|q [1376, 1397[ "StoreAtDefinition"
  v169|q QWORD "[r10|q]" v1|q v1|q [841, 851[842 ShouldHaveRegister  "SpillInDominator"
  v170|d DWORD "[r11|d]" v2|d v2|d [843, 851[844 ShouldHaveRegister  "StoreAtDefinition"
  v171|d DWORD "[vstack:15|d]" v28|d v28|d [975, 983[ "StoreAtDefinition"
  v172|q QWORD "[vstack:7|q]" v1|q v1|q [851, 858[[868, 888[ "SpillInDominator"
  v173|d DWORD "[vstack:6|d]" v2|d v2|d [851, 858[[868, 888[ "StoreAtDefinition"
  v174|d DWORD "[rcx|d]" v2|d v2|d [888, 967[952 MustHaveRegister  "StoreAtDefinition"
  v175|q QWORD "[r11|q]" v1|q v1|q [888, 975[966 ShouldHaveRegister  "SpillInDominator"
  v176|d DWORD "[rdi|d]" v2|d v2|d [967, 975[968 ShouldHaveRegister  "StoreAtDefinition"
  v177|q QWORD "[vstack:7|q]" v1|q v1|q [975, 979[ "SpillInDominator"
  v178|d DWORD "[vstack:21|d]" v70|d v70|d [975, 988[ "OneSpillStore"
  v179|d DWORD "[vstack:6|d]" v2|d v2|d [975, 1010[ "StoreAtDefinition"
  v180|q QWORD "[rdx|q]" v1|q v1|q [979, 1010[[1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[980 MustHaveRegister 1082 MustHaveRegister  "SpillInDominator"
  v181|d DWORD "[r8|d]" v28|d v28|d [983, 984[984 MustHaveRegister  "StoreAtDefinition"
  v182|d DWORD "[r9|d]" v70|d v70|d [988, 1010[[1136, 1157[[1292, 1313[1006 MustHaveRegister  "OneSpillStore"
  v183|d DWORD "[rcx|d]" v2|d v2|d [1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[1082 MustHaveRegister  "StoreAtDefinition"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   40  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  164  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v13|QWORD[.]] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  356  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = STACKMOVE (input: v119|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v106|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v135|DWORD = MOVE input: v107|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  378  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v106|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = STACKMOVE (input: v118|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = STACKMOVE (input: v117|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v126|QWORD[.] = STACKMOVE (input: v116|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v128|QWORD[.] = MOVE input: v91|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v122|DWORD[_] = STACKMOVE (input: v113|DWORD[_], ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = STACKMOVE (input: v135|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v108|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = STACKMOVE (input: v115|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|DWORD = STACKMOVE (input: v132|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v120|DWORD[_] = MOVE input: v26|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr  384  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v136|QWORD[.] = MOVE input: v130|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  386  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v137|DWORD[_] = MOVE input: v120|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  390  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [v97|DWORD, v96|QWORD[.]] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [int[0|0x0], v23|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  656  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v147|QWORD[.] = MOVE input: v136|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v151|DWORD = MOVE input: v141|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  664  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  666  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = STACKMOVE (input: v152|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v158|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v155|DWORD[_] = STACKMOVE (input: v148|DWORD[_], ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD = MOVE input: v151|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = STACKMOVE (input: v150|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v157|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v159|QWORD[.] = MOVE input: v147|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  670  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v161|QWORD[.] = MOVE input: v159|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  672  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v162|DWORD[_] = MOVE input: v153|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  676  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  840  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v169|QWORD[.] = MOVE input: v161|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v165|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v172|QWORD[.] = MOVE input: v169|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v173|DWORD = MOVE input: v170|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  854  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  964  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v174|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  972  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr  974  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v176|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v178|DWORD = MOVE input: v70|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v171|DWORD[_] = MOVE input: v166|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v177|QWORD[.] = MOVE input: v175|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  978  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v177|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  980  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v171|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  984  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [int[-32819|0xffffffffffff7fcd], long[7060|0x1b94]] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [int[-85555|0xfffffffffffeb1cd], long[2580|0xa14]] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [int[-222739|0xfffffffffffc99ed], long[1940|0x794]] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [int[-124187|0xfffffffffffe1ae5], long[0|0x0]] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [int[-110619|0xfffffffffffe4fe5], long[0|0x0]] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [int[-106035|0xfffffffffffe61cd], long[4500|0x1194]] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [int[-218131|0xfffffffffffcabed], long[3220|0xc94]] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [int[-219155|0xfffffffffffca7ed], long[3220|0xc94]] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [int[-81691|0xfffffffffffec0e5], long[0|0x0]] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [int[-96283|0xfffffffffffe87e5], long[0|0x0]] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [int[-140315|0xfffffffffffddbe5], long[0|0x0]] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [int[-79387|0xfffffffffffec9e5], long[0|0x0]] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [int[-217107|0xfffffffffffcafed], long[20|0x14]] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [int[-12339|0xffffffffffffcfcd], long[1300|0x514]] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [int[-88603|0xfffffffffffea5e5], long[0|0x0]] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [int[-135987|0xfffffffffffdeccd], long[4500|0x1194]] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [int[-69403|0xfffffffffffef0e5], long[0|0x0]] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v89|q [0, 1[[380, 384[[666, 670[[850, 854[[974, 978[[1068, 1070[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 38[[374, 383[[660, 669[[844, 853[[968, 977[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 36[[372, 383[[658, 669[[842, 853[[966, 977[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v88|q [0, 1[[378, 383[[664, 669[[848, 853[[972, 977[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 30[[382, 383[[668, 669[[852, 853[[976, 977[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v90|q [0, 34[[370, 383[[656, 669[[840, 853[[964, 977[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 40[[376, 383[[662, 669[[846, 853[[970, 977[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[382, 383[[668, 669[[852, 853[[976, 977[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [34, 206[34 MustHaveRegister 48 MustHaveRegister 68 MustHaveRegister 108 MustHaveRegister  "StoreAtDefinition"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [36, 371[36 MustHaveRegister 42 MustHaveRegister 44 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [38, 373[38 MustHaveRegister 166 MustHaveRegister 356 MustHaveRegister  "StoreAtDefinition"
  v3|q QWORD "[r8|q]" v3|q r8|- [40, 375[40 MustHaveRegister  "StoreAtDefinition"
  v4|d DWORD "[rbx|d]" v4|d -1 [42, 112[42 MustHaveRegister 46 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [44, 161[44 MustHaveRegister 66 MustHaveRegister 158 MustHaveRegister  "OneSpillStore"
  v6|d DWORD "[rax|d]" v6|d -1 [46, 50[46 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r11|d]" v7|d -1 [48, 114[48 MustHaveRegister 50 ShouldHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rax|d]" v8|d -1 [66, 86[66 MustHaveRegister 70 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[r9|d]" v9|d -1 [68, 164[68 MustHaveRegister 70 ShouldHaveRegister 84 ShouldHaveRegister 162 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rdi|d]" v10|d v9|d [84, 166[84 MustHaveRegister 86 ShouldHaveRegister 160 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d -1 [108, 186[108 MustHaveRegister 110 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rbp|d]" v12|d -1 [110, 170[110 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rbx|q]" v13|q v4|d [112, 205[112 MustHaveRegister 114 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[r11|d]" v14|d -1 [114, 190[114 MustHaveRegister 116 MustHaveRegister 164 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[r13|q]" v15|q v5|d [158, 166[158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[r14|d]" v16|d -1 [160, 206[160 MustHaveRegister  "StoreAtDefinition"
  v17|d DWORD "[r10|d]" v17|d -1 [162, 206[162 MustHaveRegister  "StoreAtDefinition"
  v18|q QWORD "[rbp|q]" v18|q v12|d [170, 173[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v19|q QWORD "[r9|q]" v19|q -1 [168, 171[168 MustHaveRegister 170 MustHaveRegister  "NoSpillStore"
  v20|d DWORD "[r9|d]" v20|d -1 [186, 288[186 MustHaveRegister 188 MustHaveRegister 202 MustHaveRegister 218 MustHaveRegister 232 MustHaveRegister  "StoreAtDefinition"
  v21|q QWORD "[r11|q]" v21|q v20|d [202, 206[202 MustHaveRegister  "StoreAtDefinition"
  v22|d DWORD "[r10|d]" v22|d v97|d [206, 288[220 MustHaveRegister 232 MustHaveRegister 252 MustHaveRegister  "StoreAtDefinition"
  v23|q QWORD "[rbx|q]" v23|q v13|q [206, 356[[430, 491[[868, 952[282 MustHaveRegister 354 MustHaveRegister 356 MustHaveRegister 490 ShouldHaveRegister 882 MustHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rax|d]" v24|d -1 [218, 250[218 MustHaveRegister 220 MustHaveRegister 250 MustHaveRegister  "NoSpillStore"
  v25|q QWORD "[rax|q]" v25|q v24|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[rbp|d]" v26|d -1 [252, 381[252 MustHaveRegister 254 MustHaveRegister 266 MustHaveRegister 284 MustHaveRegister 350 MustHaveRegister 368 MustHaveRegister  "OneSpillStore"
  v27|d DWORD "[rsi|d]" v27|d -1 [468, 470[468 MustHaveRegister 470 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d -1 [470, 574[470 MustHaveRegister 472 MustHaveRegister 478 MustHaveRegister 504 MustHaveRegister 518 MustHaveRegister  "StoreAtDefinition"
  v29|d DWORD "[rsi|d]" v29|d -1 [472, 476[472 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v30|q QWORD "[rsi|q]" v30|q v29|d [476, 481[476 MustHaveRegister 480 MustHaveRegister  "NoSpillStore"
  v31|q QWORD "[rcx|q]" v31|q -1 [474, 477[474 MustHaveRegister 476 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[r11|q]" v32|q v28|d [478, 492[478 MustHaveRegister  "StoreAtDefinition"
  v33|d DWORD "[r11|d]" v33|d v63|d [492, 574[506 MustHaveRegister 518 MustHaveRegister 538 MustHaveRegister  "OneSpillStore"
  v34|q QWORD "[rbx|q]" v34|q v23|q [492, 642[568 MustHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rsi|d]" v35|d -1 [504, 536[504 MustHaveRegister 506 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rsi|q]" v36|q v35|d [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [538, 667[538 MustHaveRegister 540 MustHaveRegister 552 MustHaveRegister 570 MustHaveRegister 636 MustHaveRegister 654 MustHaveRegister  "OneSpillStore"
  v38|d DWORD "[rsi|d]" v38|d -1 [824, 826[824 MustHaveRegister 826 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [826, 838[826 MustHaveRegister 828 MustHaveRegister 838 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[r8|d]" v40|d -1 [828, 832[828 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[r8|q]" v41|q v40|d [832, 834[832 MustHaveRegister 834 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[rbx|q]" v42|q -1 [830, 833[830 MustHaveRegister 832 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[rbx|q]" v43|q -1 [834, 848[834 MustHaveRegister 836 MustHaveRegister 848 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[rax|q]" v44|q -1 [836, 850[836 MustHaveRegister 850 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[rsi|q]" v45|q v39|d [838, 840[838 MustHaveRegister 840 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d rax|d [854, 856[854 MustHaveRegister 856 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rsi|d]" v47|d -1 [568, 572[568 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d -1 [570, 642[570 MustHaveRegister 572 ShouldHaveRegister 640 MustHaveRegister 642 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rsi|d]" v49|d -1 [636, 652[636 MustHaveRegister 638 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[rax|d]" v50|d -1 [638, 646[638 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rbp|d]" v51|d -1 [640, 667[640 MustHaveRegister  "OneSpillStore"
  v52|q QWORD "[rax|q]" v52|q v50|d [646, 648[646 MustHaveRegister 648 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[r8|q]" v53|q -1 [644, 647[644 MustHaveRegister 646 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rbx|q]" v54|q -1 [648, 664[648 MustHaveRegister 650 MustHaveRegister 664 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[rax|q]" v55|q -1 [650, 666[650 MustHaveRegister 666 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rsi|q]" v56|q v49|d [652, 656[652 MustHaveRegister 656 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[r13|q]" v57|q v37|d [654, 667[654 MustHaveRegister  "OneSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [670, 700[[1114, 1135[670 MustHaveRegister 700 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rsi|d]" v59|d -1 [672, 696[672 MustHaveRegister 674 MustHaveRegister 696 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rcx|d]" v60|d -1 [674, 678[674 MustHaveRegister 678 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [676, 698[676 MustHaveRegister 678 ShouldHaveRegister 698 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[rsi|q]" v62|q v59|d [696, 715[696 MustHaveRegister 698 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r11|d]" v63|d v33|d [712, 715[712 MustHaveRegister 714 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d -1 [1238, 1254[1254 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[r11|q]" v65|q -1 [1238, 1256[1256 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[rsi|d]" v66|d -1 [882, 886[882 MustHaveRegister 886 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[rdx|d]" v67|d -1 [884, 952[884 MustHaveRegister 886 ShouldHaveRegister 950 MustHaveRegister 952 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[rsi|d]" v68|d -1 [946, 962[946 MustHaveRegister 948 MustHaveRegister 962 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r8|d]" v69|d -1 [948, 956[948 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v70|d DWORD "[r9|d]" v70|d -1 [950, 975[950 MustHaveRegister  "OneSpillStore"
  v71|q QWORD "[r8|q]" v71|q v69|d [956, 958[956 MustHaveRegister 958 MustHaveRegister  "NoSpillStore"
  v72|q QWORD "[rdx|q]" v72|q -1 [954, 957[954 MustHaveRegister 956 MustHaveRegister  "NoSpillStore"
  v73|q QWORD "[rbx|q]" v73|q -1 [958, 972[958 MustHaveRegister 960 MustHaveRegister 972 ShouldHaveRegister  "NoSpillStore"
  v74|q QWORD "[rax|q]" v74|q -1 [960, 974[960 MustHaveRegister 974 ShouldHaveRegister  "NoSpillStore"
  v75|q QWORD "[rsi|q]" v75|q v68|d [962, 964[962 MustHaveRegister 964 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[rax|d]" v76|d rax|d [978, 1008[[1292, 1313[978 MustHaveRegister 1008 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d -1 [980, 1004[980 MustHaveRegister 982 MustHaveRegister 1004 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[r11|d]" v78|d -1 [982, 986[982 MustHaveRegister 986 MustHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d -1 [984, 1006[984 MustHaveRegister 986 ShouldHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[r10|q]" v80|q v77|d [1004, 1006[1004 MustHaveRegister 1006 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d -1 [282, 286[282 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r13|d]" v82|d -1 [284, 356[284 MustHaveRegister 286 ShouldHaveRegister 354 MustHaveRegister 356 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d -1 [350, 366[350 MustHaveRegister 352 MustHaveRegister 366 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d -1 [352, 360[352 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v85|d DWORD "[r11|d]" v85|d -1 [354, 373[354 MustHaveRegister  "StoreAtDefinition"
  v86|q QWORD "[r10|q]" v86|q v84|d [360, 362[360 MustHaveRegister 362 MustHaveRegister  "NoSpillStore"
  v87|q QWORD "[rbx|q]" v87|q -1 [358, 361[358 MustHaveRegister 360 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[rbx|q]" v88|q -1 [362, 378[362 MustHaveRegister 364 MustHaveRegister 378 ShouldHaveRegister  "NoSpillStore"
  v89|q QWORD "[r10|q]" v89|q -1 [364, 380[364 MustHaveRegister 380 ShouldHaveRegister  "NoSpillStore"
  v90|q QWORD "[rax|q]" v90|q v83|d [366, 370[366 MustHaveRegister 370 ShouldHaveRegister  "NoSpillStore"
  v91|q QWORD "[r13|q]" v91|q v26|d [368, 381[368 MustHaveRegister  "OneSpillStore"
  v92|d DWORD "[rax|d]" v92|d rax|d [384, 414[[1260, 1281[384 MustHaveRegister 414 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[rsi|d]" v93|d -1 [386, 410[386 MustHaveRegister 388 MustHaveRegister 410 MustHaveRegister  "NoSpillStore"
  v94|d DWORD "[rcx|d]" v94|d -1 [388, 392[388 MustHaveRegister 392 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[r8|d]" v95|d -1 [390, 412[390 MustHaveRegister 392 ShouldHaveRegister 412 MustHaveRegister  "NoSpillStore"
  v96|q QWORD "[rsi|q]" v96|q v93|d [410, 429[410 MustHaveRegister 412 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[r10|d]" v97|d v22|d [426, 429[426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r10|d]" v98|d -1 [1408, 1424[1424 MustHaveRegister  "NoSpillStore"
  v99|q QWORD "[r11|q]" v99|q -1 [1408, 1426[1426 MustHaveRegister  "NoSpillStore"
  v100|d DWORD "[rsi|d]" v100|d -1 [756, 758[756 MustHaveRegister 758 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d -1 [1344, 1360[1360 MustHaveRegister  "NoSpillStore"
  v102|q QWORD "[r8|q]" v102|q -1 [1344, 1362[1362 MustHaveRegister  "NoSpillStore"
  v103|d DWORD "[r10|d]" v103|d -1 [1440, 1456[1456 MustHaveRegister  "NoSpillStore"
  v104|q QWORD "[r11|q]" v104|q -1 [1440, 1458[1458 MustHaveRegister  "NoSpillStore"
  v105|q QWORD "[vstack:3|q]" v0|q v0|q [206, 288[ "StoreAtDefinition"
  v106|q QWORD "[rax|q]" v1|q v1|q [371, 379[372 ShouldHaveRegister  "SpillInDominator"
  v107|d DWORD "[r11|d]" v2|d v2|d [373, 375[374 ShouldHaveRegister  "StoreAtDefinition"
  v108|q QWORD "[r11|q]" v3|q v3|q [375, 381[376 ShouldHaveRegister  "StoreAtDefinition"
  v109|d DWORD "[vstack:13|d]" v16|d v16|d [206, 288[ "StoreAtDefinition"
  v110|d DWORD "[vstack:2|d]" v17|d v17|d [206, 288[ "StoreAtDefinition"
  v111|d DWORD "[r10|d]" v5|d v5|d [738, 760[[1072, 1094[758 MustHaveRegister 760 MustHaveRegister  "OneSpillStore"
  v112|d DWORD "[vstack:0|d]" v5|d v5|d [161, 174[[716, 738[ "OneSpillStore"
  v113|d DWORD "[vstack:10|d]" v20|d v20|d [288, 381[ "StoreAtDefinition"
  v114|q QWORD "[vstack:12|q]" v21|q v21|q [206, 288[ "StoreAtDefinition"
  v115|d DWORD "[vstack:1|d]" v22|d v22|d [288, 381[ "StoreAtDefinition"
  v116|q QWORD "[vstack:12|q]" v21|q v21|q [288, 381[ "StoreAtDefinition"
  v117|d DWORD "[vstack:2|d]" v17|d v17|d [288, 381[ "StoreAtDefinition"
  v118|d DWORD "[vstack:13|d]" v16|d v16|d [288, 381[ "StoreAtDefinition"
  v119|q QWORD "[vstack:3|q]" v0|q v0|q [288, 369[ "StoreAtDefinition"
  v120|d DWORD "[vstack:8|d]" v26|d v26|d [381, 389[ "OneSpillStore"
  v121|d DWORD "[vstack:1|d]" v22|d v22|d [381, 426[[430, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1408[426 ShouldHaveRegister  "StoreAtDefinition"
  v122|d DWORD "[vstack:10|d]" v20|d v20|d [381, 430[429 LiveAtLoopEnd  "StoreAtDefinition"
  v123|q QWORD "[vstack:3|q]" v0|q v0|q [369, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1440[ "StoreAtDefinition"
  v124|d DWORD "[vstack:13|d]" v16|d v16|d [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1408[ "StoreAtDefinition"
  v125|d DWORD "[vstack:2|d]" v17|d v17|d [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1334, 1365[[1366, 1397[[1398, 1408[ "StoreAtDefinition"
  v126|q QWORD "[vstack:12|q]" v21|q v21|q [381, 716[[774, 858[[868, 1010[[1094, 1104[[1114, 1135[[1136, 1157[[1168, 1218[[1228, 1259[[1260, 1281[[1282, 1313[[1366, 1397[[1398, 1408[ "StoreAtDefinition"
  v127|d DWORD "[vstack:5|d]" v85|d v85|d [381, 394[ "StoreAtDefinition"
  v128|q QWORD "[vstack:11|q]" v91|q v91|q [381, 394[ "OneSpillStore"
  v129|q QWORD "[rsi|q]" v0|q v0|q [1440, 1461[ "StoreAtDefinition"
  v130|q QWORD "[vstack:7|q]" v1|q v1|q [379, 385[ "SpillInDominator"
  v131|d DWORD "[vstack:6|d]" v2|d v2|d [381, 492[429 LiveAtLoopEnd  "StoreAtDefinition"
  v132|d DWORD "[vstack:5|d]" v85|d v85|d [373, 381[ "StoreAtDefinition"
  v133|d DWORD "[r11|d]" v14|d v14|d [716, 728[[1072, 1084[[1104, 1114[[1158, 1168[[1334, 1365[ "NoSpillStore"
  v134|q QWORD "[vstack:9|q]" v3|q v3|q [381, 728[[774, 858[[868, 1010[[1072, 1084[[1094, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1440[429 LiveAtLoopEnd 662 ShouldHaveRegister 715 LiveAtLoopEnd 846 ShouldHaveRegister 970 ShouldHaveRegister  "StoreAtDefinition"
  v135|d DWORD "[vstack:6|d]" v2|d v2|d [375, 381[ "StoreAtDefinition"
  v136|q QWORD "[rdx|q]" v1|q v1|q [385, 657[386 MustHaveRegister 429 LiveAtLoopEnd  "SpillInDominator"
  v137|d DWORD "[rbp|d]" v26|d v26|d [389, 390[390 MustHaveRegister  "OneSpillStore"
  v138|d DWORD "[r11|d]" v85|d v85|d [394, 412[[1260, 1281[412 MustHaveRegister  "StoreAtDefinition"
  v139|d DWORD "[rbx|d]" v22|d v22|d [1408, 1429[ "StoreAtDefinition"
  v140|q QWORD "[r8|q]" v3|q v3|q [1440, 1461[ "StoreAtDefinition"
  v141|d DWORD "[rcx|d]" v2|d v2|d [492, 659[642 MustHaveRegister  "StoreAtDefinition"
  v142|d DWORD "[r9|d]" v20|d v20|d [430, 468[468 MustHaveRegister  "StoreAtDefinition"
  v143|q QWORD "[r13|q]" v91|q v91|q [1260, 1281[ "OneSpillStore"
  v144|q QWORD "[r9|q]" v21|q v21|q [1408, 1429[ "StoreAtDefinition"
  v145|d DWORD "[r8|d]" v17|d v17|d [1408, 1429[ "StoreAtDefinition"
  v146|d DWORD "[r14|d]" v16|d v16|d [1408, 1429[ "StoreAtDefinition"
  v147|q QWORD "[r14|q]" v1|q v1|q [657, 667[658 ShouldHaveRegister  "SpillInDominator"
  v148|d DWORD "[vstack:15|d]" v28|d v28|d [574, 667[ "StoreAtDefinition"
  v149|q QWORD "[vstack:20|q]" v32|q v32|q [492, 574[ "StoreAtDefinition"
  v150|d DWORD "[vstack:18|d]" v33|d v33|d [574, 667[ "OneSpillStore"
  v151|d DWORD "[r10|d]" v2|d v2|d [659, 667[660 ShouldHaveRegister  "StoreAtDefinition"
  v152|q QWORD "[vstack:20|q]" v32|q v32|q [574, 667[ "StoreAtDefinition"
  v153|d DWORD "[vstack:16|d]" v37|d v37|d [667, 675[ "OneSpillStore"
  v154|d DWORD "[vstack:18|d]" v33|d v33|d [667, 712[[774, 858[[1114, 1135[[1178, 1198[[1208, 1218[[1228, 1259[712 ShouldHaveRegister  "OneSpillStore"
  v155|d DWORD "[vstack:15|d]" v28|d v28|d [667, 716[715 LiveAtLoopEnd  "StoreAtDefinition"
  v156|q QWORD "[vstack:20|q]" v32|q v32|q [667, 716[[774, 858[[868, 1010[[1114, 1135[[1136, 1157[[1178, 1198[[1208, 1218[[1228, 1259[[1292, 1313[ "StoreAtDefinition"
  v157|d DWORD "[vstack:17|d]" v51|d v51|d [667, 680[ "OneSpillStore"
  v158|q QWORD "[vstack:19|q]" v57|q v57|q [667, 680[ "OneSpillStore"
  v159|q QWORD "[vstack:7|q]" v1|q v1|q [667, 671[ "SpillInDominator"
  v160|d DWORD "[vstack:6|d]" v2|d v2|d [667, 738[715 LiveAtLoopEnd  "StoreAtDefinition"
  v161|q QWORD "[rdx|q]" v1|q v1|q [671, 756[[774, 841[672 MustHaveRegister 715 LiveAtLoopEnd 726 MustHaveRegister 754 MustHaveRegister 756 MustHaveRegister  "SpillInDominator"
  v162|d DWORD "[rdi|d]" v37|d v37|d [675, 676[676 MustHaveRegister  "OneSpillStore"
  v163|d DWORD "[rbp|d]" v51|d v51|d [680, 698[[1114, 1135[698 MustHaveRegister  "OneSpillStore"
  v164|d DWORD "[r10|d]" v33|d v33|d [1376, 1397[ "OneSpillStore"
  v165|d DWORD "[rcx|d]" v2|d v2|d [738, 760[[774, 843[754 MustHaveRegister 760 MustHaveRegister  "StoreAtDefinition"
  v166|d DWORD "[r10|d]" v28|d v28|d [774, 824[[868, 975[824 MustHaveRegister 884 MustHaveRegister 946 MustHaveRegister  "StoreAtDefinition"
  v167|q QWORD "[r13|q]" v57|q v57|q [1114, 1135[ "OneSpillStore"
  v168|q QWORD "[r11|q]" v32|q v32|q [1376, 1397[ "StoreAtDefinition"
  v169|q QWORD "[r10|q]" v1|q v1|q [841, 851[842 ShouldHaveRegister  "SpillInDominator"
  v170|d DWORD "[r11|d]" v2|d v2|d [843, 851[844 ShouldHaveRegister  "StoreAtDefinition"
  v171|d DWORD "[vstack:15|d]" v28|d v28|d [975, 983[ "StoreAtDefinition"
  v172|q QWORD "[vstack:7|q]" v1|q v1|q [851, 858[[868, 888[ "SpillInDominator"
  v173|d DWORD "[vstack:6|d]" v2|d v2|d [851, 858[[868, 888[ "StoreAtDefinition"
  v174|d DWORD "[rcx|d]" v2|d v2|d [888, 967[952 MustHaveRegister  "StoreAtDefinition"
  v175|q QWORD "[r11|q]" v1|q v1|q [888, 975[966 ShouldHaveRegister  "SpillInDominator"
  v176|d DWORD "[rdi|d]" v2|d v2|d [967, 975[968 ShouldHaveRegister  "StoreAtDefinition"
  v177|q QWORD "[vstack:7|q]" v1|q v1|q [975, 979[ "SpillInDominator"
  v178|d DWORD "[vstack:21|d]" v70|d v70|d [975, 988[ "OneSpillStore"
  v179|d DWORD "[vstack:6|d]" v2|d v2|d [975, 1010[ "StoreAtDefinition"
  v180|q QWORD "[rdx|q]" v1|q v1|q [979, 1010[[1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[980 MustHaveRegister 1082 MustHaveRegister  "SpillInDominator"
  v181|d DWORD "[r8|d]" v28|d v28|d [983, 984[984 MustHaveRegister  "StoreAtDefinition"
  v182|d DWORD "[r9|d]" v70|d v70|d [988, 1010[[1136, 1157[[1292, 1313[1006 MustHaveRegister  "OneSpillStore"
  v183|d DWORD "[rcx|d]" v2|d v2|d [1072, 1135[[1136, 1157[[1158, 1259[[1260, 1281[[1282, 1313[[1314, 1365[[1366, 1397[[1398, 1429[[1430, 1461[1082 MustHaveRegister  "StoreAtDefinition"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   40  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  164  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v21|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = MOVE input: v17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVE input: v16|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v105|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [v22|DWORD, v23|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = MOVE input: v22|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|DWORD[_] = MOVE input: v20|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  356  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = STACKMOVE (input: v119|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v106|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v135|DWORD = MOVE input: v107|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  378  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v106|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = STACKMOVE (input: v118|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = STACKMOVE (input: v117|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v126|QWORD[.] = STACKMOVE (input: v116|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v128|QWORD[.] = MOVE input: v91|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v122|DWORD[_] = STACKMOVE (input: v113|DWORD[_], ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = STACKMOVE (input: v135|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v108|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = STACKMOVE (input: v115|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v127|DWORD = STACKMOVE (input: v132|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v120|DWORD[_] = MOVE input: v26|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr  384  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v136|QWORD[.] = MOVE input: v130|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  386  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v137|DWORD[_] = MOVE input: v120|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  390  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v138|DWORD = MOVE input: v127|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE input: v96|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOVE input: v122|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE input: v22|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v131|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v149|QWORD[.] = MOVE input: v32|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v141|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v150|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v148|DWORD[_] = MOVE input: v28|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  656  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v147|QWORD[.] = MOVE input: v136|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v151|DWORD = MOVE input: v141|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  664  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  666  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = STACKMOVE (input: v152|QWORD[.], ~backupSlot: vstack:4|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v158|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v155|DWORD[_] = STACKMOVE (input: v148|DWORD[_], ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD = MOVE input: v151|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = STACKMOVE (input: v150|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v157|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v159|QWORD[.] = MOVE input: v147|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  670  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v161|QWORD[.] = MOVE input: v159|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  672  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v162|DWORD[_] = MOVE input: v153|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  676  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v157|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|QWORD[.] = MOVE input: v62|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v28|DWORD[_] = MOVE input: v155|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v141|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = MOVE input: v17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE input: v16|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v160|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|DWORD[_] = MOVE input: v112|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v165|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  840  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v169|QWORD[.] = MOVE input: v161|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v165|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v172|QWORD[.] = MOVE input: v169|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v173|DWORD = MOVE input: v170|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  854  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v156|QWORD[.] = MOVE input: v32|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v172|QWORD[.] = MOVE input: v136|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v174|DWORD = MOVE input: v173|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v175|QWORD[.] = MOVE input: v172|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  964  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v174|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  972  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr  974  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v179|DWORD = MOVE input: v176|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v178|DWORD = MOVE input: v70|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v171|DWORD[_] = MOVE input: v166|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v177|QWORD[.] = MOVE input: v175|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  978  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v177|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  980  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v171|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  984  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v178|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v111|DWORD[_] = MOVE input: v112|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[7060|0x1b94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = MOVE input: v17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE input: v16|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v102|QWORD = MOVE input: long[2580|0xa14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] // MoveResolver resolve mapping <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v167|QWORD[.] = MOVE input: v158|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v157|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v102|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] // MoveResolver resolve mapping <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v173|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v172|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] // MoveResolver resolve mapping <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] // MoveResolver resolve mapping <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE input: v22|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] // MoveResolver resolve mapping <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] // MoveResolver resolve mapping <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v143|QWORD[.] = MOVE input: v128|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v138|DWORD = MOVE input: v127|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE input: v22|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v178|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = MOVE input: v17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE input: v16|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v102|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] // MoveResolver resolve mapping <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [v101|DWORD, v102|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE input: v22|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v164|DWORD = MOVE input: v154|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v168|QWORD[.] = MOVE input: v156|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v173|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v172|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE input: v22|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [v98|DWORD, v99|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v134|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v123|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [v103|DWORD, v104|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   36  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   38  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   40  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:9|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v5|DWORD[_] = MOV input: [v1|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v6|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction v7|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v6|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v8|DWORD = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction v9|DWORD = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: v8|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction v11|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction v12|DWORD = MOV input: [v11|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction v14|DWORD = MOV input: [v13|QWORD[.] + v7|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction v16|DWORD = MOV input: [v15|QWORD[.] + v10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:13|DWORD = MOVE input: r14|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction v112|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v17|DWORD = MOV input: [v15|QWORD[.] + v9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  164  <|@ instruction MOV (x: [v15|QWORD[.] + v9|DWORD * 4 + 16], y: v14|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [v15|QWORD[.] + v10|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction v19|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction v18|QWORD = UNCOMPRESSPOINTER (input: v12|DWORD, ~baseRegister: v19|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v18|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction v20|DWORD[_] = MOV input: [v11|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:10|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [v20|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction v21|QWORD[.] = UNCOMPRESSPOINTER (input: v20|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:12|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction v24|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v24|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: v22|DWORD, y: [v20|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction v25|QWORD[.] = UNCOMPRESSPOINTER (input: v24|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction v26|DWORD[_] = MOV input: [v25|QWORD[.] + v22|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: v26|DWORD[_], y: v26|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [v26|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v81|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction v82|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: v81|DWORD, y: v82|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction v83|DWORD[_] = MOV input: [v26|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v84|DWORD = MOV input: [v83|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction v85|DWORD = MOV input: [v23|QWORD[.] + v82|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  356  <|@ instruction MOV (x: [v23|QWORD[.] + v82|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction v87|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction v86|QWORD = UNCOMPRESSPOINTER (input: v84|DWORD, ~baseRegister: v87|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction v88|QWORD = MOV input: [v86|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction v89|QWORD = MOV input: [v88|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction v90|QWORD[.] = UNCOMPRESSPOINTER (input: v83|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction v91|QWORD[.] = UNCOMPRESSPOINTER (input: v26|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: v90|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v106|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  378  <|@ instruction rbx|QWORD = MOVE input: v88|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: v89|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v128|QWORD[.] = MOVE input: v91|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v120|DWORD[_] = MOVE input: v26|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr  384  <|@ instruction v92|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v136|QWORD[.] = MOVE input: v130|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  386  <|@ instruction v93|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v94|DWORD = MOV input: [v93|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v137|DWORD[_] = MOVE input: v120|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  390  <|@ instruction v95|DWORD = MOV input: [v26|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: v94|DWORD, y: v95|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v138|DWORD = MOVE input: v127|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction v96|QWORD[.] = UNCOMPRESSPOINTER (input: v93|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [v96|QWORD[.] + v95|DWORD * 4 + 16], y: v85|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: v92|DWORD, y: v92|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction v97|DWORD = INC value: v22|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD[.] = MOVE input: v96|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v20|DWORD[_] = MOVE input: v122|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v27|DWORD[_] = MOV input: [v20|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v28|DWORD[_] = MOV input: [v27|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction vstack:15|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v29|DWORD = MOV input: [v28|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction v31|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction v30|QWORD = UNCOMPRESSPOINTER (input: v29|DWORD, ~baseRegister: v31|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v28|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:20|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: v30|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v141|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction v35|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v28|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v150|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  656  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v147|QWORD[.] = MOVE input: v136|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v151|DWORD = MOVE input: v141|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  664  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  666  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v158|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = STACKMOVE (input: v150|DWORD, ~backupSlot: vstack:14|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v157|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v153|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  670  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v161|QWORD[.] = MOVE input: v159|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  672  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v162|DWORD[_] = MOVE input: v153|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  676  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v157|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|QWORD[.] = MOVE input: v62|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v28|DWORD[_] = MOVE input: v155|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v141|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [v1|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v111|DWORD[_] = MOVE input: v112|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v165|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [v1|QWORD[.] + 32], y: v2|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction v100|DWORD = MOV input: [v1|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 16], y: v100|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 20], y: v2|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction v38|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  840  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v169|QWORD[.] = MOVE input: v161|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v170|DWORD = MOVE input: v165|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  848  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  850  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  854  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v66|DWORD = MOV input: [v23|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction v67|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: v66|DWORD, y: v67|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v174|DWORD = MOVE input: v173|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v175|QWORD[.] = MOVE input: v172|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction v68|DWORD[_] = MOV input: [v28|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v69|DWORD = MOV input: [v68|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction v70|DWORD = MOV input: [v23|QWORD[.] + v67|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [v23|QWORD[.] + v67|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction v72|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction v71|QWORD = UNCOMPRESSPOINTER (input: v69|DWORD, ~baseRegister: v72|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction v73|QWORD = MOV input: [v71|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction v74|QWORD = MOV input: [v73|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction v75|QWORD[.] = UNCOMPRESSPOINTER (input: v68|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  964  <|@ instruction rsi|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v176|DWORD = MOVE input: v174|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  972  <|@ instruction rbx|QWORD = MOVE input: v73|QWORD moveKind: QWORD <|@ <|@
      nr  974  <|@ instruction rax|QWORD = MOVE input: v74|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v178|DWORD = MOVE input: v70|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  978  <|@ instruction v76|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v177|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  980  <|@ instruction v77|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction v78|DWORD = MOV input: [v77|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction v181|DWORD[_] = MOVE input: v171|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  984  <|@ instruction v79|DWORD = MOV input: [v28|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: v78|DWORD, y: v79|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v178|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction v80|QWORD[.] = UNCOMPRESSPOINTER (input: v77|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [v80|QWORD[.] + v79|DWORD * 4 + 16], y: v70|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: v76|DWORD, y: v76|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v111|DWORD[_] = MOVE input: v112|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: v2|DWORD, y: [v1|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[7060|0x1b94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v102|QWORD = MOVE input: long[2580|0xa14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] // MoveResolver resolve mapping <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v167|QWORD[.] = MOVE input: v158|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v163|DWORD = MOVE input: v157|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v160|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v102|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] // MoveResolver resolve mapping <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v173|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v172|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] // MoveResolver resolve mapping <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] // MoveResolver resolve mapping <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] // MoveResolver resolve mapping <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v154|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] // MoveResolver resolve mapping <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v143|QWORD[.] = MOVE input: v128|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v138|DWORD = MOVE input: v127|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v131|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v92|DWORD 
locals: v91|QWORD[.] v1|QWORD[.] - - v85|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v182|DWORD = MOVE input: v178|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v179|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v76|DWORD 
locals: v32|QWORD[.] v1|QWORD[.] - - v70|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v102|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] // MoveResolver resolve mapping <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v101|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v102|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v14|DWORD v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v164|DWORD = MOVE input: v154|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v168|QWORD[.] = MOVE input: v156|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v183|DWORD = MOVE input: v173|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v180|QWORD[.] = MOVE input: v172|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v32|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v99|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v139|DWORD = MOVE input: v121|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v144|QWORD[.] = MOVE input: v126|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v145|DWORD = MOVE input: v125|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v146|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v98|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v99|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v21|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v22|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: v0|QWORD[.] v1|QWORD[.] - - - v17|DWORD v16|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v104|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v140|QWORD[.] = MOVE input: v134|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v129|QWORD[.] = MOVE input: v123|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v103|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v104|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:9|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:13|DWORD = MOVE input: r14|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:0|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  164  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:10|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:12|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  356  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:11|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:8|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:11|QWORD[.] vstack:7|QWORD[.] - - vstack:5|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  386  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:11|QWORD[.] rdx|QWORD[.] - - vstack:5|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD[_] = MOVE input: vstack:8|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  390  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction r10|DWORD = INC value: vstack:1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:10|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction vstack:15|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:20|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:19|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:17|DWORD = MOVE input: rbp|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:16|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:19|QWORD[.] vstack:7|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  672  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:19|QWORD[.] rdx|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD[_] = MOVE input: vstack:16|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  676  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction r11|DWORD = INC value: vstack:18|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:15|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] r11|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] r11|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:21|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] - - vstack:21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  980  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - vstack:21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD[_] = MOVE input: vstack:15|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  984  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] // MoveResolver resolve mapping <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:19|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] // MoveResolver resolve mapping <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] // MoveResolver resolve mapping <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] // MoveResolver resolve mapping <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] // MoveResolver resolve mapping <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] // MoveResolver resolve mapping <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] // MoveResolver resolve mapping <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: vstack:3|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: vstack:20|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:9|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   68  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   70  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  110  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  112  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  114  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  160  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:13|DWORD = MOVE input: r14|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:0|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  164  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  168  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  174  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:10|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  190  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:12|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  220  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  234  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  252  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  254  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  284  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  356  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  358  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  360  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  362  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr  364  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  366  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  368  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  370  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  374  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  376  <|@ instruction r8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  380  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:11|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:8|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  382  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:11|QWORD[.] vstack:7|QWORD[.] - - vstack:5|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  386  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  388  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:11|QWORD[.] rdx|QWORD[.] - - vstack:5|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD[_] = MOVE input: vstack:8|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  390  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  392  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr  394  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  414  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr  416  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction r10|DWORD = INC value: vstack:1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:10|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  470  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr   -1  <|@ instruction vstack:15|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  472  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  474  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  476  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  478  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:20|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  480  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  482  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr  490  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  506  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction NOP <|@ <|@
      nr  532  <|@ instruction NOP <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  542  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ instruction NOP <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  554  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  570  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  572  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  574  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  638  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  640  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  642  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  646  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  648  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  650  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  652  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  654  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  660  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:19|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:17|DWORD = MOVE input: rbp|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:16|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:19|QWORD[.] vstack:7|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  672  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  674  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:19|QWORD[.] rdx|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD[_] = MOVE input: vstack:16|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  676  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  678  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  680  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  698  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  700  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction r11|DWORD = INC value: vstack:18|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:15|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  714  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  716  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr  738  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  756  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr  758  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr  760  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction NOP <|@ <|@
      nr  820  <|@ instruction NOP <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  826  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  828  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  830  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  832  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  834  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  836  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  838  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  842  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  844  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  846  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  852  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  856  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  858  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  860  <|@ instruction NOP <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  868  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  884  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  886  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  888  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction NOP <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction NOP <|@ <|@
      nr  940  <|@ instruction NOP <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  948  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] r11|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] r11|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  950  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  952  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  954  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  956  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  958  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  960  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  962  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  966  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  968  <|@ instruction rcx|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  970  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:21|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  976  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] - - vstack:21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  980  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  982  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - vstack:21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD[_] = MOVE input: vstack:15|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  984  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  986  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1006  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr 1008  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr 1020  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction NOP <|@ <|@
      nr 1026  <|@ instruction NOP <|@ <|@
      nr 1028  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1030  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1040  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1050  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction NOP <|@ <|@
      nr 1058  <|@ instruction NOP <|@ <|@
      nr 1060  <|@ instruction NOP <|@ <|@
      nr 1062  <|@ instruction NOP <|@ <|@
      nr 1064  <|@ instruction NOP <|@ <|@
      nr 1066  <|@ instruction NOP <|@ <|@
      nr 1068  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1070  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1072  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1074  <|@ instruction NOP <|@ <|@
      nr 1076  <|@ instruction NOP <|@ <|@
      nr 1078  <|@ instruction NOP <|@ <|@
      nr 1080  <|@ instruction NOP <|@ <|@
      nr 1082  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1084  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1086  <|@ instruction NOP <|@ <|@
      nr 1088  <|@ instruction NOP <|@ <|@
      nr 1090  <|@ instruction NOP <|@ <|@
      nr 1092  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1094  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction NOP <|@ <|@
      nr 1100  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1102  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1106  <|@ instruction NOP <|@ <|@
      nr 1108  <|@ instruction NOP <|@ <|@
      nr 1110  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] // MoveResolver resolve mapping <|@ <|@
      nr 1112  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:19|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction NOP <|@ <|@
      nr 1124  <|@ instruction NOP <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr 1132  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1134  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1136  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1138  <|@ instruction NOP <|@ <|@
      nr 1140  <|@ instruction NOP <|@ <|@
      nr 1142  <|@ instruction NOP <|@ <|@
      nr 1144  <|@ instruction NOP <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1154  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1156  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] // MoveResolver resolve mapping <|@ <|@
      nr 1166  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1176  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1178  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] // MoveResolver resolve mapping <|@ <|@
      nr 1186  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1188  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] // MoveResolver resolve mapping <|@ <|@
      nr 1196  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1206  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1210  <|@ instruction NOP <|@ <|@
      nr 1212  <|@ instruction NOP <|@ <|@
      nr 1214  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] // MoveResolver resolve mapping <|@ <|@
      nr 1216  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1220  <|@ instruction NOP <|@ <|@
      nr 1222  <|@ instruction NOP <|@ <|@
      nr 1224  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1226  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1230  <|@ instruction NOP <|@ <|@
      nr 1232  <|@ instruction NOP <|@ <|@
      nr 1234  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] // MoveResolver resolve mapping <|@ <|@
      nr 1236  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1240  <|@ instruction NOP <|@ <|@
      nr 1242  <|@ instruction NOP <|@ <|@
      nr 1244  <|@ instruction NOP <|@ <|@
      nr 1246  <|@ instruction NOP <|@ <|@
      nr 1248  <|@ instruction NOP <|@ <|@
      nr 1250  <|@ instruction NOP <|@ <|@
      nr 1252  <|@ instruction NOP <|@ <|@
      nr 1254  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1256  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1258  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1262  <|@ instruction NOP <|@ <|@
      nr 1264  <|@ instruction NOP <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1278  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1280  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1284  <|@ instruction NOP <|@ <|@
      nr 1286  <|@ instruction NOP <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1290  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction NOP <|@ <|@
      nr 1298  <|@ instruction NOP <|@ <|@
      nr 1300  <|@ instruction NOP <|@ <|@
      nr 1302  <|@ instruction NOP <|@ <|@
      nr 1304  <|@ instruction NOP <|@ <|@
      nr 1306  <|@ instruction NOP <|@ <|@
      nr 1308  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1310  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1312  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1316  <|@ instruction NOP <|@ <|@
      nr 1318  <|@ instruction NOP <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1322  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1326  <|@ instruction NOP <|@ <|@
      nr 1328  <|@ instruction NOP <|@ <|@
      nr 1330  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1332  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] // MoveResolver resolve mapping <|@ <|@
      nr 1342  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction NOP <|@ <|@
      nr 1352  <|@ instruction NOP <|@ <|@
      nr 1354  <|@ instruction NOP <|@ <|@
      nr 1356  <|@ instruction NOP <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1362  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1364  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: vstack:3|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1366  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1368  <|@ instruction NOP <|@ <|@
      nr 1370  <|@ instruction NOP <|@ <|@
      nr 1372  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1374  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1376  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: vstack:20|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1378  <|@ instruction NOP <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction NOP <|@ <|@
      nr 1388  <|@ instruction NOP <|@ <|@
      nr 1390  <|@ instruction NOP <|@ <|@
      nr 1392  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr 1394  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1396  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1398  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1400  <|@ instruction NOP <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1406  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1410  <|@ instruction NOP <|@ <|@
      nr 1412  <|@ instruction NOP <|@ <|@
      nr 1414  <|@ instruction NOP <|@ <|@
      nr 1416  <|@ instruction NOP <|@ <|@
      nr 1418  <|@ instruction NOP <|@ <|@
      nr 1420  <|@ instruction NOP <|@ <|@
      nr 1422  <|@ instruction NOP <|@ <|@
      nr 1424  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1426  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1428  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1430  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1432  <|@ instruction NOP <|@ <|@
      nr 1434  <|@ instruction NOP <|@ <|@
      nr 1436  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr 1438  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1440  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1442  <|@ instruction NOP <|@ <|@
      nr 1444  <|@ instruction NOP <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1458  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1460  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction vstack:3|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction vstack:6|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction vstack:9|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction vstack:13|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction vstack:0|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction vstack:2|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction vstack:10|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction vstack:12|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction vstack:5|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1232  <|@ instruction rdx|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1236  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1240  <|@ instruction r8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction vstack:11|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction vstack:8|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:11|QWORD[.] vstack:7|QWORD[.] - - vstack:5|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:11|QWORD[.] rdx|QWORD[.] - - vstack:5|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: vstack:8|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: vstack:1|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: vstack:10|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction vstack:15|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction vstack:20|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  638  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  642  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction vstack:19|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction vstack:17|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction vstack:16|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:19|QWORD[.] vstack:7|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:19|QWORD[.] rdx|QWORD[.] - - vstack:17|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: vstack:16|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: vstack:18|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: vstack:15|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1542  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  478  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  482  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:12|QWORD[.] r11|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] r11|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  948  <|@ instruction rcx|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction vstack:21|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:20|QWORD[.] vstack:7|QWORD[.] - - vstack:21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] vstack:7|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] vstack:7|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - vstack:21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] vstack:6|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: vstack:15|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: vstack:21|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: vstack:0|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1496  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1102  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1104  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1106  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr 1108  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: vstack:19|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: vstack:17|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1078  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1080  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1082  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr 1084  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1412  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1414  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1416  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr 1418  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1642  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1644  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction vstack:18|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:20|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:18|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: vstack:11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1368  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1370  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1372  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr 1374  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: vstack:21|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:20|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1660  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1662  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  128  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: vstack:3|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r11|DWORD vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: vstack:18|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: vstack:20|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: vstack:6|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:12|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] vstack:1|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - vstack:2|DWORD vstack:13|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1390  <|@ instruction rbx|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr 1392  <|@ instruction r9|QWORD[.] = MOVE input: vstack:12|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1394  <|@ instruction r8|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr 1396  <|@ instruction r14|DWORD = MOVE input: vstack:13|DWORD moveKind: DWORD <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD vstack:9|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: vstack:3|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: vstack:9|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:3|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|d DWORD "[vstack:0|d]" vstack:0|d -1 [180, 1540[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[vstack:1|d]" vstack:1|d -1 [238, 1434[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[vstack:2|d]" vstack:2|d -1 [184, 1628[ "NOT_SUPPORTED"
  vstack:3|q QWORD "[vstack:3|q]" vstack:3|q -1 [34, 1680[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[vstack:5|d]" vstack:5|d -1 [1212, 1332[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[vstack:6|d]" vstack:6|d -1 [36, 1542[ "NOT_SUPPORTED"
  vstack:7|q QWORD "[vstack:7|q]" vstack:7|q -1 [216, 1307[ "NOT_SUPPORTED"
  vstack:8|d DWORD "[vstack:8|d]" vstack:8|d -1 [1246, 1256[ "NOT_SUPPORTED"
  vstack:9|q QWORD "[vstack:9|q]" vstack:9|q -1 [38, 1678[ "NOT_SUPPORTED"
  vstack:10|d DWORD "[vstack:10|d]" vstack:10|d -1 [210, 1307[ "NOT_SUPPORTED"
  vstack:11|q QWORD "[vstack:11|q]" vstack:11|q -1 [1244, 1330[ "NOT_SUPPORTED"
  vstack:12|q QWORD "[vstack:12|q]" vstack:12|q -1 [230, 1436[ "NOT_SUPPORTED"
  vstack:13|d DWORD "[vstack:13|d]" vstack:13|d -1 [178, 1628[ "NOT_SUPPORTED"
  vstack:15|d DWORD "[vstack:15|d]" vstack:15|d -1 [330, 962[ "NOT_SUPPORTED"
  vstack:16|d DWORD "[vstack:16|d]" vstack:16|d -1 [650, 660[ "NOT_SUPPORTED"
  vstack:17|d DWORD "[vstack:17|d]" vstack:17|d -1 [648, 734[ "NOT_SUPPORTED"
  vstack:18|d DWORD "[vstack:18|d]" vstack:18|d -1 [410, 842[ "NOT_SUPPORTED"
  vstack:19|q QWORD "[vstack:19|q]" vstack:19|q -1 [646, 732[ "NOT_SUPPORTED"
  vstack:20|q QWORD "[vstack:20|q]" vstack:20|q -1 [340, 1060[ "NOT_SUPPORTED"
  vstack:21|d DWORD "[vstack:21|d]" vstack:21|d -1 [952, 1038[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|d DWORD "[stack:68|d]" vstack:0|d -1 [180, 1540[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[stack:40|d]" vstack:1|d -1 [238, 1434[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[stack:36|d]" vstack:2|d -1 [184, 1628[ "NOT_SUPPORTED"
  vstack:3|q QWORD "[stack:56|q]" vstack:3|q -1 [34, 1680[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[stack:44|d]" vstack:5|d -1 [1212, 1332[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[stack:28|d]" vstack:6|d -1 [36, 1542[ "NOT_SUPPORTED"
  vstack:7|q QWORD "[stack:80|q]" vstack:7|q -1 [216, 1307[ "NOT_SUPPORTED"
  vstack:8|d DWORD "[stack:92|d]" vstack:8|d -1 [1246, 1256[ "NOT_SUPPORTED"
  vstack:9|q QWORD "[stack:64|q]" vstack:9|q -1 [38, 1678[ "NOT_SUPPORTED"
  vstack:10|d DWORD "[stack:72|d]" vstack:10|d -1 [210, 1307[ "NOT_SUPPORTED"
  vstack:11|q QWORD "[stack:104|q]" vstack:11|q -1 [1244, 1330[ "NOT_SUPPORTED"
  vstack:12|q QWORD "[stack:88|q]" vstack:12|q -1 [230, 1436[ "NOT_SUPPORTED"
  vstack:13|d DWORD "[stack:32|d]" vstack:13|d -1 [178, 1628[ "NOT_SUPPORTED"
  vstack:15|d DWORD "[stack:92|d]" vstack:15|d -1 [330, 962[ "NOT_SUPPORTED"
  vstack:16|d DWORD "[stack:116|d]" vstack:16|d -1 [650, 660[ "NOT_SUPPORTED"
  vstack:17|d DWORD "[stack:48|d]" vstack:17|d -1 [648, 734[ "NOT_SUPPORTED"
  vstack:18|d DWORD "[stack:44|d]" vstack:18|d -1 [410, 842[ "NOT_SUPPORTED"
  vstack:19|q QWORD "[stack:112|q]" vstack:19|q -1 [646, 732[ "NOT_SUPPORTED"
  vstack:20|q QWORD "[stack:104|q]" vstack:20|q -1 [340, 1060[ "NOT_SUPPORTED"
  vstack:21|d DWORD "[stack:44|d]" vstack:21|d -1 [952, 1038[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1232  <|@ instruction rdx|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1236  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1240  <|@ instruction r8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  638  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  642  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1542  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  478  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  482  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  948  <|@ instruction rcx|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1102  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1104  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1106  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1108  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1078  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1080  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1082  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1084  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1412  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1414  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1416  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1418  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1642  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1644  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1368  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1370  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1372  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1374  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1660  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1662  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  128  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1390  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1392  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1394  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1396  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1232  <|@ instruction rdx|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1236  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1240  <|@ instruction r8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  638  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  642  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1542  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  478  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  482  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  948  <|@ instruction rcx|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1102  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1104  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1106  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1108  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1078  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1080  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1082  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1084  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1412  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1414  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1416  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1418  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1642  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1644  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1368  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1370  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1372  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1374  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1660  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1662  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  128  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1390  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1392  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1394  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1396  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1232  <|@ instruction rdx|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1236  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1240  <|@ instruction r8|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  638  <|@ instruction rdx|QWORD[.] = MOVE input: r14|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  642  <|@ instruction rcx|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1542  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  478  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  482  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  948  <|@ instruction rcx|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r9:0, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@reference-map: [stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, r8:0, r9:0, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@reference-map: [rdx:0, rbx:0, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@reference-map: [rdx:0, rbx:0, r10:0, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@reference-map: [stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:24, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@reference-map: [stack:24, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@reference-map: [rbx:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@reference-map: [rbx:0, rsi:0, r11:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@reference-map: [stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@reference-map: [rdx:0, r10:0, stack:24, stack:36, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@reference-map: [rdx:0, r9:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@reference-map: [rdx:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@reference-map: [rdx:0, r13:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@reference-map: [rdx:0, r13:0, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@reference-map: [rdx:0, r11:0, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B65" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction NOP <|@ <|@
      nr   30  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD <|@ <|@
      nr   44  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   46  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B64" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   66  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   68  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B63" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction rdi|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  108  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  110  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  112  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  114  <|@ instruction TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B54" "B61" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  192  <|@ instruction rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  194  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B53" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  210  <|@ instruction stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  212  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r9:0, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r11|DWORD r10|DWORD r14|DWORD 
>@ <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" 
    xhandlers
    flags 
    probability 4604180203917837301
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  230  <|@ instruction stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B50" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B40" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  284  <|@ instruction rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  286  <|@ instruction TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B40"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B41" "B49" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1114  <|@ instruction NOP <|@ <|@
      nr 1116  <|@ instruction NOP <|@ <|@
      nr 1118  <|@ instruction NOP <|@ <|@
      nr 1120  <|@ instruction NOP <|@ <|@
      nr 1122  <|@ instruction CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B41"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B42" "B48" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1126  <|@ instruction NOP <|@ <|@
      nr 1128  <|@ instruction NOP <|@ <|@
      nr 1130  <|@ instruction NOP <|@ <|@
      nr 1132  <|@ instruction NOP <|@ <|@
      nr 1134  <|@ instruction NOP <|@ <|@
      nr 1136  <|@ instruction NOP <|@ <|@
      nr 1138  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1140  <|@ instruction r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B42"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B43" "B47" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1146  <|@ instruction NOP <|@ <|@
      nr 1148  <|@ instruction NOP <|@ <|@
      nr 1150  <|@ instruction NOP <|@ <|@
      nr 1152  <|@ instruction NOP <|@ <|@
      nr 1154  <|@ instruction NOP <|@ <|@
      nr 1156  <|@ instruction NOP <|@ <|@
      nr 1158  <|@ instruction NOP <|@ <|@
      nr 1160  <|@ instruction NOP <|@ <|@
      nr 1162  <|@ instruction NOP <|@ <|@
      nr 1164  <|@ instruction NOP <|@ <|@
      nr 1166  <|@ instruction NOP <|@ <|@
      nr 1168  <|@ instruction NOP <|@ <|@
      nr 1170  <|@ instruction NOP <|@ <|@
      nr 1172  <|@ instruction NOP <|@ <|@
      nr 1174  <|@ instruction NOP <|@ <|@
      nr 1176  <|@ instruction NOP <|@ <|@
      nr 1178  <|@ instruction NOP <|@ <|@
      nr 1180  <|@ instruction NOP <|@ <|@
      nr 1182  <|@ instruction NOP <|@ <|@
      nr 1184  <|@ instruction NOP <|@ <|@
      nr 1186  <|@ instruction NOP <|@ <|@
      nr 1188  <|@ instruction NOP <|@ <|@
      nr 1190  <|@ instruction NOP <|@ <|@
      nr 1192  <|@ instruction NOP <|@ <|@
      nr 1194  <|@ instruction NOP <|@ <|@
      nr 1196  <|@ instruction NOP <|@ <|@
      nr 1198  <|@ instruction NOP <|@ <|@
      nr 1200  <|@ instruction NOP <|@ <|@
      nr 1202  <|@ instruction NOP <|@ <|@
      nr 1204  <|@ instruction NOP <|@ <|@
      nr 1206  <|@ instruction rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr 1208  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr 1210  <|@ instruction r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr 1212  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr 1214  <|@ instruction MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1216  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr 1218  <|@ instruction r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr 1220  <|@ instruction rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD <|@ <|@
      nr 1222  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr 1224  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1226  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1228  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1230  <|@ instruction rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1234  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr 1238  <|@ instruction r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1242  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr 1244  <|@ instruction stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1246  <|@ instruction stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1248  <|@ st <@st|@reference-map: [stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70] <|@ <|@
      nr 1250  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1252  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr 1254  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70] <|@ <|@
      nr 1256  <|@ instruction rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1258  <|@ instruction r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr 1260  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B43"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors "B44" "B45" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4604180049307212091
    begin_IR
      LIR
      nr 1262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1264  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1266  <|@ instruction NOP <|@ <|@
      nr 1268  <|@ instruction NOP <|@ <|@
      nr 1270  <|@ instruction NOP <|@ <|@
      nr 1272  <|@ instruction NOP <|@ <|@
      nr 1274  <|@ instruction NOP <|@ <|@
      nr 1276  <|@ instruction NOP <|@ <|@
      nr 1278  <|@ instruction NOP <|@ <|@
      nr 1280  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr 1282  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr 1284  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B44"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B8" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4600877297783052291
    begin_IR
      LIR
      nr 1286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1288  <|@ instruction NOP <|@ <|@
      nr 1290  <|@ instruction NOP <|@ <|@
      nr 1292  <|@ instruction NOP <|@ <|@
      nr 1294  <|@ instruction NOP <|@ <|@
      nr 1296  <|@ instruction r10|DWORD = INC value: stack:40|DWORD size: DWORD <|@ <|@
      nr 1298  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1300  <|@ instruction r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1302  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1304  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1306  <|@ instruction JUMP ~outgoingValues: [] destination: B44 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B44" 
    successors "B9" "B51" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607482730825213947
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  238  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  252  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, r8:0, r9:0, stack:40, stack:48, stack:56, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] r10|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B31" "B39" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr  288  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@reference-map: [rdx:0, rbx:0, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  330  <|@ instruction stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  332  <|@ st <@st|@reference-map: [rdx:0, rbx:0, r10:0, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  334  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  336  <|@ instruction rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  338  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  340  <|@ instruction stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  342  <|@ instruction AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4598475339043400211
    begin_IR
      LIR
      nr  344  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  354  <|@ instruction r11|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr  356  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B28" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  374  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  386  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B27" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  520  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B26" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  534  <|@ instruction NOP <|@ <|@
      nr  536  <|@ instruction NOP <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction NOP <|@ <|@
      nr  546  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  548  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  550  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B25" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  552  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  554  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  556  <|@ instruction NOP <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction NOP <|@ <|@
      nr  576  <|@ instruction NOP <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  618  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  620  <|@ instruction rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  622  <|@ instruction MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  626  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  628  <|@ instruction rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD <|@ <|@
      nr  630  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  632  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  634  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  636  <|@ instruction r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  640  <|@ instruction r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  644  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  648  <|@ instruction stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  650  <|@ instruction stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD <|@ <|@
      nr  652  <|@ st <@st|@reference-map: [stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:112|QWORD[.] stack:80|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70] <|@ <|@
      nr  654  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  656  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  658  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:112|QWORD[.] rdx|QWORD[.] - - stack:48|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70] <|@ <|@
      nr  660  <|@ instruction rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD <|@ <|@
      nr  662  <|@ instruction r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  664  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 1
    loop_depth 1
    probability 4598475215361809845
    begin_IR
      LIR
      nr  666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  668  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  686  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  688  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4594932240549145855
    begin_IR
      LIR
      nr  690  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r11|DWORD = INC value: stack:44|DWORD size: DWORD <|@ <|@
      nr  702  <|@ instruction rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  706  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B29" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4601357449172705426
    begin_IR
      LIR
      nr  358  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD <|@ <|@
      nr  372  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B54"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B55" "B58" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1482  <|@ instruction NOP <|@ <|@
      nr 1484  <|@ instruction NOP <|@ <|@
      nr 1486  <|@ instruction NOP <|@ <|@
      nr 1488  <|@ instruction NOP <|@ <|@
      nr 1490  <|@ instruction CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B58"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B59" 
    xhandlers
    flags 
    probability 4599675941835065966
    begin_IR
      LIR
      nr 1532  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1534  <|@ instruction NOP <|@ <|@
      nr 1536  <|@ instruction NOP <|@ <|@
      nr 1538  <|@ instruction NOP <|@ <|@
      nr 1540  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1544  <|@ instruction JUMP ~outgoingValues: [] destination: B58 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B59"
    from_bci -1
    to_bci -1
    predecessors "B58" "B56" 
    successors "B60" 
    xhandlers
    flags 
    probability 4599676049682266133
    begin_IR
      LIR
      nr 1546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1548  <|@ instruction NOP <|@ <|@
      nr 1550  <|@ instruction NOP <|@ <|@
      nr 1552  <|@ instruction NOP <|@ <|@
      nr 1554  <|@ instruction NOP <|@ <|@
      nr 1556  <|@ instruction NOP <|@ <|@
      nr 1558  <|@ instruction NOP <|@ <|@
      nr 1560  <|@ instruction NOP <|@ <|@
      nr 1562  <|@ instruction MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1564  <|@ instruction rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD <|@ <|@
      nr 1566  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD <|@ <|@
      nr 1568  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD <|@ <|@
      nr 1570  <|@ instruction JUMP ~outgoingValues: [] destination: B59 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B60"
    from_bci -1
    to_bci -1
    predecessors "B46" "B59" "B45" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr 1572  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1574  <|@ instruction NOP <|@ <|@
      nr 1576  <|@ instruction NOP <|@ <|@
      nr 1578  <|@ instruction NOP <|@ <|@
      nr 1580  <|@ instruction NOP <|@ <|@
      nr 1582  <|@ instruction NOP <|@ <|@
      nr 1584  <|@ instruction NOP <|@ <|@
      nr 1586  <|@ instruction NOP <|@ <|@
      nr 1588  <|@ instruction NOP <|@ <|@
      nr 1590  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr 1592  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B45"
    from_bci -1
    to_bci -1
    predecessors "B43" 
    successors "B60" 
    xhandlers
    flags 
    probability 4598475601576630899
    begin_IR
      LIR
      nr 1308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1310  <|@ instruction NOP <|@ <|@
      nr 1312  <|@ instruction NOP <|@ <|@
      nr 1314  <|@ instruction NOP <|@ <|@
      nr 1316  <|@ instruction JUMP ~outgoingValues: [] destination: B45 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD <|@ <|@
      nr  462  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  464  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:24, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70] <|@ <|@
      nr  466  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  468  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  470  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  472  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  474  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  480  <|@ instruction r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  484  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  486  <|@ st <@st|@reference-map: [stack:24, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:104|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70] <|@ <|@
      nr  488  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B36" 
    xhandlers
    flags 
    probability 4594932487912326587
    begin_IR
      LIR
      nr  720  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B35" "B24" "B23" 
    successors "B46" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1026  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1028  <|@ instruction NOP <|@ <|@
      nr 1030  <|@ instruction NOP <|@ <|@
      nr 1032  <|@ instruction NOP <|@ <|@
      nr 1034  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B46 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B46"
    from_bci -1
    to_bci -1
    predecessors "B36" 
    successors "B60" 
    xhandlers
    flags 
    probability 4600877607004302710
    begin_IR
      LIR
      nr 1318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1320  <|@ instruction NOP <|@ <|@
      nr 1322  <|@ instruction NOP <|@ <|@
      nr 1324  <|@ instruction NOP <|@ <|@
      nr 1326  <|@ instruction JUMP ~outgoingValues: [] destination: B46 -> B60 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B32" "B38" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction NOP <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ st <@st|@reference-map: [rbx:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  860  <|@ instruction rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  862  <|@ instruction CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B33" "B37" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  864  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  866  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  868  <|@ instruction r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  870  <|@ instruction NOP <|@ <|@
      nr  872  <|@ instruction NOP <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction NOP <|@ <|@
      nr  890  <|@ instruction NOP <|@ <|@
      nr  892  <|@ instruction NOP <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction NOP <|@ <|@
      nr  904  <|@ instruction NOP <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  928  <|@ st <@st|@reference-map: [rbx:0, rsi:0, r11:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:88|QWORD[.] r11|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] r11|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70] <|@ <|@
      nr  930  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  934  <|@ instruction rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  936  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  938  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  940  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  942  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  944  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  946  <|@ instruction rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  950  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  952  <|@ instruction stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  954  <|@ st <@st|@reference-map: [stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:104|QWORD[.] stack:80|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] stack:80|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] stack:80|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70] <|@ <|@
      nr  956  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  958  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  960  <|@ st <@st|@reference-map: [rdx:0, r10:0, stack:24, stack:36, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - stack:44|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70] <|@ <|@
      nr  962  <|@ instruction r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD <|@ <|@
      nr  964  <|@ instruction r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  966  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors "B34" "B35" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr  968  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  970  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction NOP <|@ <|@
      nr  984  <|@ instruction NOP <|@ <|@
      nr  986  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3 <|@ <|@
      nr  988  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  990  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors "B36" 
    xhandlers
    flags 
    probability 4593972556212340422
    begin_IR
      LIR
      nr 1016  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1018  <|@ instruction NOP <|@ <|@
      nr 1020  <|@ instruction NOP <|@ <|@
      nr 1022  <|@ instruction NOP <|@ <|@
      nr 1024  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B36" 
    xhandlers
    flags 
    probability 4592350361921559766
    begin_IR
      LIR
      nr  710  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B36 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B55"
    from_bci -1
    to_bci -1
    predecessors "B54" 
    successors "B56" "B57" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1492  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1494  <|@ instruction r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD <|@ <|@
      nr 1498  <|@ instruction NOP <|@ <|@
      nr 1500  <|@ instruction NOP <|@ <|@
      nr 1502  <|@ instruction NOP <|@ <|@
      nr 1504  <|@ instruction NOP <|@ <|@
      nr 1506  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B56"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B59" 
    xhandlers
    flags 
    probability 4528681899990095764
    begin_IR
      LIR
      nr 1508  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1510  <|@ instruction NOP <|@ <|@
      nr 1512  <|@ instruction NOP <|@ <|@
      nr 1514  <|@ instruction NOP <|@ <|@
      nr 1516  <|@ instruction JUMP ~outgoingValues: [] destination: B56 -> B59 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B39"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1088  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1090  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1092  <|@ instruction NOP <|@ <|@
      nr 1094  <|@ instruction NOP <|@ <|@
      nr 1096  <|@ instruction NOP <|@ <|@
      nr 1098  <|@ instruction r11|QWORD = MOVE input: long[7060|0x1b94] <|@ <|@
      nr 1100  <|@ instruction r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd] <|@ <|@
      nr 1110  <|@ instruction JUMP ~outgoingValues: [] destination: B39 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B52"
    from_bci -1
    to_bci -1
    predecessors "B51" "B50" "B49" "B48" "B39" "B38" 
    successors 
    xhandlers
    flags 
    probability 2366641604183195648
    begin_IR
      LIR
      nr 1444  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1434  <|@ instruction rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr 1436  <|@ instruction r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1438  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr 1440  <|@ instruction r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr 1446  <|@ instruction NOP <|@ <|@
      nr 1448  <|@ instruction NOP <|@ <|@
      nr 1450  <|@ instruction NOP <|@ <|@
      nr 1452  <|@ instruction NOP <|@ <|@
      nr 1454  <|@ instruction NOP <|@ <|@
      nr 1456  <|@ instruction NOP <|@ <|@
      nr 1458  <|@ instruction NOP <|@ <|@
      nr 1460  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1462  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1464  <|@ st <@st|@reference-map: [rdx:0, r9:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: r9|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] rbx|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - r8|DWORD r14|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B53"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1466  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1468  <|@ instruction NOP <|@ <|@
      nr 1470  <|@ instruction NOP <|@ <|@
      nr 1472  <|@ instruction NOP <|@ <|@
      nr 1474  <|@ instruction r8|QWORD = MOVE input: long[2580|0xa14] <|@ <|@
      nr 1476  <|@ instruction r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd] <|@ <|@
      nr 1478  <|@ instruction JUMP ~outgoingValues: [] destination: B53 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B62"
    from_bci -1
    to_bci -1
    predecessors "B61" "B53" "B57" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr 1608  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1610  <|@ instruction NOP <|@ <|@
      nr 1612  <|@ instruction NOP <|@ <|@
      nr 1614  <|@ instruction NOP <|@ <|@
      nr 1616  <|@ instruction NOP <|@ <|@
      nr 1618  <|@ instruction NOP <|@ <|@
      nr 1620  <|@ instruction NOP <|@ <|@
      nr 1622  <|@ instruction NOP <|@ <|@
      nr 1624  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1626  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD <|@ <|@
      nr 1628  <|@ st <@st|@reference-map: [rdx:0, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63]
locals: stack:56|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r11|DWORD stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:63] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD <|@ <|@
      nr  734  <|@ instruction rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD <|@ <|@
      nr  736  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD <|@ <|@
      nr  754  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  756  <|@ st <@st|@reference-map: [rdx:0, r13:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  992  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  994  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  996  <|@ instruction NOP <|@ <|@
      nr  998  <|@ instruction NOP <|@ <|@
      nr 1000  <|@ instruction NOP <|@ <|@
      nr 1002  <|@ instruction NOP <|@ <|@
      nr 1004  <|@ instruction NOP <|@ <|@
      nr 1006  <|@ instruction NOP <|@ <|@
      nr 1008  <|@ instruction NOP <|@ <|@
      nr 1010  <|@ instruction MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD <|@ <|@
      nr 1012  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr 1014  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44]
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD int[0|0x0] 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:44, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B57"
    from_bci -1
    to_bci -1
    predecessors "B55" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1518  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1520  <|@ instruction NOP <|@ <|@
      nr 1522  <|@ instruction NOP <|@ <|@
      nr 1524  <|@ instruction NOP <|@ <|@
      nr 1526  <|@ instruction r8|QWORD = MOVE input: long[1940|0x794] <|@ <|@
      nr 1528  <|@ instruction r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed] <|@ <|@
      nr 1530  <|@ instruction JUMP ~outgoingValues: [] destination: B57 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B38"
    from_bci -1
    to_bci -1
    predecessors "B31" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1062  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1064  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1066  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1068  <|@ instruction NOP <|@ <|@
      nr 1070  <|@ instruction NOP <|@ <|@
      nr 1072  <|@ instruction NOP <|@ <|@
      nr 1074  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1076  <|@ instruction r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5] <|@ <|@
      nr 1086  <|@ instruction JUMP ~outgoingValues: [] destination: B38 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  758  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  760  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  770  <|@ instruction r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5] <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B29" "B28" "B27" "B26" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  822  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:104|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:44|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:3, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr  786  <|@ instruction r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd] <|@ <|@
      nr  788  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B50"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1400  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1402  <|@ instruction NOP <|@ <|@
      nr 1404  <|@ instruction NOP <|@ <|@
      nr 1406  <|@ instruction NOP <|@ <|@
      nr 1408  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr 1410  <|@ instruction r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed] <|@ <|@
      nr 1420  <|@ instruction JUMP ~outgoingValues: [] destination: B50 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  790  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  792  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction r11|QWORD = MOVE input: long[3220|0xc94] <|@ <|@
      nr  802  <|@ instruction r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed] <|@ <|@
      nr  804  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B63"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1630  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1632  <|@ instruction NOP <|@ <|@
      nr 1634  <|@ instruction NOP <|@ <|@
      nr 1636  <|@ instruction NOP <|@ <|@
      nr 1638  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1640  <|@ instruction r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5] <|@ <|@
      nr 1646  <|@ instruction JUMP ~outgoingValues: [] destination: B63 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B66"
    from_bci -1
    to_bci -1
    predecessors "B65" "B64" "B63" "B4" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1684  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1678  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1680  <|@ instruction rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1686  <|@ instruction NOP <|@ <|@
      nr 1688  <|@ instruction NOP <|@ <|@
      nr 1690  <|@ instruction NOP <|@ <|@
      nr 1692  <|@ instruction NOP <|@ <|@
      nr 1694  <|@ instruction NOP <|@ <|@
      nr 1696  <|@ instruction NOP <|@ <|@
      nr 1698  <|@ instruction NOP <|@ <|@
      nr 1700  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1702  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1704  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B30" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  806  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  808  <|@ instruction stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  818  <|@ instruction r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5] <|@ <|@
      nr  820  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B30 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B47"
    from_bci -1
    to_bci -1
    predecessors "B42" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1330  <|@ instruction r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1332  <|@ instruction r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1334  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1336  <|@ instruction NOP <|@ <|@
      nr 1338  <|@ instruction NOP <|@ <|@
      nr 1340  <|@ instruction NOP <|@ <|@
      nr 1342  <|@ instruction NOP <|@ <|@
      nr 1344  <|@ instruction NOP <|@ <|@
      nr 1346  <|@ instruction NOP <|@ <|@
      nr 1348  <|@ instruction NOP <|@ <|@
      nr 1350  <|@ instruction MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD <|@ <|@
      nr 1352  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1354  <|@ st <@st|@reference-map: [rdx:0, r13:0, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] rdx|QWORD[.] - - r11|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B48"
    from_bci -1
    to_bci -1
    predecessors "B41" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1356  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1358  <|@ instruction NOP <|@ <|@
      nr 1360  <|@ instruction NOP <|@ <|@
      nr 1362  <|@ instruction NOP <|@ <|@
      nr 1364  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1366  <|@ instruction r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5] <|@ <|@
      nr 1376  <|@ instruction JUMP ~outgoingValues: [] destination: B48 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B32" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1036  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1038  <|@ instruction r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr 1040  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction NOP <|@ <|@
      nr 1050  <|@ instruction NOP <|@ <|@
      nr 1052  <|@ instruction NOP <|@ <|@
      nr 1054  <|@ instruction NOP <|@ <|@
      nr 1056  <|@ instruction MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD <|@ <|@
      nr 1058  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr 1060  <|@ st <@st|@reference-map: [rdx:0, stack:24, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:104|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B64"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1648  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1650  <|@ instruction NOP <|@ <|@
      nr 1652  <|@ instruction NOP <|@ <|@
      nr 1654  <|@ instruction NOP <|@ <|@
      nr 1656  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1658  <|@ instruction r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5] <|@ <|@
      nr 1664  <|@ instruction JUMP ~outgoingValues: [] destination: B64 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  126  <|@ instruction r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed] <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B66 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B61"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B62" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1594  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1596  <|@ instruction NOP <|@ <|@
      nr 1598  <|@ instruction NOP <|@ <|@
      nr 1600  <|@ instruction NOP <|@ <|@
      nr 1602  <|@ instruction r8|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1604  <|@ instruction r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd] <|@ <|@
      nr 1606  <|@ instruction JUMP ~outgoingValues: [] destination: B61 -> B62 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B51"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1422  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1424  <|@ instruction NOP <|@ <|@
      nr 1426  <|@ instruction NOP <|@ <|@
      nr 1428  <|@ instruction NOP <|@ <|@
      nr 1430  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1432  <|@ instruction r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5] <|@ <|@
      nr 1442  <|@ instruction JUMP ~outgoingValues: [] destination: B51 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  490  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  492  <|@ instruction r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD <|@ <|@
      nr  494  <|@ instruction r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD <|@ <|@
      nr  496  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  498  <|@ instruction rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD <|@ <|@
      nr  516  <|@ instruction MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD <|@ <|@
      nr  518  <|@ st <@st|@reference-map: [rdx:0, r11:0, stack:40, stack:64, stack:72]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: r11|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] r10|DWORD 
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:88|QWORD[.] rdx|QWORD[.] rcx|DWORD stack:64|QWORD[.] stack:40|DWORD 
java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7]
locals: - - - - 
java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70]
locals: stack:56|QWORD[.] rdx|QWORD[.] - - - stack:36|DWORD stack:32|DWORD 
>@ <|@ instruction DEOPT info [bci:35, 32, 7, 70] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B49"
    from_bci -1
    to_bci -1
    predecessors "B40" 
    successors "B52" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1378  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1380  <|@ instruction NOP <|@ <|@
      nr 1382  <|@ instruction NOP <|@ <|@
      nr 1384  <|@ instruction NOP <|@ <|@
      nr 1386  <|@ instruction r11|QWORD = MOVE input: long[4500|0x1194] <|@ <|@
      nr 1388  <|@ instruction r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd] <|@ <|@
      nr 1398  <|@ instruction JUMP ~outgoingValues: [] destination: B49 -> B52 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B65"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B66" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1666  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1668  <|@ instruction NOP <|@ <|@
      nr 1670  <|@ instruction NOP <|@ <|@
      nr 1672  <|@ instruction NOP <|@ <|@
      nr 1674  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr 1676  <|@ instruction r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5] <|@ <|@
      nr 1682  <|@ instruction JUMP ~outgoingValues: [] destination: B65 -> B66 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #3          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: iload         4
    13: iflt          104
    16: aload_1       
    17: getfield      #4          // java.util.regex.Matcher.groups:int[]
    20: aload_0       
    21: getfield      #2          // groupIndex:int
    24: iaload        
    25: istore        5
    27: aload_1       
    28: getfield      #4          // java.util.regex.Matcher.groups:int[]
    31: aload_0       
    32: getfield      #2          // groupIndex:int
    35: iconst_1      
    36: iadd          
    37: iaload        
    38: istore        6
    40: aload_1       
    41: getfield      #4          // java.util.regex.Matcher.groups:int[]
    44: aload_0       
    45: getfield      #2          // groupIndex:int
    48: iload         4
    50: iastore       
    51: aload_1       
    52: getfield      #4          // java.util.regex.Matcher.groups:int[]
    55: aload_0       
    56: getfield      #2          // groupIndex:int
    59: iconst_1      
    60: iadd          
    61: iload_2       
    62: iastore       
    63: aload_0       
    64: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    67: aload_1       
    68: iload_2       
    69: aload_3       
    70: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    73: ifeq          78
    76: iconst_1      
    77: ireturn       
    78: aload_1       
    79: getfield      #4          // java.util.regex.Matcher.groups:int[]
    82: aload_0       
    83: getfield      #2          // groupIndex:int
    86: iload         5
    88: iastore       
    89: aload_1       
    90: getfield      #4          // java.util.regex.Matcher.groups:int[]
    93: aload_0       
    94: getfield      #2          // groupIndex:int
    97: iconst_1      
    98: iadd          
    99: iload         6
   101: iastore       
   102: iconst_0      
   103: ireturn       
   104: aload_1       
   105: iload_2       
   106: putfield      #7          // java.util.regex.Matcher.last:int
   109: iconst_1      
   110: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc0000002b787f00004d03d44d33e4493bc20f85e3ffffff66669089842400c0feff4883ec789041817f20000000000f8569090000909090909090909090909090909048896c24704889742448894c24644c894424408b5a40448b52388b04dd0c000000448b5e10413bc30f8618090000909090909090428b04d50c000000448b4e14413bc10f86570800009090909090418bf9ffc73bc70f866f0700009090909090909090908b460c8b2cc50800000048c1e303468b5c9b104585db0f8c3508000090909090909090909090909090909090909090458bea49c1e503458b74bd104489742460448954243c478b548d10448954245c47895c8d1041894cbd1049b90000002b787f0000498d2c29483b2d000000000f8412000000483b2d000000000f8485030000e9e00700009090909090448b0cc50c00000044894c243842813ccd08000000addeadde0f857805000048895424309090909090458bd949c1e3034c895c242841ba00000000e942010000660f1f84000000000090909090463b14cd100000000f8d540600009090909090909048c1e003428b6c901085ed0f843401000090909090813ced08000000addeadde0f85ba0700009090909090908b430c448b2ced10000000413bc50f86c70600009090909090909090909090909090909090909090909090909090909090908b04ed0c000000448b14c508000000468b5cab1044895c245442894cab1048bb0000002b787f00004e8d1413498b9af00100004c8b534048c1e003448bed49c1e503488bf0488bc2448bd94d8bd8498bc24c896c2418896c2424ffd00f1f840000000000488b5424308b72408b0cf50c0000008b6c2424448b04ed10000000413bc80f86e9050000448b5c24549090909090909048c1e60346895c861085c00f856d02000090909090448b54245841ffc2488bde448b4c24384c8b4424408b4c246444895424589090909090428b04cd14000000443b14c50c0000000f82a7feffffe949060000909090909090909090909090909090909090428b34cd18000000448b14f50c0000004489542424428b34d50800000048b90000002b787f0000488d3431458bda49c1e3034c895c2418483b35000000000f8412000000483b35000000000f8449020000e93f0300009090908b4c246441bb00000000e93a0100000f1f84000000000090909090463b1cd5100000000f8d890400009090909090909048c1e603428b7c9e1085ff0f848401000090909090813cfd08000000addeadde0f85300400009090909090908b730c448b04fd10000000413bf00f86df03000044895c24549090909090909090909090909090909090909090909090909090909090908b34fd0c0000008b04f508000000428b6c831042894c831049b80000002b787f0000498d0400488b98f0010000488b434048c1e603448bef49c1e5034c8bf2448bd14c8b4424404c896c2410896c2450897c240cffd00f1f840000000000488b5424308b72408b0cf50c0000008b7c240c448b04fd10000000413bc80f86a20200008b6c24509090909090909048c1e60342896c861085c00f85e901000090909090448b5c245441ffc3488bde448b5424248b4c24649090909090428b34d514000000443b1cf50c0000000f82b3feffffe99c03000090909090837a18010f84ab010000909090448b54243c90909090909090894a208b721c428934d51000000042890cd5140000009090909090909090b801000000488b6c24704883c478493ba7500400000f87ab040000c3909090ebd744895c2454909090909090909090909090909090909090909090909090428b34d5180000008b34f50c000000448b04f50800000048bb0000002b787f00004e8d0403498b98f0010000488b434048c1e6034c8bd2448bd94c8b442440ffd00f1f84000000000085c00f84c0030000909090909090909090e95bffffff9090909090908b730c428b14d5100000003bf20f86d70100008b4c24644c8b5c243090909090909090909090909090909090909090909090909090909090428b34d50c000000448b04f508000000448b4c9310894c931048ba0000002b787f00004e8d0402498b98f0010000488b434048c1e603498bd38bf94c8b44244044894c2454ffd00f1f840000000000488b542430448b5240468b1cd50c000000448b442424468b04c510000000453bd80f8677020000448b4c24549090909090909049c1e20347894c821085c00f84dc000000909090e91cffffff909090e914ffffff448b54243c909090903b4a100f85e8000000909090e943feffff8b4c246490909049c7c3941b000041bacd7fffff8b5c24584c8b4c2428448b44245c448b74246090909090909090458997840400004d899f90040000e8000000000f1f84000000000090909049c7c0140a000041bacdb1feff90909090909090458997840400004d898790040000e8000000000f1f8400000000004c8b6c24108b6c24508b4c24649090909090909041c78784040000e533feff49c7879004000000000000e8000000000f1f8400000000008b4c24649090909090909041c78784040000ed9dfcff49c78790040000140f0000e8000000000f1f84000000000090909049c7c09407000041baed99fcffe964ffffff8b4c2464488b54243090909049c7c30000000041bae51afeffe901ffffff44895c245490909049c7c30000000041bae54ffeff90909090909090458997840400004d899f90040000e8000000000f1f84000000000044895c245490909049c7c39411000041bacd61feffebc790909049c7c3940c000041baedabfcffe99efeffff44895c245490909049c7c3940c000041baeda7fcffeb9b90909049c7c30000000041bae5c0feff4c8b442440488b74244890909090909090458997840400004d899f90040000e8000000000f1f84000000000044895c245490909049c7c30000000041bae587feffe945ffffff4c8b6c2418448b5c24548b4c24649090909090909041c78784040000e5bffdff49c7879004000000000000e8000000000f1f84000000000090909049c7c30000000041bae5dbfdffe9e4fdffff448b4c24548b4c24649090909090909041c78784040000e5fefdff49c7879004000000000000e8000000000f1f84000000000090909049c7c30000000041bae5c9feffe925ffffff90909049c7c31400000041baedaffcffe910ffffff90909049c7c01405000041bacdcfffffe9b7fdffff90909049c7c30000000041bae5a5feffe95dfdffff448b5424544c8b5c24188b4c2464488b5424309090909090909041c78784040000eda2fcff49c78790040000140f0000e8000000000f1f84000000000090909049c7c39411000041bacdecfdffe90bfdffff90909049c7c30000000041bae5f0feffe97ffeffff48896c2470e800000000e988f6fffff4488d0d41fbffff49898f68040000e93af6fffff441c78784040000f500ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5f6feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5e0feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5b6feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5b2feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5e9fdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5d0fdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5c4fdff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5aafeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f598feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f593feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f55dfeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f544feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f538feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f58cfeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f57bfeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f575feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f528feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f50ffeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f503feff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 NOP  <||@
  Comment 71 28 NOP  <||@
  Comment 72 30 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 77 32 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD  <||@
  Comment 77 34 stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 82 36 stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 86 38 stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 91 40 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0]  <||@
  Comment 91 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 91 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 94 42 r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD  <||@
  Comment 98 44 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 98 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 98 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 105 46 r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 109 48 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD  <||@
  Comment 118 block B1 null  <||@
  Comment 118 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 118 52 NOP  <||@
  Comment 119 54 NOP  <||@
  Comment 120 56 NOP  <||@
  Comment 121 58 NOP  <||@
  Comment 122 60 NOP  <||@
  Comment 123 62 NOP  <||@
  Comment 124 64 rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 124 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 124 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 132 66 r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 136 68 CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD  <||@
  Comment 145 block B2 null  <||@
  Comment 145 70 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 145 72 NOP  <||@
  Comment 146 74 NOP  <||@
  Comment 147 76 NOP  <||@
  Comment 148 78 NOP  <||@
  Comment 149 80 NOP  <||@
  Comment 150 82 rdi|DWORD = INC value: r9|DWORD size: DWORD  <||@
  Comment 155 84 CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD  <||@
  Comment 163 block B3 null  <||@
  Comment 163 86 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 163 88 NOP  <||@
  Comment 164 90 NOP  <||@
  Comment 165 92 NOP  <||@
  Comment 166 94 NOP  <||@
  Comment 167 96 NOP  <||@
  Comment 168 98 NOP  <||@
  Comment 169 100 NOP  <||@
  Comment 170 102 NOP  <||@
  Comment 171 104 NOP  <||@
  Comment 172 106 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 175 108 rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 175 [rax:0, rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 175 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 182 110 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 186 112 r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 191 114 TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 200 block B5 null  <||@
  Comment 200 134 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 200 136 NOP  <||@
  Comment 201 138 NOP  <||@
  Comment 202 140 NOP  <||@
  Comment 203 142 NOP  <||@
  Comment 204 144 NOP  <||@
  Comment 205 146 NOP  <||@
  Comment 206 148 NOP  <||@
  Comment 207 150 NOP  <||@
  Comment 208 152 NOP  <||@
  Comment 209 154 NOP  <||@
  Comment 210 156 NOP  <||@
  Comment 211 158 NOP  <||@
  Comment 212 160 NOP  <||@
  Comment 213 162 NOP  <||@
  Comment 214 164 NOP  <||@
  Comment 215 166 NOP  <||@
  Comment 216 168 NOP  <||@
  Comment 217 170 NOP  <||@
  Comment 218 172 NOP  <||@
  Comment 219 174 r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 226 176 r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD  <||@
  Comment 231 178 stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD  <||@
  Comment 236 180 stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 241 182 r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD  <||@
  Comment 246 184 stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 251 186 MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 256 188 MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 261 190 r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 271 192 rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 275 194 AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0]  <||@
  Comment 275 {DataSection[0x0]}  <||@
  Comment 288 {DataSection[0x8]}  <||@
  Comment 306 block B6 null  <||@
  Comment 306 196 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 306 198 NOP  <||@
  Comment 307 200 NOP  <||@
  Comment 308 202 NOP  <||@
  Comment 309 204 NOP  <||@
  Comment 310 206 NOP  <||@
  Comment 311 208 r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 319 210 stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 324 212 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63]  <||@
  Comment 324 [rdx:0, rbx:0, rsi:0, r8:0, r9:0, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4          |5          |6         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD  |r10|DWORD  |r14|DWORD   <||@
  Comment 324 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 324 {meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}}  <||@
  Comment 342 block B7 null  <||@
  Comment 342 214 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 342 216 stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 347 218 NOP  <||@
  Comment 348 220 NOP  <||@
  Comment 349 222 NOP  <||@
  Comment 350 224 NOP  <||@
  Comment 351 226 NOP  <||@
  Comment 352 228 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 359 230 stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 364 232 r10|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 370 234 JUMP ~outgoingValues: [] destination: B7 -> B8  <||@
  Comment 375 block B9 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 375 254 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 384 256 NOP  <||@
  Comment 385 258 NOP  <||@
  Comment 386 260 NOP  <||@
  Comment 387 262 NOP  <||@
  Comment 388 264 CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD  <||@
  Comment 402 block B10 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 402 266 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 402 268 NOP  <||@
  Comment 403 270 NOP  <||@
  Comment 404 272 NOP  <||@
  Comment 405 274 NOP  <||@
  Comment 406 276 NOP  <||@
  Comment 407 278 NOP  <||@
  Comment 408 280 NOP  <||@
  Comment 409 282 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 413 284 rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD  <||@
  Comment 418 286 TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD  <||@
  Comment 426 block B40 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 426 1112 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 426 1114 NOP  <||@
  Comment 427 1116 NOP  <||@
  Comment 428 1118 NOP  <||@
  Comment 429 1120 NOP  <||@
  Comment 430 1122 CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 430 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 447 block B41 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 447 1124 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 447 1126 NOP  <||@
  Comment 448 1128 NOP  <||@
  Comment 449 1130 NOP  <||@
  Comment 450 1132 NOP  <||@
  Comment 451 1134 NOP  <||@
  Comment 452 1136 NOP  <||@
  Comment 453 1138 rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 453 [rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 453 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 456 1140 r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 464 1142 CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD  <||@
  Comment 473 block B42 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 473 1144 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 473 1146 NOP  <||@
  Comment 474 1148 NOP  <||@
  Comment 475 1150 NOP  <||@
  Comment 476 1152 NOP  <||@
  Comment 477 1154 NOP  <||@
  Comment 478 1156 NOP  <||@
  Comment 479 1158 NOP  <||@
  Comment 480 1160 NOP  <||@
  Comment 481 1162 NOP  <||@
  Comment 482 1164 NOP  <||@
  Comment 483 1166 NOP  <||@
  Comment 484 1168 NOP  <||@
  Comment 485 1170 NOP  <||@
  Comment 486 1172 NOP  <||@
  Comment 487 1174 NOP  <||@
  Comment 488 1176 NOP  <||@
  Comment 489 1178 NOP  <||@
  Comment 490 1180 NOP  <||@
  Comment 491 1182 NOP  <||@
  Comment 492 1184 NOP  <||@
  Comment 493 1186 NOP  <||@
  Comment 494 1188 NOP  <||@
  Comment 495 1190 NOP  <||@
  Comment 496 1192 NOP  <||@
  Comment 497 1194 NOP  <||@
  Comment 498 1196 NOP  <||@
  Comment 499 1198 NOP  <||@
  Comment 500 1200 NOP  <||@
  Comment 501 1202 NOP  <||@
  Comment 502 1204 NOP  <||@
  Comment 503 1206 rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 510 1208 r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 510 [rax:0, rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 510 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 518 1210 r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD  <||@
  Comment 523 1212 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 528 1214 MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 533 1216 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 543 1218 r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 547 1220 rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD  <||@
  Comment 554 1222 r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 558 1224 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 562 1226 r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 569 1228 rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD  <||@
  Comment 572 1230 rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 575 1234 r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 578 1238 r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 581 1242 rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD  <||@
  Comment 584 1244 stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 589 1246 stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD  <||@
  Comment 593 1248 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70]  <||@
  Comment 593 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 593 INLINE_INVOKE  <||@
  Comment 595 [stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 603 1250 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 608 1252 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 611 1254 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70]  <||@
  Comment 611 [rdx:0, rsi:0, stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 611 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 618 1256 rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD  <||@
  Comment 622 1258 r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 630 1260 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD  <||@
  Comment 639 block B43 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 639 1262 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 639 1264 r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 644 1266 NOP  <||@
  Comment 645 1268 NOP  <||@
  Comment 646 1270 NOP  <||@
  Comment 647 1272 NOP  <||@
  Comment 648 1274 NOP  <||@
  Comment 649 1276 NOP  <||@
  Comment 650 1278 NOP  <||@
  Comment 651 1280 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 655 1282 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 660 1284 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD  <||@
  Comment 668 block B44 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 668 1286 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 668 1288 NOP  <||@
  Comment 669 1290 NOP  <||@
  Comment 670 1292 NOP  <||@
  Comment 671 1294 NOP  <||@
  Comment 672 1296 r10|DWORD = INC value: stack:40|DWORD size: DWORD  <||@
  Comment 680 1298 rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 683 1300 r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD  <||@
  Comment 688 1302 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 693 1304 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 697 1306 JUMP ~outgoingValues: [] destination: B44 -> B8  <||@
  Comment 697 block B8 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 697 236 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 697 238 stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 702 240 NOP  <||@
  Comment 703 242 NOP  <||@
  Comment 704 244 NOP  <||@
  Comment 705 246 NOP  <||@
  Comment 706 248 NOP  <||@
  Comment 707 250 rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 715 252 CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70]  <||@
  Comment 715 [rax:0, rdx:0, rbx:0, r8:0, r9:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 715 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 734 block B11 null  <||@
  Comment 734 288 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 734 290 NOP  <||@
  Comment 735 292 NOP  <||@
  Comment 736 294 NOP  <||@
  Comment 737 296 NOP  <||@
  Comment 738 298 NOP  <||@
  Comment 739 300 NOP  <||@
  Comment 740 302 NOP  <||@
  Comment 741 304 NOP  <||@
  Comment 742 306 NOP  <||@
  Comment 743 308 NOP  <||@
  Comment 744 310 NOP  <||@
  Comment 745 312 NOP  <||@
  Comment 746 314 NOP  <||@
  Comment 747 316 NOP  <||@
  Comment 748 318 NOP  <||@
  Comment 749 320 NOP  <||@
  Comment 750 322 NOP  <||@
  Comment 751 324 NOP  <||@
  Comment 752 326 rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 760 328 r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 760 [rdx:0, rbx:0, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 760 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 768 330 stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 773 332 rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 773 [rdx:0, rbx:0, r10:0, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 773 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 781 334 rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 791 336 rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 795 338 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 802 340 stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 807 342 AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0]  <||@
  Comment 807 {DataSection[0x10]}  <||@
  Comment 820 {DataSection[0x18]}  <||@
  Comment 838 block B12 null  <||@
  Comment 838 344 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 838 346 NOP  <||@
  Comment 839 348 NOP  <||@
  Comment 840 350 NOP  <||@
  Comment 841 352 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 845 354 r11|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 851 356 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 856 block B14 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 856 374 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 864 376 NOP  <||@
  Comment 865 378 NOP  <||@
  Comment 866 380 NOP  <||@
  Comment 867 382 NOP  <||@
  Comment 868 384 CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD  <||@
  Comment 882 block B15 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 882 386 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 882 388 NOP  <||@
  Comment 883 390 NOP  <||@
  Comment 884 392 NOP  <||@
  Comment 885 394 NOP  <||@
  Comment 886 396 NOP  <||@
  Comment 887 398 NOP  <||@
  Comment 888 400 NOP  <||@
  Comment 889 402 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 893 404 rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 898 406 TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD  <||@
  Comment 906 block B18 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 906 520 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 906 522 NOP  <||@
  Comment 907 524 NOP  <||@
  Comment 908 526 NOP  <||@
  Comment 909 528 NOP  <||@
  Comment 910 530 CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 910 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 927 block B19 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 927 532 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 927 534 NOP  <||@
  Comment 928 536 NOP  <||@
  Comment 929 538 NOP  <||@
  Comment 930 540 NOP  <||@
  Comment 931 542 NOP  <||@
  Comment 932 544 NOP  <||@
  Comment 933 546 rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 933 [rdx:0, rbx:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 933 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 936 548 r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 944 550 CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD  <||@
  Comment 953 block B20 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 953 552 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 953 554 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 958 556 NOP  <||@
  Comment 959 558 NOP  <||@
  Comment 960 560 NOP  <||@
  Comment 961 562 NOP  <||@
  Comment 962 564 NOP  <||@
  Comment 963 566 NOP  <||@
  Comment 964 568 NOP  <||@
  Comment 965 570 NOP  <||@
  Comment 966 572 NOP  <||@
  Comment 967 574 NOP  <||@
  Comment 968 576 NOP  <||@
  Comment 969 578 NOP  <||@
  Comment 970 580 NOP  <||@
  Comment 971 582 NOP  <||@
  Comment 972 584 NOP  <||@
  Comment 973 586 NOP  <||@
  Comment 974 588 NOP  <||@
  Comment 975 590 NOP  <||@
  Comment 976 592 NOP  <||@
  Comment 977 594 NOP  <||@
  Comment 978 596 NOP  <||@
  Comment 979 598 NOP  <||@
  Comment 980 600 NOP  <||@
  Comment 981 602 NOP  <||@
  Comment 982 604 NOP  <||@
  Comment 983 606 NOP  <||@
  Comment 984 608 NOP  <||@
  Comment 985 610 NOP  <||@
  Comment 986 612 NOP  <||@
  Comment 987 614 NOP  <||@
  Comment 988 616 rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 995 618 rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 995 [rdx:0, rbx:0, rsi:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 995 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1002 620 rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1007 622 MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1012 624 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1022 626 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1026 628 rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 1033 630 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1037 632 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1041 634 r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1048 636 r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1051 640 r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1054 644 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1059 646 stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 1064 648 stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD  <||@
  Comment 1068 650 stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD  <||@
  Comment 1072 652 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70]  <||@
  Comment 1072 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1072 INLINE_INVOKE  <||@
  Comment 1074 [stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:112|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |stack:48|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1                  |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1082 654 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1087 656 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1090 658 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70]  <||@
  Comment 1090 [rdx:0, rsi:0, stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:112|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:48|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1             |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1090 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1097 660 rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD  <||@
  Comment 1101 662 r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1109 664 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD  <||@
  Comment 1118 block B21 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 1118 666 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1118 668 rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD  <||@
  Comment 1122 670 NOP  <||@
  Comment 1123 672 NOP  <||@
  Comment 1124 674 NOP  <||@
  Comment 1125 676 NOP  <||@
  Comment 1126 678 NOP  <||@
  Comment 1127 680 NOP  <||@
  Comment 1128 682 NOP  <||@
  Comment 1129 684 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1133 686 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD  <||@
  Comment 1138 688 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD  <||@
  Comment 1146 block B22 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 1146 690 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1146 692 NOP  <||@
  Comment 1147 694 NOP  <||@
  Comment 1148 696 NOP  <||@
  Comment 1149 698 NOP  <||@
  Comment 1150 700 r11|DWORD = INC value: stack:44|DWORD size: DWORD  <||@
  Comment 1158 702 rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 1161 704 r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD  <||@
  Comment 1166 706 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1170 708 JUMP ~outgoingValues: [] destination: B22 -> B13  <||@
  Comment 1170 block B13 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 1170 358 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1170 360 NOP  <||@
  Comment 1171 362 NOP  <||@
  Comment 1172 364 NOP  <||@
  Comment 1173 366 NOP  <||@
  Comment 1174 368 NOP  <||@
  Comment 1175 370 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 1183 372 CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 1183 [rdx:0, rbx:0, rsi:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1183 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1202 block B54 null  <||@
  Comment 1202 1480 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1202 1482 NOP  <||@
  Comment 1203 1484 NOP  <||@
  Comment 1204 1486 NOP  <||@
  Comment 1205 1488 NOP  <||@
  Comment 1206 1490 CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null  <||@
  Comment 1216 block B58 null  <||@
  Comment 1216 1532 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1216 1534 NOP  <||@
  Comment 1217 1536 NOP  <||@
  Comment 1218 1538 NOP  <||@
  Comment 1219 1540 r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD  <||@
  Comment 1224 1544 JUMP ~outgoingValues: [] destination: B58 -> B59  <||@
  Comment 1224 block B59 null  <||@
  Comment 1224 1546 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1224 1548 NOP  <||@
  Comment 1225 1550 NOP  <||@
  Comment 1226 1552 NOP  <||@
  Comment 1227 1554 NOP  <||@
  Comment 1228 1556 NOP  <||@
  Comment 1229 1558 NOP  <||@
  Comment 1230 1560 NOP  <||@
  Comment 1231 1562 MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD  <||@
  Comment 1234 1564 rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD  <||@
  Comment 1237 1566 MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD  <||@
  Comment 1245 1568 MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD  <||@
  Comment 1253 1570 JUMP ~outgoingValues: [] destination: B59 -> B60  <||@
  Comment 1253 block B60 null  <||@
  Comment 1253 1572 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1253 1574 NOP  <||@
  Comment 1254 1576 NOP  <||@
  Comment 1255 1578 NOP  <||@
  Comment 1256 1580 NOP  <||@
  Comment 1257 1582 NOP  <||@
  Comment 1258 1584 NOP  <||@
  Comment 1259 1586 NOP  <||@
  Comment 1260 1588 NOP  <||@
  Comment 1261 1590 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 1266 1592 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 1275 POLL_RETURN_FAR  <||@
  Comment 1289 block B45 null  <||@
  Comment 1289 1308 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1289 1310 NOP  <||@
  Comment 1290 1312 NOP  <||@
  Comment 1291 1314 NOP  <||@
  Comment 1292 1316 JUMP ~outgoingValues: [] destination: B45 -> B60  <||@
  Comment 1294 block B16 null  <||@
  Comment 1294 408 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1294 410 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1299 412 NOP  <||@
  Comment 1300 414 NOP  <||@
  Comment 1301 416 NOP  <||@
  Comment 1302 418 NOP  <||@
  Comment 1303 420 NOP  <||@
  Comment 1304 422 NOP  <||@
  Comment 1305 424 NOP  <||@
  Comment 1306 426 NOP  <||@
  Comment 1307 428 NOP  <||@
  Comment 1308 430 NOP  <||@
  Comment 1309 432 NOP  <||@
  Comment 1310 434 NOP  <||@
  Comment 1311 436 NOP  <||@
  Comment 1312 438 NOP  <||@
  Comment 1313 440 NOP  <||@
  Comment 1314 442 NOP  <||@
  Comment 1315 444 NOP  <||@
  Comment 1316 446 NOP  <||@
  Comment 1317 448 NOP  <||@
  Comment 1318 450 NOP  <||@
  Comment 1319 452 NOP  <||@
  Comment 1320 454 NOP  <||@
  Comment 1321 456 NOP  <||@
  Comment 1322 458 NOP  <||@
  Comment 1323 460 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 1331 462 rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 1331 [rdx:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1331 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1338 464 r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 1338 [rdx:0, rsi:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1338 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1346 466 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1356 468 r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1360 470 rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD  <||@
  Comment 1367 472 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1371 474 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1375 476 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1378 480 r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1381 484 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1386 486 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70]  <||@
  Comment 1386 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1386 INLINE_INVOKE  <||@
  Comment 1388 [stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                   |1                  |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1396 488 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD  <||@
  Comment 1404 block B24 null  <||@
  Comment 1404 720 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1404 722 NOP  <||@
  Comment 1405 724 NOP  <||@
  Comment 1406 726 NOP  <||@
  Comment 1407 728 JUMP ~outgoingValues: [] destination: B24 -> B36  <||@
  Comment 1407 block B36 null  <||@
  Comment 1407 1026 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1407 1028 NOP  <||@
  Comment 1408 1030 NOP  <||@
  Comment 1409 1032 NOP  <||@
  Comment 1410 1034 JUMP ~outgoingValues: [] destination: B36 -> B46  <||@
  Comment 1410 block B46 null  <||@
  Comment 1410 1318 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1410 1320 NOP  <||@
  Comment 1411 1322 NOP  <||@
  Comment 1412 1324 NOP  <||@
  Comment 1413 1326 JUMP ~outgoingValues: [] destination: B46 -> B60  <||@
  Comment 1418 block B31 null  <||@
  Comment 1418 844 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1418 846 NOP  <||@
  Comment 1419 848 NOP  <||@
  Comment 1420 850 NOP  <||@
  Comment 1421 852 NOP  <||@
  Comment 1422 854 NOP  <||@
  Comment 1423 856 NOP  <||@
  Comment 1424 858 rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 1424 [rbx:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1424 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1427 860 rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1435 862 CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD  <||@
  Comment 1443 block B32 null  <||@
  Comment 1443 864 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1443 866 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1447 868 r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1452 870 NOP  <||@
  Comment 1453 872 NOP  <||@
  Comment 1454 874 NOP  <||@
  Comment 1455 876 NOP  <||@
  Comment 1456 878 NOP  <||@
  Comment 1457 880 NOP  <||@
  Comment 1458 882 NOP  <||@
  Comment 1459 884 NOP  <||@
  Comment 1460 886 NOP  <||@
  Comment 1461 888 NOP  <||@
  Comment 1462 890 NOP  <||@
  Comment 1463 892 NOP  <||@
  Comment 1464 894 NOP  <||@
  Comment 1465 896 NOP  <||@
  Comment 1466 898 NOP  <||@
  Comment 1467 900 NOP  <||@
  Comment 1468 902 NOP  <||@
  Comment 1469 904 NOP  <||@
  Comment 1470 906 NOP  <||@
  Comment 1471 908 NOP  <||@
  Comment 1472 910 NOP  <||@
  Comment 1473 912 NOP  <||@
  Comment 1474 914 NOP  <||@
  Comment 1475 916 NOP  <||@
  Comment 1476 918 NOP  <||@
  Comment 1477 920 NOP  <||@
  Comment 1478 922 NOP  <||@
  Comment 1479 924 NOP  <||@
  Comment 1480 926 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 1488 928 r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 1488 [rbx:0, rsi:0, r11:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |r11|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |r11|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1488 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1496 930 r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1501 932 MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1505 934 rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1515 936 r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1519 938 rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD  <||@
  Comment 1526 940 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1530 942 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1534 944 rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 1537 946 rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1539 950 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1544 952 stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD  <||@
  Comment 1549 954 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70]  <||@
  Comment 1549 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1549 INLINE_INVOKE  <||@
  Comment 1551 [stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1559 956 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1564 958 r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1568 960 r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70]  <||@
  Comment 1568 [rdx:0, r10:0, stack:24, stack:36, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1568 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1576 962 r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD  <||@
  Comment 1581 964 r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1589 966 CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD  <||@
  Comment 1598 block B33 null  <||@
  Comment 1598 968 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1598 970 r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 1603 972 NOP  <||@
  Comment 1604 974 NOP  <||@
  Comment 1605 976 NOP  <||@
  Comment 1606 978 NOP  <||@
  Comment 1607 980 NOP  <||@
  Comment 1608 982 NOP  <||@
  Comment 1609 984 NOP  <||@
  Comment 1610 986 r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1614 988 MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD  <||@
  Comment 1619 990 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD  <||@
  Comment 1627 block B35 null  <||@
  Comment 1627 1016 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1627 1018 NOP  <||@
  Comment 1628 1020 NOP  <||@
  Comment 1629 1022 NOP  <||@
  Comment 1630 1024 JUMP ~outgoingValues: [] destination: B35 -> B36  <||@
  Comment 1635 block B23 null  <||@
  Comment 1635 710 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1635 712 NOP  <||@
  Comment 1636 714 NOP  <||@
  Comment 1637 716 NOP  <||@
  Comment 1638 718 JUMP ~outgoingValues: [] destination: B23 -> B36  <||@
  Comment 1643 block B55 null  <||@
  Comment 1643 1492 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1643 1494 r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD  <||@
  Comment 1648 1498 NOP  <||@
  Comment 1649 1500 NOP  <||@
  Comment 1650 1502 NOP  <||@
  Comment 1651 1504 NOP  <||@
  Comment 1652 1506 CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD  <||@
  Comment 1661 block B56 null  <||@
  Comment 1661 1508 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1661 1510 NOP  <||@
  Comment 1662 1512 NOP  <||@
  Comment 1663 1514 NOP  <||@
  Comment 1664 1516 JUMP ~outgoingValues: [] destination: B56 -> B59  <||@
  Comment 1669 block B39 null  <||@
  Comment 1669 1088 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1669 1090 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1673 1092 NOP  <||@
  Comment 1674 1094 NOP  <||@
  Comment 1675 1096 NOP  <||@
  Comment 1676 1098 r11|QWORD = MOVE input: long[7060|0x1b94]  <||@
  Comment 1683 1100 r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd]  <||@
  Comment 1689 1110 JUMP ~outgoingValues: [] destination: B39 -> B52  <||@
  Comment 1689 block B52 null  <||@
  Comment 1689 1444 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1689 1434 rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 1693 1436 r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD  <||@
  Comment 1698 1438 r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1703 1440 r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 1708 1446 NOP  <||@
  Comment 1709 1448 NOP  <||@
  Comment 1710 1450 NOP  <||@
  Comment 1711 1452 NOP  <||@
  Comment 1712 1454 NOP  <||@
  Comment 1713 1456 NOP  <||@
  Comment 1714 1458 NOP  <||@
  Comment 1715 1460 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1722 1462 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1729 1464 DEOPT info [bci:3, 7, 70]  <||@
  Comment 1729 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1734 [rdx:0, r9:0, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0            |1             |2          |3                  |4         
     locals:  |r9|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |rbx|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5         |6         
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |r8|DWORD  |r14|DWORD   <||@
  Comment 1742 block B53 null  <||@
  Comment 1742 1466 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1742 1468 NOP  <||@
  Comment 1743 1470 NOP  <||@
  Comment 1744 1472 NOP  <||@
  Comment 1745 1474 r8|QWORD = MOVE input: long[2580|0xa14]  <||@
  Comment 1752 1476 r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd]  <||@
  Comment 1758 1478 JUMP ~outgoingValues: [] destination: B53 -> B62  <||@
  Comment 1758 block B62 null  <||@
  Comment 1758 1608 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1758 1610 NOP  <||@
  Comment 1759 1612 NOP  <||@
  Comment 1760 1614 NOP  <||@
  Comment 1761 1616 NOP  <||@
  Comment 1762 1618 NOP  <||@
  Comment 1763 1620 NOP  <||@
  Comment 1764 1622 NOP  <||@
  Comment 1765 1624 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1772 1626 MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD  <||@
  Comment 1779 1628 DEOPT info [bci:63]  <||@
  Comment 1779 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1784 [rdx:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4          |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1792 block B25 null  <||@
  Comment 1792 730 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1792 732 r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD  <||@
  Comment 1797 734 rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD  <||@
  Comment 1801 736 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1805 738 NOP  <||@
  Comment 1806 740 NOP  <||@
  Comment 1807 742 NOP  <||@
  Comment 1808 744 NOP  <||@
  Comment 1809 746 NOP  <||@
  Comment 1810 748 NOP  <||@
  Comment 1811 750 NOP  <||@
  Comment 1812 752 MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD  <||@
  Comment 1823 754 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1834 756 DEOPT info [bci:31, 50, 32, 7, 70]  <||@
  Comment 1834 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1839 [rdx:0, r13:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1             |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |rdx|QWORD[.]  |-  |-  |rbp|DWORD  |- 
     stack:   |rax|DWORD     |              |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1847 block B34 null  <||@
  Comment 1847 992 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1847 994 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1851 996 NOP  <||@
  Comment 1852 998 NOP  <||@
  Comment 1853 1000 NOP  <||@
  Comment 1854 1002 NOP  <||@
  Comment 1855 1004 NOP  <||@
  Comment 1856 1006 NOP  <||@
  Comment 1857 1008 NOP  <||@
  Comment 1858 1010 MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD  <||@
  Comment 1869 1012 MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD  <||@
  Comment 1880 1014 DEOPT info [bci:44, 32, 7, 70]  <||@
  Comment 1880 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1885 [rdx:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4         |5          
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r9|DWORD  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1893 block B57 null  <||@
  Comment 1893 1518 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1893 1520 NOP  <||@
  Comment 1894 1522 NOP  <||@
  Comment 1895 1524 NOP  <||@
  Comment 1896 1526 r8|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 1903 1528 r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed]  <||@
  Comment 1909 1530 JUMP ~outgoingValues: [] destination: B57 -> B62  <||@
  Comment 1914 block B38 null  <||@
  Comment 1914 1062 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1914 1064 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1918 1066 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1923 1068 NOP  <||@
  Comment 1924 1070 NOP  <||@
  Comment 1925 1072 NOP  <||@
  Comment 1926 1074 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1933 1076 r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5]  <||@
  Comment 1939 1086 JUMP ~outgoingValues: [] destination: B38 -> B52  <||@
  Comment 1944 block B26 null  <||@
  Comment 1944 758 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1944 760 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1949 762 NOP  <||@
  Comment 1950 764 NOP  <||@
  Comment 1951 766 NOP  <||@
  Comment 1952 768 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1959 770 r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5]  <||@
  Comment 1965 772 JUMP ~outgoingValues: [] destination: B26 -> B30  <||@
  Comment 1965 block B30 null  <||@
  Comment 1965 822 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1965 824 NOP  <||@
  Comment 1966 826 NOP  <||@
  Comment 1967 828 NOP  <||@
  Comment 1968 830 NOP  <||@
  Comment 1969 832 NOP  <||@
  Comment 1970 834 NOP  <||@
  Comment 1971 836 NOP  <||@
  Comment 1972 838 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1979 840 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1986 842 DEOPT info [bci:3, 32, 7, 70]  <||@
  Comment 1986 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1991 [rdx:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1999 block B27 null  <||@
  Comment 1999 774 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1999 776 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2004 778 NOP  <||@
  Comment 2005 780 NOP  <||@
  Comment 2006 782 NOP  <||@
  Comment 2007 784 r11|QWORD = MOVE input: long[4500|0x1194]  <||@
  Comment 2014 786 r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd]  <||@
  Comment 2020 788 JUMP ~outgoingValues: [] destination: B27 -> B30  <||@
  Comment 2022 block B50 null  <||@
  Comment 2022 1400 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2022 1402 NOP  <||@
  Comment 2023 1404 NOP  <||@
  Comment 2024 1406 NOP  <||@
  Comment 2025 1408 r11|QWORD = MOVE input: long[3220|0xc94]  <||@
  Comment 2032 1410 r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed]  <||@
  Comment 2038 1420 JUMP ~outgoingValues: [] destination: B50 -> B52  <||@
  Comment 2043 block B28 null  <||@
  Comment 2043 790 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2043 792 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2048 794 NOP  <||@
  Comment 2049 796 NOP  <||@
  Comment 2050 798 NOP  <||@
  Comment 2051 800 r11|QWORD = MOVE input: long[3220|0xc94]  <||@
  Comment 2058 802 r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed]  <||@
  Comment 2064 804 JUMP ~outgoingValues: [] destination: B28 -> B30  <||@
  Comment 2066 block B63 null  <||@
  Comment 2066 1630 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2066 1632 NOP  <||@
  Comment 2067 1634 NOP  <||@
  Comment 2068 1636 NOP  <||@
  Comment 2069 1638 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2076 1640 r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5]  <||@
  Comment 2082 1646 JUMP ~outgoingValues: [] destination: B63 -> B66  <||@
  Comment 2082 block B66 null  <||@
  Comment 2082 1684 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 2082 1678 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 2087 1680 rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 2092 1686 NOP  <||@
  Comment 2093 1688 NOP  <||@
  Comment 2094 1690 NOP  <||@
  Comment 2095 1692 NOP  <||@
  Comment 2096 1694 NOP  <||@
  Comment 2097 1696 NOP  <||@
  Comment 2098 1698 NOP  <||@
  Comment 2099 1700 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 2106 1702 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 2113 1704 DEOPT info [bci:0]  <||@
  Comment 2113 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2118 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2126 block B29 null  <||@
  Comment 2126 806 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2126 808 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2131 810 NOP  <||@
  Comment 2132 812 NOP  <||@
  Comment 2133 814 NOP  <||@
  Comment 2134 816 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2141 818 r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5]  <||@
  Comment 2147 820 JUMP ~outgoingValues: [] destination: B29 -> B30  <||@
  Comment 2152 block B47 null  <||@
  Comment 2152 1328 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2152 1330 r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD  <||@
  Comment 2157 1332 r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 2162 1334 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2166 1336 NOP  <||@
  Comment 2167 1338 NOP  <||@
  Comment 2168 1340 NOP  <||@
  Comment 2169 1342 NOP  <||@
  Comment 2170 1344 NOP  <||@
  Comment 2171 1346 NOP  <||@
  Comment 2172 1348 NOP  <||@
  Comment 2173 1350 MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD  <||@
  Comment 2184 1352 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2195 1354 DEOPT info [bci:31, 50, 7, 70]  <||@
  Comment 2195 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2200 [rdx:0, r13:0, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1             |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r11|DWORD  |- 
     stack:   |rax|DWORD     |              |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2208 block B48 null  <||@
  Comment 2208 1356 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2208 1358 NOP  <||@
  Comment 2209 1360 NOP  <||@
  Comment 2210 1362 NOP  <||@
  Comment 2211 1364 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2218 1366 r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5]  <||@
  Comment 2224 1376 JUMP ~outgoingValues: [] destination: B48 -> B52  <||@
  Comment 2229 block B37 null  <||@
  Comment 2229 1036 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2229 1038 r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 2234 1040 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2238 1042 NOP  <||@
  Comment 2239 1044 NOP  <||@
  Comment 2240 1046 NOP  <||@
  Comment 2241 1048 NOP  <||@
  Comment 2242 1050 NOP  <||@
  Comment 2243 1052 NOP  <||@
  Comment 2244 1054 NOP  <||@
  Comment 2245 1056 MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD  <||@
  Comment 2256 1058 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2267 1060 DEOPT info [bci:31, 32, 7, 70]  <||@
  Comment 2267 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2272 [rdx:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4         |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r9|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |          |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2280 block B64 null  <||@
  Comment 2280 1648 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2280 1650 NOP  <||@
  Comment 2281 1652 NOP  <||@
  Comment 2282 1654 NOP  <||@
  Comment 2283 1656 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2290 1658 r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5]  <||@
  Comment 2296 1664 JUMP ~outgoingValues: [] destination: B64 -> B66  <||@
  Comment 2301 block B4 null  <||@
  Comment 2301 116 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2301 118 NOP  <||@
  Comment 2302 120 NOP  <||@
  Comment 2303 122 NOP  <||@
  Comment 2304 124 r11|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 2311 126 r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed]  <||@
  Comment 2317 132 JUMP ~outgoingValues: [] destination: B4 -> B66  <||@
  Comment 2322 block B61 null  <||@
  Comment 2322 1594 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2322 1596 NOP  <||@
  Comment 2323 1598 NOP  <||@
  Comment 2324 1600 NOP  <||@
  Comment 2325 1602 r8|QWORD = MOVE input: long[1300|0x514]  <||@
  Comment 2332 1604 r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd]  <||@
  Comment 2338 1606 JUMP ~outgoingValues: [] destination: B61 -> B62  <||@
  Comment 2343 block B51 null  <||@
  Comment 2343 1422 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2343 1424 NOP  <||@
  Comment 2344 1426 NOP  <||@
  Comment 2345 1428 NOP  <||@
  Comment 2346 1430 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2353 1432 r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5]  <||@
  Comment 2359 1442 JUMP ~outgoingValues: [] destination: B51 -> B52  <||@
  Comment 2364 block B17 null  <||@
  Comment 2364 490 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2364 492 r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 2369 494 r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD  <||@
  Comment 2374 496 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2378 498 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 2383 500 NOP  <||@
  Comment 2384 502 NOP  <||@
  Comment 2385 504 NOP  <||@
  Comment 2386 506 NOP  <||@
  Comment 2387 508 NOP  <||@
  Comment 2388 510 NOP  <||@
  Comment 2389 512 NOP  <||@
  Comment 2390 514 MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD  <||@
  Comment 2401 516 MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD  <||@
  Comment 2412 518 DEOPT info [bci:35, 32, 7, 70]  <||@
  Comment 2412 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2417 [rdx:0, r11:0, stack:40, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0             |1             |2          |3                  |4         
     locals:  |r11|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r10|DWORD 
     stack:   |int[0|0x0]    |              |           |                   |          
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2425 block B49 null  <||@
  Comment 2425 1378 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2425 1380 NOP  <||@
  Comment 2426 1382 NOP  <||@
  Comment 2427 1384 NOP  <||@
  Comment 2428 1386 r11|QWORD = MOVE input: long[4500|0x1194]  <||@
  Comment 2435 1388 r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd]  <||@
  Comment 2441 1398 JUMP ~outgoingValues: [] destination: B49 -> B52  <||@
  Comment 2446 block B65 null  <||@
  Comment 2446 1666 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2446 1668 NOP  <||@
  Comment 2447 1670 NOP  <||@
  Comment 2448 1672 NOP  <||@
  Comment 2449 1674 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2456 1676 r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5]  <||@
  Comment 2462 1682 JUMP ~outgoingValues: [] destination: B65 -> B66  <||@
  Comment 2472 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 2497 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 2525 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2530 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2560 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2565 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2595 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2600 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2630 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2635 [rax:0, rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2665 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2670 [rdx:0, rbx:0, rsi:0, r8:0, r9:0, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4          |5          |6         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD  |r10|DWORD  |r14|DWORD   <||@
  Comment 2700 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2705 [rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2735 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2740 [rax:0, rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2770 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2775 [rdx:0, rsi:0, stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2805 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2810 [rax:0, rdx:0, rbx:0, r8:0, r9:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2840 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2845 [rdx:0, rbx:0, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2875 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2880 [rdx:0, rbx:0, r10:0, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2910 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2915 [rdx:0, rbx:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2945 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2950 [rdx:0, rbx:0, rsi:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2980 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2985 [rdx:0, rsi:0, stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:112|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:48|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1             |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3015 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3020 [rdx:0, rbx:0, rsi:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3050 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3055 [rdx:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3085 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3090 [rdx:0, rsi:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3120 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3125 [rbx:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3155 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3160 [rbx:0, rsi:0, r11:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |r11|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |r11|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3190 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3195 [rdx:0, r10:0, stack:24, stack:36, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3203 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 3203 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 3209 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 3209 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-4921[java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-4921[java.util.regex.Pattern$GroupTail.match(Matcher, int, CharSequence)]"
  date 1724269738578
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f789adfefa0 448b560849bc0000002b787f00004d03d44d33e4493bc20f85c36098fe66669089842400c0feff4883ec789041817f20030000000f8569090000909090909090909090909090909048896c24704889742448894c24644c894424408b5a40448b52388b04dd0c000000448b5e10413bc30f8618090000909090909090428b04d50c000000448b4e14413bc10f86570800009090909090418bf9ffc73bc70f866f0700009090909090909090908b460c8b2cc50800000048c1e303468b5c9b104585db0f8c3508000090909090909090909090909090909090909090458bea49c1e503458b74bd104489742460448954243c478b548d10448954245c47895c8d1041894cbd1049b90000002b787f0000498d2c29483b2dc6feffff0f8412000000483b2dc1feffff0f8485030000e9e00700009090909090448b0cc50c00000044894c243842813ccd0800000000ae35000f857805000048895424309090909090458bd949c1e3034c895c242841ba00000000e942010000660f1f84000000000090909090463b14cd100000000f8d540600009090909090909048c1e003428b6c901085ed0f843401000090909090813ced08000000a88e35000f85ba0700009090909090908b430c448b2ced10000000413bc50f86c70600009090909090909090909090909090909090909090909090909090909090908b04ed0c000000448b14c508000000468b5cab1044895c245442894cab1048bb0000002b787f00004e8d1413498b9af00100004c8b534048c1e003448bed49c1e503488bf0488bc2448bd94d8bd8498bc24c896c2418896c2424ffd00f1f840000000000488b5424308b72408b0cf50c0000008b6c2424448b04ed10000000413bc80f86e9050000448b5c24549090909090909048c1e60346895c861085c00f856d02000090909090448b54245841ffc2488bde448b4c24384c8b4424408b4c246444895424589090909090428b04cd14000000443b14c50c0000000f82a7feffffe949060000909090909090909090909090909090909090428b34cd18000000448b14f50c0000004489542424428b34d50800000048b90000002b787f0000488d3431458bda49c1e3034c895c2418483b35c2fcffff0f8412000000483b35bdfcffff0f8449020000e93f0300009090908b4c246441bb00000000e93a0100000f1f84000000000090909090463b1cd5100000000f8d890400009090909090909048c1e603428b7c9e1085ff0f848401000090909090813cfd08000000a88e35000f85300400009090909090908b730c448b04fd10000000413bf00f86df03000044895c24549090909090909090909090909090909090909090909090909090909090908b34fd0c0000008b04f508000000428b6c831042894c831049b80000002b787f0000498d0400488b98f0010000488b434048c1e603448bef49c1e5034c8bf2448bd14c8b4424404c896c2410896c2450897c240cffd00f1f840000000000488b5424308b72408b0cf50c0000008b7c240c448b04fd10000000413bc80f86a20200008b6c24509090909090909048c1e60342896c861085c00f85e901000090909090448b5c245441ffc3488bde448b5424248b4c24649090909090428b34d514000000443b1cf50c0000000f82b3feffffe99c03000090909090837a18010f84ab010000909090448b54243c90909090909090894a208b721c428934d51000000042890cd5140000009090909090909090b801000000488b6c24704883c478493ba7500400000f87ab040000c3909090ebd744895c2454909090909090909090909090909090909090909090909090428b34d5180000008b34f50c000000448b04f50800000048bb0000002b787f00004e8d0403498b98f0010000488b434048c1e6034c8bd2448bd94c8b442440ffd00f1f84000000000085c00f84c0030000909090909090909090e95bffffff9090909090908b730c428b14d5100000003bf20f86d70100008b4c24644c8b5c243090909090909090909090909090909090909090909090909090909090428b34d50c000000448b04f508000000448b4c9310894c931048ba0000002b787f00004e8d0402498b98f0010000488b434048c1e603498bd38bf94c8b44244044894c2454ffd00f1f840000000000488b542430448b5240468b1cd50c000000448b442424468b04c510000000453bd80f8677020000448b4c24549090909090909049c1e20347894c821085c00f84dc000000909090e91cffffff909090e914ffffff448b54243c909090903b4a100f85e8000000909090e943feffff8b4c246490909049c7c3941b000041bacd7fffff8b5c24584c8b4c2428448b44245c448b74246090909090909090458997840400004d899f90040000e814bb98fe0f1f84000000000090909049c7c0140a000041bacdb1feff90909090909090458997840400004d898790040000e8e2ba98fe0f1f8400000000004c8b6c24108b6c24508b4c24649090909090909041c78784040000e533feff49c7879004000000000000e8abba98fe0f1f8400000000008b4c24649090909090909041c78784040000ed9dfcff49c78790040000140f0000e87dba98fe0f1f84000000000090909049c7c09407000041baed99fcffe964ffffff8b4c2464488b54243090909049c7c30000000041bae51afeffe901ffffff44895c245490909049c7c30000000041bae54ffeff90909090909090458997840400004d899f90040000e813ba98fe0f1f84000000000044895c245490909049c7c39411000041bacd61feffebc790909049c7c3940c000041baedabfcffe99efeffff44895c245490909049c7c3940c000041baeda7fcffeb9b90909049c7c30000000041bae5c0feff4c8b442440488b74244890909090909090458997840400004d899f90040000e894b998fe0f1f84000000000044895c245490909049c7c30000000041bae587feffe945ffffff4c8b6c2418448b5c24548b4c24649090909090909041c78784040000e5bffdff49c7879004000000000000e842b998fe0f1f84000000000090909049c7c30000000041bae5dbfdffe9e4fdffff448b4c24548b4c24649090909090909041c78784040000e5fefdff49c7879004000000000000e8fab898fe0f1f84000000000090909049c7c30000000041bae5c9feffe925ffffff90909049c7c31400000041baedaffcffe910ffffff90909049c7c01405000041bacdcfffffe9b7fdffff90909049c7c30000000041bae5a5feffe95dfdffff448b5424544c8b5c24188b4c2464488b5424309090909090909041c78784040000eda2fcff49c78790040000140f0000e869b898fe0f1f84000000000090909049c7c39411000041bacdecfdffe90bfdffff90909049c7c30000000041bae5f0feffe97ffeffff48896c2470e8d3b896fee988f6fffff4488d0d41fbffff49898f68040000e99ac698fef441c78784040000f500ffff49c7879004000000000000e8f8b798fe0f1f84000000000041c78784040000f5f6feff49c7879004000000000000e8d5b798fe0f1f84000000000041c78784040000f5e0feff49c7879004000000000000e8b2b798fe0f1f84000000000041c78784040000f5b6feff49c7879004000000000000e88fb798fe0f1f84000000000041c78784040000f5b2feff49c7879004000000000000e86cb798fe0f1f84000000000041c78784040000f5e9fdff49c7879004000000000000e849b798fe0f1f84000000000041c78784040000f5d0fdff49c7879004000000000000e826b798fe0f1f84000000000041c78784040000f5c4fdff49c7879004000000000000e803b798fe0f1f84000000000041c78784040000f5aafeff49c7879004000000000000e8e0b698fe0f1f84000000000041c78784040000f598feff49c7879004000000000000e8bdb698fe0f1f84000000000041c78784040000f593feff49c7879004000000000000e89ab698fe0f1f84000000000041c78784040000f55dfeff49c7879004000000000000e877b698fe0f1f84000000000041c78784040000f544feff49c7879004000000000000e854b698fe0f1f84000000000041c78784040000f538feff49c7879004000000000000e831b698fe0f1f84000000000041c78784040000f58cfeff49c7879004000000000000e80eb698fe0f1f84000000000041c78784040000f57bfeff49c7879004000000000000e8ebb598fe0f1f84000000000041c78784040000f575feff49c7879004000000000000e8c8b598fe0f1f84000000000041c78784040000f528feff49c7879004000000000000e8a5b598fe0f1f84000000000041c78784040000f50ffeff49c7879004000000000000e882b598fe0f1f84000000000041c78784040000f503feff49c7879004000000000000e85fb598fe0f1f840000000000e8d856acfef4e8f2b298fef4f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 NOP  <||@
  Comment 71 28 NOP  <||@
  Comment 72 30 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 77 32 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@1a6a312 slotKind: QWORD  <||@
  Comment 77 34 stack:56|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 82 36 stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 86 38 stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 91 40 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0]  <||@
  Comment 91 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 91 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 94 42 r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 56] size: DWORD  <||@
  Comment 98 44 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 98 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 98 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 105 46 r11|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 109 48 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B65 size: DWORD  <||@
  Comment 118 block B1 null  <||@
  Comment 118 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 118 52 NOP  <||@
  Comment 119 54 NOP  <||@
  Comment 120 56 NOP  <||@
  Comment 121 58 NOP  <||@
  Comment 122 60 NOP  <||@
  Comment 123 62 NOP  <||@
  Comment 124 64 rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 124 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 124 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 132 66 r9|DWORD = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 136 68 CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B64 size: DWORD  <||@
  Comment 145 block B2 null  <||@
  Comment 145 70 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 145 72 NOP  <||@
  Comment 146 74 NOP  <||@
  Comment 147 76 NOP  <||@
  Comment 148 78 NOP  <||@
  Comment 149 80 NOP  <||@
  Comment 150 82 rdi|DWORD = INC value: r9|DWORD size: DWORD  <||@
  Comment 155 84 CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B63 size: DWORD  <||@
  Comment 163 block B3 null  <||@
  Comment 163 86 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 163 88 NOP  <||@
  Comment 164 90 NOP  <||@
  Comment 165 92 NOP  <||@
  Comment 166 94 NOP  <||@
  Comment 167 96 NOP  <||@
  Comment 168 98 NOP  <||@
  Comment 169 100 NOP  <||@
  Comment 170 102 NOP  <||@
  Comment 171 104 NOP  <||@
  Comment 172 106 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 175 108 rbp|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 175 [rax:0, rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 175 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 182 110 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 186 112 r11|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 191 114 TESTBRANCH (x: r11|DWORD, y: r11|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 200 block B5 null  <||@
  Comment 200 134 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 200 136 NOP  <||@
  Comment 201 138 NOP  <||@
  Comment 202 140 NOP  <||@
  Comment 203 142 NOP  <||@
  Comment 204 144 NOP  <||@
  Comment 205 146 NOP  <||@
  Comment 206 148 NOP  <||@
  Comment 207 150 NOP  <||@
  Comment 208 152 NOP  <||@
  Comment 209 154 NOP  <||@
  Comment 210 156 NOP  <||@
  Comment 211 158 NOP  <||@
  Comment 212 160 NOP  <||@
  Comment 213 162 NOP  <||@
  Comment 214 164 NOP  <||@
  Comment 215 166 NOP  <||@
  Comment 216 168 NOP  <||@
  Comment 217 170 NOP  <||@
  Comment 218 172 NOP  <||@
  Comment 219 174 r13|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 226 176 r14|DWORD = MOV input: [r13|QWORD[.] + rdi|DWORD * 4 + 16] size: DWORD  <||@
  Comment 231 178 stack:32|DWORD = MOVE input: r14|DWORD moveKind: DWORD  <||@
  Comment 236 180 stack:68|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 241 182 r10|DWORD = MOV input: [r13|QWORD[.] + r9|DWORD * 4 + 16] size: DWORD  <||@
  Comment 246 184 stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 251 186 MOV (x: [r13|QWORD[.] + r9|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 256 188 MOV (x: [r13|QWORD[.] + rdi|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 261 190 r9|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 271 192 rbp|QWORD = UNCOMPRESSPOINTER (input: rbp|DWORD, ~baseRegister: r9|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 275 194 AMD64HOTSPOTSTRATEGYSWITCH ~key: rbp|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$BranchConn;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$LastNode;, resolved>}] keyTargets: [B5 -> B6, B5 -> B54] defaultTarget: B5 -> B61 strategy: SequentialStrategy[avgEffort=-1.0]  <||@
  Comment 275 {DataSection[0x0]}  <||@
  Comment 288 {DataSection[0x8]}  <||@
  Comment 306 block B6 null  <||@
  Comment 306 196 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 306 198 NOP  <||@
  Comment 307 200 NOP  <||@
  Comment 308 202 NOP  <||@
  Comment 309 204 NOP  <||@
  Comment 310 206 NOP  <||@
  Comment 311 208 r9|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 319 210 stack:72|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 324 212 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B6 -> B7 falseDestination: B6 -> B53 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed} state [bci:63]  <||@
  Comment 324 [rdx:0, rbx:0, rsi:0, r8:0, r9:0, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4          |5          |6         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD  |r10|DWORD  |r14|DWORD   <||@
  Comment 324 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 324 {meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>;compressed}}  <||@
  Comment 342 block B7 null  <||@
  Comment 342 214 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 342 216 stack:80|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 347 218 NOP  <||@
  Comment 348 220 NOP  <||@
  Comment 349 222 NOP  <||@
  Comment 350 224 NOP  <||@
  Comment 351 226 NOP  <||@
  Comment 352 228 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 359 230 stack:88|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 364 232 r10|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 370 234 JUMP ~outgoingValues: [] destination: B7 -> B8  <||@
  Comment 375 block B9 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 375 254 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 384 256 NOP  <||@
  Comment 385 258 NOP  <||@
  Comment 386 260 NOP  <||@
  Comment 387 262 NOP  <||@
  Comment 388 264 CMPBRANCH (x: r10|DWORD, y: [r9|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B9 -> B10 falseDestination: B9 -> B50 size: DWORD  <||@
  Comment 402 block B10 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 402 266 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 402 268 NOP  <||@
  Comment 403 270 NOP  <||@
  Comment 404 272 NOP  <||@
  Comment 405 274 NOP  <||@
  Comment 406 276 NOP  <||@
  Comment 407 278 NOP  <||@
  Comment 408 280 NOP  <||@
  Comment 409 282 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 413 284 rbp|DWORD[_] = MOV input: [rax|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD  <||@
  Comment 418 286 TESTBRANCH (x: rbp|DWORD[_], y: rbp|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B10 -> B11 falseDestination: B10 -> B40 size: DWORD  <||@
  Comment 426 block B40 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 426 1112 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 426 1114 NOP  <||@
  Comment 427 1116 NOP  <||@
  Comment 428 1118 NOP  <||@
  Comment 429 1120 NOP  <||@
  Comment 430 1122 CMPCONSTBRANCH x: [rbp|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B40 -> B41 falseDestination: B40 -> B49 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 430 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 447 block B41 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 447 1124 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 447 1126 NOP  <||@
  Comment 448 1128 NOP  <||@
  Comment 449 1130 NOP  <||@
  Comment 450 1132 NOP  <||@
  Comment 451 1134 NOP  <||@
  Comment 452 1136 NOP  <||@
  Comment 453 1138 rax|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 453 [rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 453 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 456 1140 r13|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 464 1142 CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B41 -> B42 falseDestination: B41 -> B48 size: DWORD  <||@
  Comment 473 block B42 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 473 1144 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 473 1146 NOP  <||@
  Comment 474 1148 NOP  <||@
  Comment 475 1150 NOP  <||@
  Comment 476 1152 NOP  <||@
  Comment 477 1154 NOP  <||@
  Comment 478 1156 NOP  <||@
  Comment 479 1158 NOP  <||@
  Comment 480 1160 NOP  <||@
  Comment 481 1162 NOP  <||@
  Comment 482 1164 NOP  <||@
  Comment 483 1166 NOP  <||@
  Comment 484 1168 NOP  <||@
  Comment 485 1170 NOP  <||@
  Comment 486 1172 NOP  <||@
  Comment 487 1174 NOP  <||@
  Comment 488 1176 NOP  <||@
  Comment 489 1178 NOP  <||@
  Comment 490 1180 NOP  <||@
  Comment 491 1182 NOP  <||@
  Comment 492 1184 NOP  <||@
  Comment 493 1186 NOP  <||@
  Comment 494 1188 NOP  <||@
  Comment 495 1190 NOP  <||@
  Comment 496 1192 NOP  <||@
  Comment 497 1194 NOP  <||@
  Comment 498 1196 NOP  <||@
  Comment 499 1198 NOP  <||@
  Comment 500 1200 NOP  <||@
  Comment 501 1202 NOP  <||@
  Comment 502 1204 NOP  <||@
  Comment 503 1206 rax|DWORD[_] = MOV input: [rbp|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 510 1208 r10|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 510 [rax:0, rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 510 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 518 1210 r11|DWORD = MOV input: [rbx|QWORD[.] + r13|DWORD * 4 + 16] size: DWORD  <||@
  Comment 523 1212 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 528 1214 MOV (x: [rbx|QWORD[.] + r13|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 533 1216 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 543 1218 r10|QWORD = UNCOMPRESSPOINTER (input: r10|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 547 1220 rbx|QWORD = MOV input: [r10|QWORD + 496] size: QWORD  <||@
  Comment 554 1222 r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 558 1224 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 562 1226 r13|QWORD[.] = UNCOMPRESSPOINTER (input: rbp|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 569 1228 rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD  <||@
  Comment 572 1230 rax|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 575 1234 r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 578 1238 r11|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 581 1242 rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD  <||@
  Comment 584 1244 stack:104|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 589 1246 stack:92|DWORD[_] = MOVE input: rbp|DWORD[_] moveKind: DWORD  <||@
  Comment 593 1248 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 7, 70]  <||@
  Comment 593 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 593 INLINE_INVOKE  <||@
  Comment 595 [stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 603 1250 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 608 1252 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 611 1254 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 7, 70]  <||@
  Comment 611 [rdx:0, rsi:0, stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 611 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 618 1256 rbp|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD  <||@
  Comment 622 1258 r8|DWORD = MOV input: [rbp|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 630 1260 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B42 -> B43 falseDestination: B42 -> B47 size: DWORD  <||@
  Comment 639 block B43 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 639 1262 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 639 1264 r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 644 1266 NOP  <||@
  Comment 645 1268 NOP  <||@
  Comment 646 1270 NOP  <||@
  Comment 647 1272 NOP  <||@
  Comment 648 1274 NOP  <||@
  Comment 649 1276 NOP  <||@
  Comment 650 1278 NOP  <||@
  Comment 651 1280 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 655 1282 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 660 1284 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B43 -> B44 falseDestination: B43 -> B45 size: DWORD  <||@
  Comment 668 block B44 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 668 1286 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 668 1288 NOP  <||@
  Comment 669 1290 NOP  <||@
  Comment 670 1292 NOP  <||@
  Comment 671 1294 NOP  <||@
  Comment 672 1296 r10|DWORD = INC value: stack:40|DWORD size: DWORD  <||@
  Comment 680 1298 rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 683 1300 r9|DWORD[_] = MOVE input: stack:72|DWORD[_] moveKind: DWORD  <||@
  Comment 688 1302 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 693 1304 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 697 1306 JUMP ~outgoingValues: [] destination: B44 -> B8  <||@
  Comment 697 block B8 loop 0 depth 1 header:69|LoopBegin  <||@
  Comment 697 236 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 697 238 stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 702 240 NOP  <||@
  Comment 703 242 NOP  <||@
  Comment 704 244 NOP  <||@
  Comment 705 246 NOP  <||@
  Comment 706 248 NOP  <||@
  Comment 707 250 rax|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 715 252 CMPBRANCH (x: r10|DWORD, y: [rax|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B8 -> B9 falseDestination: B8 -> B51 size: DWORD state [bci:3, 7, 70]  <||@
  Comment 715 [rax:0, rdx:0, rbx:0, r8:0, r9:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 715 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 734 block B11 null  <||@
  Comment 734 288 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 734 290 NOP  <||@
  Comment 735 292 NOP  <||@
  Comment 736 294 NOP  <||@
  Comment 737 296 NOP  <||@
  Comment 738 298 NOP  <||@
  Comment 739 300 NOP  <||@
  Comment 740 302 NOP  <||@
  Comment 741 304 NOP  <||@
  Comment 742 306 NOP  <||@
  Comment 743 308 NOP  <||@
  Comment 744 310 NOP  <||@
  Comment 745 312 NOP  <||@
  Comment 746 314 NOP  <||@
  Comment 747 316 NOP  <||@
  Comment 748 318 NOP  <||@
  Comment 749 320 NOP  <||@
  Comment 750 322 NOP  <||@
  Comment 751 324 NOP  <||@
  Comment 752 326 rsi|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 760 328 r10|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 760 [rdx:0, rbx:0, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 760 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 768 330 stack:92|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 773 332 rsi|DWORD = MOV input: [r10|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 773 [rdx:0, rbx:0, r10:0, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 773 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 781 334 rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 791 336 rsi|QWORD = UNCOMPRESSPOINTER (input: rsi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 795 338 r11|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 802 340 stack:104|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 807 342 AMD64HOTSPOTSTRATEGYSWITCH ~key: rsi|QWORD scratch: - keyConstants: [meta{HotSpotType<Ljava/util/regex/Pattern$Branch;, resolved>}, meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>}] keyTargets: [B11 -> B12, B11 -> B31] defaultTarget: B11 -> B39 strategy: SequentialStrategy[avgEffort=-1.0]  <||@
  Comment 807 {DataSection[0x10]}  <||@
  Comment 820 {DataSection[0x18]}  <||@
  Comment 838 block B12 null  <||@
  Comment 838 344 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 838 346 NOP  <||@
  Comment 839 348 NOP  <||@
  Comment 840 350 NOP  <||@
  Comment 841 352 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 845 354 r11|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 851 356 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 856 block B14 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 856 374 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 864 376 NOP  <||@
  Comment 865 378 NOP  <||@
  Comment 866 380 NOP  <||@
  Comment 867 382 NOP  <||@
  Comment 868 384 CMPBRANCH (x: r11|DWORD, y: [r10|DWORD[_] * 8 + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B28 size: DWORD  <||@
  Comment 882 block B15 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 882 386 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 882 388 NOP  <||@
  Comment 883 390 NOP  <||@
  Comment 884 392 NOP  <||@
  Comment 885 394 NOP  <||@
  Comment 886 396 NOP  <||@
  Comment 887 398 NOP  <||@
  Comment 888 400 NOP  <||@
  Comment 889 402 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 893 404 rdi|DWORD[_] = MOV input: [rsi|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 898 406 TESTBRANCH (x: rdi|DWORD[_], y: rdi|DWORD[_]) trueDestinationProbability: 0.37500622448719334 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD  <||@
  Comment 906 block B18 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 906 520 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 906 522 NOP  <||@
  Comment 907 524 NOP  <||@
  Comment 908 526 NOP  <||@
  Comment 909 528 NOP  <||@
  Comment 910 530 CMPCONSTBRANCH x: [rdi|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B27 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 910 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 927 block B19 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 927 532 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 927 534 NOP  <||@
  Comment 928 536 NOP  <||@
  Comment 929 538 NOP  <||@
  Comment 930 540 NOP  <||@
  Comment 931 542 NOP  <||@
  Comment 932 544 NOP  <||@
  Comment 933 546 rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 933 [rdx:0, rbx:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 933 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 936 548 r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 944 550 CMPBRANCH (x: rsi|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B26 size: DWORD  <||@
  Comment 953 block B20 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 953 552 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 953 554 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 958 556 NOP  <||@
  Comment 959 558 NOP  <||@
  Comment 960 560 NOP  <||@
  Comment 961 562 NOP  <||@
  Comment 962 564 NOP  <||@
  Comment 963 566 NOP  <||@
  Comment 964 568 NOP  <||@
  Comment 965 570 NOP  <||@
  Comment 966 572 NOP  <||@
  Comment 967 574 NOP  <||@
  Comment 968 576 NOP  <||@
  Comment 969 578 NOP  <||@
  Comment 970 580 NOP  <||@
  Comment 971 582 NOP  <||@
  Comment 972 584 NOP  <||@
  Comment 973 586 NOP  <||@
  Comment 974 588 NOP  <||@
  Comment 975 590 NOP  <||@
  Comment 976 592 NOP  <||@
  Comment 977 594 NOP  <||@
  Comment 978 596 NOP  <||@
  Comment 979 598 NOP  <||@
  Comment 980 600 NOP  <||@
  Comment 981 602 NOP  <||@
  Comment 982 604 NOP  <||@
  Comment 983 606 NOP  <||@
  Comment 984 608 NOP  <||@
  Comment 985 610 NOP  <||@
  Comment 986 612 NOP  <||@
  Comment 987 614 NOP  <||@
  Comment 988 616 rsi|DWORD[_] = MOV input: [rdi|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 995 618 rax|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 995 [rdx:0, rbx:0, rsi:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 995 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1002 620 rbp|DWORD = MOV input: [rbx|QWORD[.] + r8|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1007 622 MOV (x: [rbx|QWORD[.] + r8|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1012 624 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1022 626 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1026 628 rbx|QWORD = MOV input: [rax|QWORD + 496] size: QWORD  <||@
  Comment 1033 630 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1037 632 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1041 634 r13|QWORD[.] = UNCOMPRESSPOINTER (input: rdi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1048 636 r14|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1051 640 r10|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1054 644 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1059 646 stack:112|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 1064 648 stack:48|DWORD = MOVE input: rbp|DWORD moveKind: DWORD  <||@
  Comment 1068 650 stack:116|DWORD[_] = MOVE input: rdi|DWORD[_] moveKind: DWORD  <||@
  Comment 1072 652 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50, 32, 7, 70]  <||@
  Comment 1072 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1072 INLINE_INVOKE  <||@
  Comment 1074 [stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:112|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |stack:48|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1                  |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1082 654 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1087 656 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1090 658 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50, 32, 7, 70]  <||@
  Comment 1090 [rdx:0, rsi:0, stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:112|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:48|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1             |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1090 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1097 660 rdi|DWORD[_] = MOVE input: stack:116|DWORD[_] moveKind: DWORD  <||@
  Comment 1101 662 r8|DWORD = MOV input: [rdi|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1109 664 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B25 size: DWORD  <||@
  Comment 1118 block B21 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 1118 666 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1118 668 rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD  <||@
  Comment 1122 670 NOP  <||@
  Comment 1123 672 NOP  <||@
  Comment 1124 674 NOP  <||@
  Comment 1125 676 NOP  <||@
  Comment 1126 678 NOP  <||@
  Comment 1127 680 NOP  <||@
  Comment 1128 682 NOP  <||@
  Comment 1129 684 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1133 686 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD  <||@
  Comment 1138 688 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999901871342643 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD  <||@
  Comment 1146 block B22 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 1146 690 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1146 692 NOP  <||@
  Comment 1147 694 NOP  <||@
  Comment 1148 696 NOP  <||@
  Comment 1149 698 NOP  <||@
  Comment 1150 700 r11|DWORD = INC value: stack:44|DWORD size: DWORD  <||@
  Comment 1158 702 rbx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 1161 704 r10|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD  <||@
  Comment 1166 706 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1170 708 JUMP ~outgoingValues: [] destination: B22 -> B13  <||@
  Comment 1170 block B13 loop 1 depth 1 header:138|LoopBegin  <||@
  Comment 1170 358 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1170 360 NOP  <||@
  Comment 1171 362 NOP  <||@
  Comment 1172 364 NOP  <||@
  Comment 1173 366 NOP  <||@
  Comment 1174 368 NOP  <||@
  Comment 1175 370 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 20] size: DWORD  <||@
  Comment 1183 372 CMPBRANCH (x: r11|DWORD, y: [rsi|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B29 size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 1183 [rdx:0, rbx:0, rsi:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1183 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1202 block B54 null  <||@
  Comment 1202 1480 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1202 1482 NOP  <||@
  Comment 1203 1484 NOP  <||@
  Comment 1204 1486 NOP  <||@
  Comment 1205 1488 NOP  <||@
  Comment 1206 1490 CMPCONSTBRANCH x: [rdx|QWORD[.] + 24] trueDestinationProbability: 1.7961272660182992E-5 condition: = trueDestination: B54 -> B55 falseDestination: B54 -> B58 y: 1 size: DWORD inlinedY: null  <||@
  Comment 1216 block B58 null  <||@
  Comment 1216 1532 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1216 1534 NOP  <||@
  Comment 1217 1536 NOP  <||@
  Comment 1218 1538 NOP  <||@
  Comment 1219 1540 r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD  <||@
  Comment 1224 1544 JUMP ~outgoingValues: [] destination: B58 -> B59  <||@
  Comment 1224 block B59 null  <||@
  Comment 1224 1546 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1224 1548 NOP  <||@
  Comment 1225 1550 NOP  <||@
  Comment 1226 1552 NOP  <||@
  Comment 1227 1554 NOP  <||@
  Comment 1228 1556 NOP  <||@
  Comment 1229 1558 NOP  <||@
  Comment 1230 1560 NOP  <||@
  Comment 1231 1562 MOV (x: [rdx|QWORD[.] + 32], y: rcx|DWORD) size: DWORD  <||@
  Comment 1234 1564 rsi|DWORD = MOV input: [rdx|QWORD[.] + 28] size: DWORD  <||@
  Comment 1237 1566 MOV (x: [r10|DWORD[_] * 8 + 16], y: rsi|DWORD) size: DWORD  <||@
  Comment 1245 1568 MOV (x: [r10|DWORD[_] * 8 + 20], y: rcx|DWORD) size: DWORD  <||@
  Comment 1253 1570 JUMP ~outgoingValues: [] destination: B59 -> B60  <||@
  Comment 1253 block B60 null  <||@
  Comment 1253 1572 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1253 1574 NOP  <||@
  Comment 1254 1576 NOP  <||@
  Comment 1255 1578 NOP  <||@
  Comment 1256 1580 NOP  <||@
  Comment 1257 1582 NOP  <||@
  Comment 1258 1584 NOP  <||@
  Comment 1259 1586 NOP  <||@
  Comment 1260 1588 NOP  <||@
  Comment 1261 1590 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 1266 1592 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 1275 POLL_RETURN_FAR  <||@
  Comment 1289 block B45 null  <||@
  Comment 1289 1308 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1289 1310 NOP  <||@
  Comment 1290 1312 NOP  <||@
  Comment 1291 1314 NOP  <||@
  Comment 1292 1316 JUMP ~outgoingValues: [] destination: B45 -> B60  <||@
  Comment 1294 block B16 null  <||@
  Comment 1294 408 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1294 410 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1299 412 NOP  <||@
  Comment 1300 414 NOP  <||@
  Comment 1301 416 NOP  <||@
  Comment 1302 418 NOP  <||@
  Comment 1303 420 NOP  <||@
  Comment 1304 422 NOP  <||@
  Comment 1305 424 NOP  <||@
  Comment 1306 426 NOP  <||@
  Comment 1307 428 NOP  <||@
  Comment 1308 430 NOP  <||@
  Comment 1309 432 NOP  <||@
  Comment 1310 434 NOP  <||@
  Comment 1311 436 NOP  <||@
  Comment 1312 438 NOP  <||@
  Comment 1313 440 NOP  <||@
  Comment 1314 442 NOP  <||@
  Comment 1315 444 NOP  <||@
  Comment 1316 446 NOP  <||@
  Comment 1317 448 NOP  <||@
  Comment 1318 450 NOP  <||@
  Comment 1319 452 NOP  <||@
  Comment 1320 454 NOP  <||@
  Comment 1321 456 NOP  <||@
  Comment 1322 458 NOP  <||@
  Comment 1323 460 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 24] size: DWORD  <||@
  Comment 1331 462 rsi|DWORD[_] = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 1331 [rdx:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1331 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1338 464 r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 32, 7, 70]  <||@
  Comment 1338 [rdx:0, rsi:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1338 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1346 466 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1356 468 r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1360 470 rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD  <||@
  Comment 1367 472 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1371 474 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1375 476 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1378 480 r11|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1381 484 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1386 486 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32, 32, 7, 70]  <||@
  Comment 1386 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1386 INLINE_INVOKE  <||@
  Comment 1388 [stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                   |1                  |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1396 488 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD  <||@
  Comment 1404 block B24 null  <||@
  Comment 1404 720 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1404 722 NOP  <||@
  Comment 1405 724 NOP  <||@
  Comment 1406 726 NOP  <||@
  Comment 1407 728 JUMP ~outgoingValues: [] destination: B24 -> B36  <||@
  Comment 1407 block B36 null  <||@
  Comment 1407 1026 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1407 1028 NOP  <||@
  Comment 1408 1030 NOP  <||@
  Comment 1409 1032 NOP  <||@
  Comment 1410 1034 JUMP ~outgoingValues: [] destination: B36 -> B46  <||@
  Comment 1410 block B46 null  <||@
  Comment 1410 1318 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1410 1320 NOP  <||@
  Comment 1411 1322 NOP  <||@
  Comment 1412 1324 NOP  <||@
  Comment 1413 1326 JUMP ~outgoingValues: [] destination: B46 -> B60  <||@
  Comment 1418 block B31 null  <||@
  Comment 1418 844 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1418 846 NOP  <||@
  Comment 1419 848 NOP  <||@
  Comment 1420 850 NOP  <||@
  Comment 1421 852 NOP  <||@
  Comment 1422 854 NOP  <||@
  Comment 1423 856 NOP  <||@
  Comment 1424 858 rsi|DWORD = MOV input: [rbx|QWORD[.] + 12] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 1424 [rbx:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1424 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1427 860 rdx|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1435 862 CMPBRANCH (x: rsi|DWORD, y: rdx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B31 -> B32 falseDestination: B31 -> B38 size: DWORD  <||@
  Comment 1443 block B32 null  <||@
  Comment 1443 864 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1443 866 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1447 868 r11|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1452 870 NOP  <||@
  Comment 1453 872 NOP  <||@
  Comment 1454 874 NOP  <||@
  Comment 1455 876 NOP  <||@
  Comment 1456 878 NOP  <||@
  Comment 1457 880 NOP  <||@
  Comment 1458 882 NOP  <||@
  Comment 1459 884 NOP  <||@
  Comment 1460 886 NOP  <||@
  Comment 1461 888 NOP  <||@
  Comment 1462 890 NOP  <||@
  Comment 1463 892 NOP  <||@
  Comment 1464 894 NOP  <||@
  Comment 1465 896 NOP  <||@
  Comment 1466 898 NOP  <||@
  Comment 1467 900 NOP  <||@
  Comment 1468 902 NOP  <||@
  Comment 1469 904 NOP  <||@
  Comment 1470 906 NOP  <||@
  Comment 1471 908 NOP  <||@
  Comment 1472 910 NOP  <||@
  Comment 1473 912 NOP  <||@
  Comment 1474 914 NOP  <||@
  Comment 1475 916 NOP  <||@
  Comment 1476 918 NOP  <||@
  Comment 1477 920 NOP  <||@
  Comment 1478 922 NOP  <||@
  Comment 1479 924 NOP  <||@
  Comment 1480 926 rsi|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 1488 928 r8|DWORD = MOV input: [rsi|DWORD[_] * 8 + 8] size: DWORD state [bci:3, 7, 70]  <||@
  Comment 1488 [rbx:0, rsi:0, r11:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |r11|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |r11|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1488 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1496 930 r9|DWORD = MOV input: [rbx|QWORD[.] + rdx|DWORD * 4 + 16] size: DWORD  <||@
  Comment 1501 932 MOV (x: [rbx|QWORD[.] + rdx|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 1505 934 rdx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1515 936 r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rdx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1519 938 rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD  <||@
  Comment 1526 940 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1530 942 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1534 944 rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 1537 946 rdi|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 1539 950 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1544 952 stack:44|DWORD = MOVE input: r9|DWORD moveKind: DWORD  <||@
  Comment 1549 954 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 32, 7, 70]  <||@
  Comment 1549 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1549 INLINE_INVOKE  <||@
  Comment 1551 [stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                   |1                  |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1559 956 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1564 958 r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 1568 960 r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 32, 7, 70]  <||@
  Comment 1568 [rdx:0, r10:0, stack:24, stack:36, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1568 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1576 962 r8|DWORD[_] = MOVE input: stack:92|DWORD[_] moveKind: DWORD  <||@
  Comment 1581 964 r8|DWORD = MOV input: [r8|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 1589 966 CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B32 -> B33 falseDestination: B32 -> B37 size: DWORD  <||@
  Comment 1598 block B33 null  <||@
  Comment 1598 968 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1598 970 r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 1603 972 NOP  <||@
  Comment 1604 974 NOP  <||@
  Comment 1605 976 NOP  <||@
  Comment 1606 978 NOP  <||@
  Comment 1607 980 NOP  <||@
  Comment 1608 982 NOP  <||@
  Comment 1609 984 NOP  <||@
  Comment 1610 986 r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2996f4c4 encoding: base: 0 shift: 3  <||@
  Comment 1614 988 MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD  <||@
  Comment 1619 990 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B33 -> B34 falseDestination: B33 -> B35 size: DWORD  <||@
  Comment 1627 block B35 null  <||@
  Comment 1627 1016 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1627 1018 NOP  <||@
  Comment 1628 1020 NOP  <||@
  Comment 1629 1022 NOP  <||@
  Comment 1630 1024 JUMP ~outgoingValues: [] destination: B35 -> B36  <||@
  Comment 1635 block B23 null  <||@
  Comment 1635 710 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1635 712 NOP  <||@
  Comment 1636 714 NOP  <||@
  Comment 1637 716 NOP  <||@
  Comment 1638 718 JUMP ~outgoingValues: [] destination: B23 -> B36  <||@
  Comment 1643 block B55 null  <||@
  Comment 1643 1492 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1643 1494 r10|DWORD[_] = MOVE input: stack:68|DWORD[_] moveKind: DWORD  <||@
  Comment 1648 1498 NOP  <||@
  Comment 1649 1500 NOP  <||@
  Comment 1650 1502 NOP  <||@
  Comment 1651 1504 NOP  <||@
  Comment 1652 1506 CMPBRANCH (x: rcx|DWORD, y: [rdx|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: = trueDestination: B55 -> B56 falseDestination: B55 -> B57 size: DWORD  <||@
  Comment 1661 block B56 null  <||@
  Comment 1661 1508 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1661 1510 NOP  <||@
  Comment 1662 1512 NOP  <||@
  Comment 1663 1514 NOP  <||@
  Comment 1664 1516 JUMP ~outgoingValues: [] destination: B56 -> B59  <||@
  Comment 1669 block B39 null  <||@
  Comment 1669 1088 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1669 1090 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1673 1092 NOP  <||@
  Comment 1674 1094 NOP  <||@
  Comment 1675 1096 NOP  <||@
  Comment 1676 1098 r11|QWORD = MOVE input: long[7060|0x1b94]  <||@
  Comment 1683 1100 r10|DWORD = MOVE input: int[-32819|0xffffffffffff7fcd]  <||@
  Comment 1689 1110 JUMP ~outgoingValues: [] destination: B39 -> B52  <||@
  Comment 1689 block B52 null  <||@
  Comment 1689 1444 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1689 1434 rbx|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 1693 1436 r9|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD  <||@
  Comment 1698 1438 r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1703 1440 r14|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 1708 1446 NOP  <||@
  Comment 1709 1448 NOP  <||@
  Comment 1710 1450 NOP  <||@
  Comment 1711 1452 NOP  <||@
  Comment 1712 1454 NOP  <||@
  Comment 1713 1456 NOP  <||@
  Comment 1714 1458 NOP  <||@
  Comment 1715 1460 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1722 1462 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1729 1464 DEOPT info [bci:3, 7, 70]  <||@
  Comment 1729 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1734 [rdx:0, r9:0, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0            |1             |2          |3                  |4         
     locals:  |r9|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |rbx|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5         |6         
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |r8|DWORD  |r14|DWORD   <||@
  Comment 1742 block B53 null  <||@
  Comment 1742 1466 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1742 1468 NOP  <||@
  Comment 1743 1470 NOP  <||@
  Comment 1744 1472 NOP  <||@
  Comment 1745 1474 r8|QWORD = MOVE input: long[2580|0xa14]  <||@
  Comment 1752 1476 r10|DWORD = MOVE input: int[-85555|0xfffffffffffeb1cd]  <||@
  Comment 1758 1478 JUMP ~outgoingValues: [] destination: B53 -> B62  <||@
  Comment 1758 block B62 null  <||@
  Comment 1758 1608 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1758 1610 NOP  <||@
  Comment 1759 1612 NOP  <||@
  Comment 1760 1614 NOP  <||@
  Comment 1761 1616 NOP  <||@
  Comment 1762 1618 NOP  <||@
  Comment 1763 1620 NOP  <||@
  Comment 1764 1622 NOP  <||@
  Comment 1765 1624 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1772 1626 MOV (x: [r15|QWORD + 1168], y: r8|QWORD) size: QWORD  <||@
  Comment 1779 1628 DEOPT info [bci:63]  <||@
  Comment 1779 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1784 [rdx:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4          |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1792 block B25 null  <||@
  Comment 1792 730 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1792 732 r13|QWORD[.] = MOVE input: stack:112|QWORD[.] moveKind: QWORD  <||@
  Comment 1797 734 rbp|DWORD = MOVE input: stack:48|DWORD moveKind: DWORD  <||@
  Comment 1801 736 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1805 738 NOP  <||@
  Comment 1806 740 NOP  <||@
  Comment 1807 742 NOP  <||@
  Comment 1808 744 NOP  <||@
  Comment 1809 746 NOP  <||@
  Comment 1810 748 NOP  <||@
  Comment 1811 750 NOP  <||@
  Comment 1812 752 MOV x: [r15|QWORD + 1156] y: -117787 size: DWORD  <||@
  Comment 1823 754 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1834 756 DEOPT info [bci:31, 50, 32, 7, 70]  <||@
  Comment 1834 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1839 [rdx:0, r13:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1             |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |rdx|QWORD[.]  |-  |-  |rbp|DWORD  |- 
     stack:   |rax|DWORD     |              |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1847 block B34 null  <||@
  Comment 1847 992 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1847 994 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1851 996 NOP  <||@
  Comment 1852 998 NOP  <||@
  Comment 1853 1000 NOP  <||@
  Comment 1854 1002 NOP  <||@
  Comment 1855 1004 NOP  <||@
  Comment 1856 1006 NOP  <||@
  Comment 1857 1008 NOP  <||@
  Comment 1858 1010 MOV x: [r15|QWORD + 1156] y: -221715 size: DWORD  <||@
  Comment 1869 1012 MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD  <||@
  Comment 1880 1014 DEOPT info [bci:44, 32, 7, 70]  <||@
  Comment 1880 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1885 [rdx:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 44, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4         |5          
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r9|DWORD  |int[0|0x0] 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1893 block B57 null  <||@
  Comment 1893 1518 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1893 1520 NOP  <||@
  Comment 1894 1522 NOP  <||@
  Comment 1895 1524 NOP  <||@
  Comment 1896 1526 r8|QWORD = MOVE input: long[1940|0x794]  <||@
  Comment 1903 1528 r10|DWORD = MOVE input: int[-222739|0xfffffffffffc99ed]  <||@
  Comment 1909 1530 JUMP ~outgoingValues: [] destination: B57 -> B62  <||@
  Comment 1914 block B38 null  <||@
  Comment 1914 1062 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1914 1064 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1918 1066 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 1923 1068 NOP  <||@
  Comment 1924 1070 NOP  <||@
  Comment 1925 1072 NOP  <||@
  Comment 1926 1074 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1933 1076 r10|DWORD = MOVE input: int[-124187|0xfffffffffffe1ae5]  <||@
  Comment 1939 1086 JUMP ~outgoingValues: [] destination: B38 -> B52  <||@
  Comment 1944 block B26 null  <||@
  Comment 1944 758 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1944 760 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 1949 762 NOP  <||@
  Comment 1950 764 NOP  <||@
  Comment 1951 766 NOP  <||@
  Comment 1952 768 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1959 770 r10|DWORD = MOVE input: int[-110619|0xfffffffffffe4fe5]  <||@
  Comment 1965 772 JUMP ~outgoingValues: [] destination: B26 -> B30  <||@
  Comment 1965 block B30 null  <||@
  Comment 1965 822 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1965 824 NOP  <||@
  Comment 1966 826 NOP  <||@
  Comment 1967 828 NOP  <||@
  Comment 1968 830 NOP  <||@
  Comment 1969 832 NOP  <||@
  Comment 1970 834 NOP  <||@
  Comment 1971 836 NOP  <||@
  Comment 1972 838 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1979 840 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1986 842 DEOPT info [bci:3, 32, 7, 70]  <||@
  Comment 1986 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1991 [rdx:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 1999 block B27 null  <||@
  Comment 1999 774 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1999 776 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2004 778 NOP  <||@
  Comment 2005 780 NOP  <||@
  Comment 2006 782 NOP  <||@
  Comment 2007 784 r11|QWORD = MOVE input: long[4500|0x1194]  <||@
  Comment 2014 786 r10|DWORD = MOVE input: int[-106035|0xfffffffffffe61cd]  <||@
  Comment 2020 788 JUMP ~outgoingValues: [] destination: B27 -> B30  <||@
  Comment 2022 block B50 null  <||@
  Comment 2022 1400 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2022 1402 NOP  <||@
  Comment 2023 1404 NOP  <||@
  Comment 2024 1406 NOP  <||@
  Comment 2025 1408 r11|QWORD = MOVE input: long[3220|0xc94]  <||@
  Comment 2032 1410 r10|DWORD = MOVE input: int[-218131|0xfffffffffffcabed]  <||@
  Comment 2038 1420 JUMP ~outgoingValues: [] destination: B50 -> B52  <||@
  Comment 2043 block B28 null  <||@
  Comment 2043 790 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2043 792 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2048 794 NOP  <||@
  Comment 2049 796 NOP  <||@
  Comment 2050 798 NOP  <||@
  Comment 2051 800 r11|QWORD = MOVE input: long[3220|0xc94]  <||@
  Comment 2058 802 r10|DWORD = MOVE input: int[-219155|0xfffffffffffca7ed]  <||@
  Comment 2064 804 JUMP ~outgoingValues: [] destination: B28 -> B30  <||@
  Comment 2066 block B63 null  <||@
  Comment 2066 1630 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2066 1632 NOP  <||@
  Comment 2067 1634 NOP  <||@
  Comment 2068 1636 NOP  <||@
  Comment 2069 1638 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2076 1640 r10|DWORD = MOVE input: int[-81691|0xfffffffffffec0e5]  <||@
  Comment 2082 1646 JUMP ~outgoingValues: [] destination: B63 -> B66  <||@
  Comment 2082 block B66 null  <||@
  Comment 2082 1684 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 2082 1678 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 2087 1680 rsi|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 2092 1686 NOP  <||@
  Comment 2093 1688 NOP  <||@
  Comment 2094 1690 NOP  <||@
  Comment 2095 1692 NOP  <||@
  Comment 2096 1694 NOP  <||@
  Comment 2097 1696 NOP  <||@
  Comment 2098 1698 NOP  <||@
  Comment 2099 1700 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 2106 1702 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 2113 1704 DEOPT info [bci:0]  <||@
  Comment 2113 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2118 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2126 block B29 null  <||@
  Comment 2126 806 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2126 808 stack:44|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 2131 810 NOP  <||@
  Comment 2132 812 NOP  <||@
  Comment 2133 814 NOP  <||@
  Comment 2134 816 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2141 818 r10|DWORD = MOVE input: int[-96283|0xfffffffffffe87e5]  <||@
  Comment 2147 820 JUMP ~outgoingValues: [] destination: B29 -> B30  <||@
  Comment 2152 block B47 null  <||@
  Comment 2152 1328 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2152 1330 r13|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD  <||@
  Comment 2157 1332 r11|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 2162 1334 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2166 1336 NOP  <||@
  Comment 2167 1338 NOP  <||@
  Comment 2168 1340 NOP  <||@
  Comment 2169 1342 NOP  <||@
  Comment 2170 1344 NOP  <||@
  Comment 2171 1346 NOP  <||@
  Comment 2172 1348 NOP  <||@
  Comment 2173 1350 MOV x: [r15|QWORD + 1156] y: -147483 size: DWORD  <||@
  Comment 2184 1352 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2195 1354 DEOPT info [bci:31, 50, 7, 70]  <||@
  Comment 2195 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2200 [rdx:0, r13:0, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1             |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r11|DWORD  |- 
     stack:   |rax|DWORD     |              |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2208 block B48 null  <||@
  Comment 2208 1356 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2208 1358 NOP  <||@
  Comment 2209 1360 NOP  <||@
  Comment 2210 1362 NOP  <||@
  Comment 2211 1364 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2218 1366 r10|DWORD = MOVE input: int[-140315|0xfffffffffffddbe5]  <||@
  Comment 2224 1376 JUMP ~outgoingValues: [] destination: B48 -> B52  <||@
  Comment 2229 block B37 null  <||@
  Comment 2229 1036 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2229 1038 r9|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 2234 1040 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2238 1042 NOP  <||@
  Comment 2239 1044 NOP  <||@
  Comment 2240 1046 NOP  <||@
  Comment 2241 1048 NOP  <||@
  Comment 2242 1050 NOP  <||@
  Comment 2243 1052 NOP  <||@
  Comment 2244 1054 NOP  <||@
  Comment 2245 1056 MOV x: [r15|QWORD + 1156] y: -131355 size: DWORD  <||@
  Comment 2256 1058 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 2267 1060 DEOPT info [bci:31, 32, 7, 70]  <||@
  Comment 2267 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2272 [rdx:0, stack:24, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4         |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r9|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |          |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2280 block B64 null  <||@
  Comment 2280 1648 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2280 1650 NOP  <||@
  Comment 2281 1652 NOP  <||@
  Comment 2282 1654 NOP  <||@
  Comment 2283 1656 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2290 1658 r10|DWORD = MOVE input: int[-79387|0xfffffffffffec9e5]  <||@
  Comment 2296 1664 JUMP ~outgoingValues: [] destination: B64 -> B66  <||@
  Comment 2301 block B4 null  <||@
  Comment 2301 116 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2301 118 NOP  <||@
  Comment 2302 120 NOP  <||@
  Comment 2303 122 NOP  <||@
  Comment 2304 124 r11|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 2311 126 r10|DWORD = MOVE input: int[-217107|0xfffffffffffcafed]  <||@
  Comment 2317 132 JUMP ~outgoingValues: [] destination: B4 -> B66  <||@
  Comment 2322 block B61 null  <||@
  Comment 2322 1594 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2322 1596 NOP  <||@
  Comment 2323 1598 NOP  <||@
  Comment 2324 1600 NOP  <||@
  Comment 2325 1602 r8|QWORD = MOVE input: long[1300|0x514]  <||@
  Comment 2332 1604 r10|DWORD = MOVE input: int[-12339|0xffffffffffffcfcd]  <||@
  Comment 2338 1606 JUMP ~outgoingValues: [] destination: B61 -> B62  <||@
  Comment 2343 block B51 null  <||@
  Comment 2343 1422 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2343 1424 NOP  <||@
  Comment 2344 1426 NOP  <||@
  Comment 2345 1428 NOP  <||@
  Comment 2346 1430 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2353 1432 r10|DWORD = MOVE input: int[-88603|0xfffffffffffea5e5]  <||@
  Comment 2359 1442 JUMP ~outgoingValues: [] destination: B51 -> B52  <||@
  Comment 2364 block B17 null  <||@
  Comment 2364 490 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2364 492 r10|DWORD = MOVE input: stack:44|DWORD moveKind: DWORD  <||@
  Comment 2369 494 r11|QWORD[.] = MOVE input: stack:104|QWORD[.] moveKind: QWORD  <||@
  Comment 2374 496 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 2378 498 rdx|QWORD[.] = MOVE input: stack:80|QWORD[.] moveKind: QWORD  <||@
  Comment 2383 500 NOP  <||@
  Comment 2384 502 NOP  <||@
  Comment 2385 504 NOP  <||@
  Comment 2386 506 NOP  <||@
  Comment 2387 508 NOP  <||@
  Comment 2388 510 NOP  <||@
  Comment 2389 512 NOP  <||@
  Comment 2390 514 MOV x: [r15|QWORD + 1156] y: -220435 size: DWORD  <||@
  Comment 2401 516 MOV x: [r15|QWORD + 1168] y: 3860 size: QWORD  <||@
  Comment 2412 518 DEOPT info [bci:35, 32, 7, 70]  <||@
  Comment 2412 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2417 [rdx:0, r11:0, stack:40, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0             |1             |2          |3                  |4         
     locals:  |r11|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r10|DWORD 
     stack:   |int[0|0x0]    |              |           |                   |          
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2425 block B49 null  <||@
  Comment 2425 1378 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2425 1380 NOP  <||@
  Comment 2426 1382 NOP  <||@
  Comment 2427 1384 NOP  <||@
  Comment 2428 1386 r11|QWORD = MOVE input: long[4500|0x1194]  <||@
  Comment 2435 1388 r10|DWORD = MOVE input: int[-135987|0xfffffffffffdeccd]  <||@
  Comment 2441 1398 JUMP ~outgoingValues: [] destination: B49 -> B52  <||@
  Comment 2446 block B65 null  <||@
  Comment 2446 1666 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 2446 1668 NOP  <||@
  Comment 2447 1670 NOP  <||@
  Comment 2448 1672 NOP  <||@
  Comment 2449 1674 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 2456 1676 r10|DWORD = MOVE input: int[-69403|0xfffffffffffef0e5]  <||@
  Comment 2462 1682 JUMP ~outgoingValues: [] destination: B65 -> B66  <||@
  Comment 2472 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 2497 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 2525 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2530 [rdx:0, rsi:0, r8:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2560 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2565 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2595 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2600 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2630 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2635 [rax:0, rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:4991) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5  |6 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-  |-   <||@
  Comment 2665 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2670 [rdx:0, rbx:0, rsi:0, r8:0, r9:0, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 63, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4          |5          |6         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r11|DWORD  |r10|DWORD  |r14|DWORD   <||@
  Comment 2700 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2705 [rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2735 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2740 [rax:0, rdx:0, rbx:0, rbp:0, r8:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2770 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2775 [rdx:0, rsi:0, stack:24, stack:36, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2805 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2810 [rax:0, rdx:0, rbx:0, r8:0, r9:0, stack:40, stack:48, stack:56, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4         
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |r10|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2840 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2845 [rdx:0, rbx:0, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2875 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2880 [rdx:0, rbx:0, r10:0, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2910 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2915 [rdx:0, rbx:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2945 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2950 [rdx:0, rbx:0, rsi:0, rdi:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 2980 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2985 [rdx:0, rsi:0, stack:12, stack:16, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:112|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:48|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                   |1             |2               |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3015 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3020 [rdx:0, rbx:0, rsi:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4         
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |r11|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3050 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3055 [rdx:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3085 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3090 [rdx:0, rsi:0, stack:24, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                   |1             |2          |3                  |4              
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:44|DWORD 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3120 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3125 [rbx:0, r10:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |stack:80|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |stack:80|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3155 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3160 [rbx:0, rsi:0, r11:0, stack:24, stack:36, stack:40, stack:48, stack:64, stack:72]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3                  |4              
     locals:  |stack:88|QWORD[.]  |r11|QWORD[.]  |rcx|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |r11|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3190 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 3195 [rdx:0, r10:0, stack:24, stack:36, stack:40, stack:64, stack:72]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                   |1             |2  |3  |4               |5 
     locals:  |stack:104|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:44|DWORD  |- 
     stack:   |rax|DWORD           |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:40|DWORD 
  at java.util.regex.Pattern$BranchConn.match(Pattern.java:4878) [bci: 7, duringCall: true, rethrow: false]
              |0  |1  |2  |3 
     locals:  |-  |-  |-  |- 
  at java.util.regex.Pattern$GroupTail.match(Pattern.java:5000) [bci: 70, duringCall: true, rethrow: false]
              |0                  |1             |2  |3  |4  |5               |6              
     locals:  |stack:56|QWORD[.]  |rdx|QWORD[.]  |-  |-  |-  |stack:36|DWORD  |stack:32|DWORD   <||@
  Comment 3203 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 3203 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 3209 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 3209 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
