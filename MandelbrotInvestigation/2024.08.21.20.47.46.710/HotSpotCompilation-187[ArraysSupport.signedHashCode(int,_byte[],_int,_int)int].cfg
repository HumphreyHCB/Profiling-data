begin_compilation
  name " HotSpotCompilation-187[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-187[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  date 1724269667225
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v37  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i51 i43 i44 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i41 v34 j82 v60 i168 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v101 i166 v34 i90 i384 v141 v165 v382 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v37 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9690096637498683
stamp: void
=== Inputs ===
condition: v34 
=== Succesors ===
trueSuccessor: v36 
falseSuccessor: v35 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v34 #trueSuccessor: v36 #falseSuccessor: v35  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i459 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i459  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v498 v497 v479 v480 v481 v482 v483 v484 v485 v486 v487 v488 v489 v490 v491 v492 v493 v494 v495 v496 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 215
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v433 i459 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v479 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i459 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i459 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-14091|0xffffffffffffc8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v479 
lastLocationAccess: - 
=== Succesors ===
next: v449 
=== Usages ===
v60 v98 j89 
=== Predecessor ===
v36 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v479 lastLocationAccess: - #next: v449  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i27 i41 i123 i146 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i41 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i3 
y: i26 
=== Succesors ===
=== Usages ===
i53 i90 j92 v98 v101 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v101 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i6 
=== Succesors ===
=== Usages ===
v449 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i41 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v449 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v101 
=== Succesors ===
trueSuccessor: v448 
falseSuccessor: v445 
=== Usages ===
=== Predecessor ===
i459 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v101 #trueSuccessor: v448 #falseSuccessor: v445  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v448 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v457 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v457  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i41 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i41  <|@  <|@
f <@~|@floating>@ <|@
tid i90 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i41 
=== Succesors ===
=== Usages ===
j93 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i41  <|@  <|@
f <@~|@floating>@ <|@
tid j93 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i90 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i90  <|@  <|@
f <@~|@floating>@ <|@
tid j425 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j92 
y: j93 
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j92 y: j93  <|@  <|@
f <@~|@floating>@ <|@
tid j94 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j426 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j425 
y: j94 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j425 y: j94  <|@  <|@
f <@~|@floating>@ <|@
tid j89 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i459 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i459  <|@  <|@
f <@~|@floating>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j426 
y: j89 
=== Succesors ===
=== Usages ===
v457 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j426 y: j89  <|@  <|@
f <@~|@floating>@ <|@
tid j436 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i435 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -18715
stableDimension: 0
stamp: i32 [-18715]
stampKind: i32
value: int[-18715|0xffffffffffffb6e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v457 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v97 
=== Succesors ===
trueSuccessor: v456 
falseSuccessor: v453 
=== Usages ===
=== Predecessor ===
v448 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v97 #trueSuccessor: v456 #falseSuccessor: v453  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v455 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v455  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i459 
=== Succesors ===
=== Usages ===
v455 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i41 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v446 
falseSuccessor: v454 
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v446 #falseSuccessor: v454  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v446 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v444 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v444  <|@  <|@
f <@*|@fixed>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v446 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v458 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v458  <|@  <|@
f <@*|@fixed>@ <|@
tid v458 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v454 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v434 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v434  <|@  <|@
f <@*|@fixed>@ <|@
tid v434 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v445 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v443 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v443  <|@  <|@
f <@*|@fixed>@ <|@
tid v443 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v445 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v442 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v443 v444 
=== Succesors ===
next: v115 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v443 v444 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i459 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v60 
=== Succesors ===
trueSuccessor: v112 
falseSuccessor: v114 
=== Usages ===
=== Predecessor ===
v442 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v60 #trueSuccessor: v112 #falseSuccessor: v114  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i460 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i460  <|@  <|@
f <@~|@floating>@ <|@
tid j82 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i3 
=== Succesors ===
=== Usages ===
v480 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v480 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j82 
=== Succesors ===
=== Usages ===
i460 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j82  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i460 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v480 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i83 
=== Predecessor ===
v112 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v480 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i31 i43 i125 i148 i177 i201 i211 i232 i242 i252 i261 i272 i286 i296 i306 i315 i326 i335 i344 i353 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i30 
=== Succesors ===
=== Usages ===
i44 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i43 
y: i1 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i43 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i83 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i460 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i460  <|@  <|@
f <@~|@floating>@ <|@
tid i40 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i44 
y: i83 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i44 y: i83  <|@  <|@
f <@~|@floating>@ <|@
tid i167 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i168 i192 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i167 
=== Succesors ===
=== Usages ===
v165 i166 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i168 
y: i6 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i168 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v165 
trueValue: i168 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v165 trueValue: i168 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i460 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i53 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i41 i27 
=== Succesors ===
=== Usages ===
i27 v13 j84 i128 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i41 i27  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i40 i25 
=== Succesors ===
=== Usages ===
i31 i127 i32 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i40 i25  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 31.268123583065343
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i53 i52 v15 v28 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i166 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i166  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i461 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i461  <|@  <|@
f <@~|@floating>@ <|@
tid j84 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i53 
=== Succesors ===
=== Usages ===
v481 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i53  <|@  <|@
f <@~|@floating>@ <|@
tid v481 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j84 
=== Succesors ===
=== Usages ===
i461 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j84  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i461 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v481 
lastLocationAccess: - 
=== Succesors ===
next: v28 
=== Usages ===
i85 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v481 lastLocationAccess: - #next: v28  <|@  <|@
f <@~|@floating>@ <|@
tid i31 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i52 
y: i30 
=== Succesors ===
=== Usages ===
i32 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i52 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i32 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i31 
y: i52 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i31 y: i52  <|@  <|@
f <@~|@floating>@ <|@
tid i85 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i461 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i461  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i32 
y: i85 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i32 y: i85  <|@  <|@
f <@~|@floating>@ <|@
tid i27 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i53 
y: i26 
=== Succesors ===
=== Usages ===
i53 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i53 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v28 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i461 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v136 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v136  <|@  <|@
f <@~|@floating>@ <|@
tid i381 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483632
stableDimension: 0
stamp: i32 [-2147483632]
stampKind: i32
value: int[-2147483632|0xffffffff80000010]
=== Inputs ===
=== Succesors ===
=== Usages ===
v382 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v382 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i381 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i381  <|@  <|@
f <@~|@floating>@ <|@
tid i186 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -16
stableDimension: 0
stamp: i32 [-16]
stampKind: i32
value: int[-16|0xfffffffffffffff0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i384 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i384 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i383 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i383  <|@  <|@
f <@~|@floating>@ <|@
tid i191 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v382 
trueValue: i186 
falseValue: i384 
=== Succesors ===
=== Usages ===
v118 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v382 trueValue: i186 falseValue: i384  <|@  <|@
f <@*|@fixed>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v117 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i127 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i52 i352 
=== Succesors ===
=== Usages ===
i125 i126 i150 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i52 i352  <|@  <|@
f <@~|@floating>@ <|@
tid i128 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i53 i380 
=== Succesors ===
=== Usages ===
v118 i123 j132 i151 i192 i222 i223 i272 i274 i276 i277 i367 i369 i371 i373 i375 i377 i379 i380 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i53 i380  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v117 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 31.268123583065343
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 16
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v136 
=== Succesors ===
next: v121 
=== Usages ===
v119 v124 i127 i128 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v136 #next: v121  <|@  <|@
f <@~|@floating>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i128 
y: i191 
=== Succesors ===
=== Usages ===
v121 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i128 y: i191  <|@  <|@
f <@*|@fixed>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.48829676467488703
stamp: void
=== Inputs ===
condition: v118 
=== Succesors ===
trueSuccessor: v120 
falseSuccessor: v119 
=== Usages ===
=== Predecessor ===
v117 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v118 #trueSuccessor: v120 #falseSuccessor: v119  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i462 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i462  <|@  <|@
f <@~|@floating>@ <|@
tid j132 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i128 
=== Succesors ===
=== Usages ===
v482 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i128  <|@  <|@
f <@~|@floating>@ <|@
tid v482 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j132 
=== Succesors ===
=== Usages ===
i462 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i462 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v482 
lastLocationAccess: - 
=== Succesors ===
next: i463 
=== Usages ===
i133 
=== Predecessor ===
v120 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v482 lastLocationAccess: - #next: i463  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i26 
=== Succesors ===
=== Usages ===
j182 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid j182 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i123 
=== Succesors ===
=== Usages ===
v484 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i123  <|@  <|@
f <@~|@floating>@ <|@
tid v484 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j182 
=== Succesors ===
=== Usages ===
i463 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j182  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i463 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v484 
lastLocationAccess: - 
=== Succesors ===
next: i464 
=== Usages ===
i183 
=== Predecessor ===
i462 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v484 lastLocationAccess: - #next: i464  <|@  <|@
f <@~|@floating>@ <|@
tid i192 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i167 
=== Succesors ===
=== Usages ===
j206 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid j206 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i192 
=== Succesors ===
=== Usages ===
v485 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i192  <|@  <|@
f <@~|@floating>@ <|@
tid v485 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j206 
=== Succesors ===
=== Usages ===
i464 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j206  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i464 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v485 
lastLocationAccess: - 
=== Succesors ===
next: i465 
=== Usages ===
i207 
=== Predecessor ===
i463 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v485 lastLocationAccess: - #next: i465  <|@  <|@
f <@~|@floating>@ <|@
tid i221 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i222 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i222 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i221 
=== Succesors ===
=== Usages ===
j216 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i221  <|@  <|@
f <@~|@floating>@ <|@
tid j216 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i222 
=== Succesors ===
=== Usages ===
v486 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i222  <|@  <|@
f <@~|@floating>@ <|@
tid v486 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j216 
=== Succesors ===
=== Usages ===
i465 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j216  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i465 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v486 
lastLocationAccess: - 
=== Succesors ===
next: i466 
=== Usages ===
i217 
=== Predecessor ===
i464 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v486 lastLocationAccess: - #next: i466  <|@  <|@
f <@~|@floating>@ <|@
tid i220 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i223 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i223 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i220 
=== Succesors ===
=== Usages ===
j237 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i220  <|@  <|@
f <@~|@floating>@ <|@
tid j237 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i223 
=== Succesors ===
=== Usages ===
v487 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i223  <|@  <|@
f <@~|@floating>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j237 
=== Succesors ===
=== Usages ===
i466 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j237  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i466 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v487 
lastLocationAccess: - 
=== Succesors ===
next: i467 
=== Usages ===
i238 
=== Predecessor ===
i465 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v487 lastLocationAccess: - #next: i467  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i30 
=== Succesors ===
=== Usages ===
j247 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid j247 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i272 
=== Succesors ===
=== Usages ===
v488 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i272  <|@  <|@
f <@~|@floating>@ <|@
tid v488 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j247 
=== Succesors ===
=== Usages ===
i467 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j247  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i467 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v488 
lastLocationAccess: - 
=== Succesors ===
next: i468 
=== Usages ===
i248 
=== Predecessor ===
i466 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v488 lastLocationAccess: - #next: i468  <|@  <|@
f <@~|@floating>@ <|@
tid i273 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i274 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i273 
=== Succesors ===
=== Usages ===
j257 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i273  <|@  <|@
f <@~|@floating>@ <|@
tid j257 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i274 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i274  <|@  <|@
f <@~|@floating>@ <|@
tid v489 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j257 
=== Succesors ===
=== Usages ===
i468 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j257  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i468 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v489 
lastLocationAccess: - 
=== Succesors ===
next: i469 
=== Usages ===
i258 
=== Predecessor ===
i467 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v489 lastLocationAccess: - #next: i469  <|@  <|@
f <@~|@floating>@ <|@
tid i275 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i276 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i276 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i275 
=== Succesors ===
=== Usages ===
j266 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i275  <|@  <|@
f <@~|@floating>@ <|@
tid j266 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i276 
=== Succesors ===
=== Usages ===
v490 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i276  <|@  <|@
f <@~|@floating>@ <|@
tid v490 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j266 
=== Succesors ===
=== Usages ===
i469 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j266  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i469 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v490 
lastLocationAccess: - 
=== Succesors ===
next: i470 
=== Usages ===
i267 
=== Predecessor ===
i468 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v490 lastLocationAccess: - #next: i470  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i277 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i277 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i271 
=== Succesors ===
=== Usages ===
j291 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i271  <|@  <|@
f <@~|@floating>@ <|@
tid j291 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i277 
=== Succesors ===
=== Usages ===
v491 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i277  <|@  <|@
f <@~|@floating>@ <|@
tid v491 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j291 
=== Succesors ===
=== Usages ===
i470 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j291  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i470 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v491 
lastLocationAccess: - 
=== Succesors ===
next: i471 
=== Usages ===
i292 
=== Predecessor ===
i469 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v491 lastLocationAccess: - #next: i471  <|@  <|@
f <@~|@floating>@ <|@
tid i366 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 9
stableDimension: 0
stamp: i32 [9]
stampKind: i32
value: int[9|0x9]
=== Inputs ===
=== Succesors ===
=== Usages ===
i367 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i367 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i366 
=== Succesors ===
=== Usages ===
j301 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i366  <|@  <|@
f <@~|@floating>@ <|@
tid j301 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i367 
=== Succesors ===
=== Usages ===
v492 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i367  <|@  <|@
f <@~|@floating>@ <|@
tid v492 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j301 
=== Succesors ===
=== Usages ===
i471 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j301  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i471 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v492 
lastLocationAccess: - 
=== Succesors ===
next: i472 
=== Usages ===
i302 
=== Predecessor ===
i470 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v492 lastLocationAccess: - #next: i472  <|@  <|@
f <@~|@floating>@ <|@
tid i368 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 10
stableDimension: 0
stamp: i32 [10]
stampKind: i32
value: int[10|0xa]
=== Inputs ===
=== Succesors ===
=== Usages ===
i369 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i369 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i368 
=== Succesors ===
=== Usages ===
j311 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i368  <|@  <|@
f <@~|@floating>@ <|@
tid j311 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i369 
=== Succesors ===
=== Usages ===
v493 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i369  <|@  <|@
f <@~|@floating>@ <|@
tid v493 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j311 
=== Succesors ===
=== Usages ===
i472 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j311  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i472 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v493 
lastLocationAccess: - 
=== Succesors ===
next: i473 
=== Usages ===
i312 
=== Predecessor ===
i471 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v493 lastLocationAccess: - #next: i473  <|@  <|@
f <@~|@floating>@ <|@
tid i370 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 11
stableDimension: 0
stamp: i32 [11]
stampKind: i32
value: int[11|0xb]
=== Inputs ===
=== Succesors ===
=== Usages ===
i371 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i371 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i370 
=== Succesors ===
=== Usages ===
j320 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i370  <|@  <|@
f <@~|@floating>@ <|@
tid j320 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i371 
=== Succesors ===
=== Usages ===
v494 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i371  <|@  <|@
f <@~|@floating>@ <|@
tid v494 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j320 
=== Succesors ===
=== Usages ===
i473 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j320  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i473 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v494 
lastLocationAccess: - 
=== Succesors ===
next: i474 
=== Usages ===
i321 
=== Predecessor ===
i472 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v494 lastLocationAccess: - #next: i474  <|@  <|@
f <@~|@floating>@ <|@
tid i372 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 12
stableDimension: 0
stamp: i32 [12]
stampKind: i32
value: int[12|0xc]
=== Inputs ===
=== Succesors ===
=== Usages ===
i373 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i373 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i372 
=== Succesors ===
=== Usages ===
j331 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i372  <|@  <|@
f <@~|@floating>@ <|@
tid j331 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i373 
=== Succesors ===
=== Usages ===
v495 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i373  <|@  <|@
f <@~|@floating>@ <|@
tid v495 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j331 
=== Succesors ===
=== Usages ===
i474 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j331  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i474 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v495 
lastLocationAccess: - 
=== Succesors ===
next: i475 
=== Usages ===
i332 
=== Predecessor ===
i473 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v495 lastLocationAccess: - #next: i475  <|@  <|@
f <@~|@floating>@ <|@
tid i374 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 13
stableDimension: 0
stamp: i32 [13]
stampKind: i32
value: int[13|0xd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i375 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i375 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i374 
=== Succesors ===
=== Usages ===
j340 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i374  <|@  <|@
f <@~|@floating>@ <|@
tid j340 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i375 
=== Succesors ===
=== Usages ===
v496 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i375  <|@  <|@
f <@~|@floating>@ <|@
tid v496 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j340 
=== Succesors ===
=== Usages ===
i475 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j340  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i475 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v496 
lastLocationAccess: - 
=== Succesors ===
next: i476 
=== Usages ===
i341 
=== Predecessor ===
i474 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v496 lastLocationAccess: - #next: i476  <|@  <|@
f <@~|@floating>@ <|@
tid i376 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 14
stableDimension: 0
stamp: i32 [14]
stampKind: i32
value: int[14|0xe]
=== Inputs ===
=== Succesors ===
=== Usages ===
i377 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i377 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i376 
=== Succesors ===
=== Usages ===
j349 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i376  <|@  <|@
f <@~|@floating>@ <|@
tid j349 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i377 
=== Succesors ===
=== Usages ===
v497 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i377  <|@  <|@
f <@~|@floating>@ <|@
tid v497 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j349 
=== Succesors ===
=== Usages ===
i476 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j349  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i476 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v497 
lastLocationAccess: - 
=== Succesors ===
next: i477 
=== Usages ===
i350 
=== Predecessor ===
i475 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v497 lastLocationAccess: - #next: i477  <|@  <|@
f <@~|@floating>@ <|@
tid i378 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 15
stableDimension: 0
stamp: i32 [15]
stampKind: i32
value: int[15|0xf]
=== Inputs ===
=== Succesors ===
=== Usages ===
i379 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i379 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i378 
=== Succesors ===
=== Usages ===
j358 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i378  <|@  <|@
f <@~|@floating>@ <|@
tid j358 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i379 
=== Succesors ===
=== Usages ===
v498 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i379  <|@  <|@
f <@~|@floating>@ <|@
tid v498 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j358 
=== Succesors ===
=== Usages ===
i477 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j358  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i477 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v498 
lastLocationAccess: - 
=== Succesors ===
next: v124 
=== Usages ===
i359 
=== Predecessor ===
i476 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v498 lastLocationAccess: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i127 
y: i30 
=== Succesors ===
=== Usages ===
i126 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i127 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i125 
y: i127 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i125 y: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i133 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i462 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i462  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i126 
y: i133 
=== Succesors ===
=== Usages ===
i178 i177 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i126 y: i133  <|@  <|@
f <@~|@floating>@ <|@
tid i177 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i122 
y: i30 
=== Succesors ===
=== Usages ===
i178 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i122 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i177 
y: i122 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i177 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid i183 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i463 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i463  <|@  <|@
f <@~|@floating>@ <|@
tid i174 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i178 
y: i183 
=== Succesors ===
=== Usages ===
i202 i201 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i178 y: i183  <|@  <|@
f <@~|@floating>@ <|@
tid i201 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i174 
y: i30 
=== Succesors ===
=== Usages ===
i202 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i174 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i202 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i201 
y: i174 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i201 y: i174  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i464 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i464  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i202 
y: i207 
=== Succesors ===
=== Usages ===
i211 i212 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i202 y: i207  <|@  <|@
f <@~|@floating>@ <|@
tid i211 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i198 
y: i30 
=== Succesors ===
=== Usages ===
i212 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i198 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i211 
y: i198 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i211 y: i198  <|@  <|@
f <@~|@floating>@ <|@
tid i217 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i465 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i465  <|@  <|@
f <@~|@floating>@ <|@
tid i210 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i212 
y: i217 
=== Succesors ===
=== Usages ===
i233 i232 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i212 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i210 
y: i30 
=== Succesors ===
=== Usages ===
i233 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i210 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i233 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i232 
y: i210 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i232 y: i210  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i466 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i466  <|@  <|@
f <@~|@floating>@ <|@
tid i229 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i233 
y: i238 
=== Succesors ===
=== Usages ===
i242 i243 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i233 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i229 
y: i30 
=== Succesors ===
=== Usages ===
i243 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i229 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i243 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i242 
y: i229 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i242 y: i229  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i467 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i467  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i243 
y: i248 
=== Succesors ===
=== Usages ===
i252 i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i243 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i241 
y: i30 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i241 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i253 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i252 
y: i241 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i252 y: i241  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i468 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i468  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i253 
y: i258 
=== Succesors ===
=== Usages ===
i261 i262 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i251 
y: i30 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i251 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i251 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i251  <|@  <|@
f <@~|@floating>@ <|@
tid i267 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i469 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i469  <|@  <|@
f <@~|@floating>@ <|@
tid i260 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i262 
y: i267 
=== Succesors ===
=== Usages ===
i287 i286 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i267  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i260 
y: i30 
=== Succesors ===
=== Usages ===
i287 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i260 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i287 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i286 
y: i260 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i286 y: i260  <|@  <|@
f <@~|@floating>@ <|@
tid i292 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i470 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i470  <|@  <|@
f <@~|@floating>@ <|@
tid i283 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i287 
y: i292 
=== Succesors ===
=== Usages ===
i296 i297 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i287 y: i292  <|@  <|@
f <@~|@floating>@ <|@
tid i296 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i283 
y: i30 
=== Succesors ===
=== Usages ===
i297 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i283 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i297 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i296 
y: i283 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i296 y: i283  <|@  <|@
f <@~|@floating>@ <|@
tid i302 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i471 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i471  <|@  <|@
f <@~|@floating>@ <|@
tid i295 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i297 
y: i302 
=== Succesors ===
=== Usages ===
i306 i307 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i297 y: i302  <|@  <|@
f <@~|@floating>@ <|@
tid i306 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i295 
y: i30 
=== Succesors ===
=== Usages ===
i307 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i295 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i307 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i306 
y: i295 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i306 y: i295  <|@  <|@
f <@~|@floating>@ <|@
tid i312 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i472 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i472  <|@  <|@
f <@~|@floating>@ <|@
tid i305 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i307 
y: i312 
=== Succesors ===
=== Usages ===
i315 i316 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i307 y: i312  <|@  <|@
f <@~|@floating>@ <|@
tid i315 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i305 
y: i30 
=== Succesors ===
=== Usages ===
i316 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i305 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i315 
y: i305 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i315 y: i305  <|@  <|@
f <@~|@floating>@ <|@
tid i321 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i473 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i473  <|@  <|@
f <@~|@floating>@ <|@
tid i314 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i316 
y: i321 
=== Succesors ===
=== Usages ===
i326 i327 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i316 y: i321  <|@  <|@
f <@~|@floating>@ <|@
tid i326 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i314 
y: i30 
=== Succesors ===
=== Usages ===
i327 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i314 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i327 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i326 
y: i314 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i326 y: i314  <|@  <|@
f <@~|@floating>@ <|@
tid i332 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i474 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i474  <|@  <|@
f <@~|@floating>@ <|@
tid i325 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i327 
y: i332 
=== Succesors ===
=== Usages ===
i335 i336 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i327 y: i332  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i325 
y: i30 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i325 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i335 
y: i325 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i335 y: i325  <|@  <|@
f <@~|@floating>@ <|@
tid i341 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i475 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i475  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i336 
y: i341 
=== Succesors ===
=== Usages ===
i344 i345 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i336 y: i341  <|@  <|@
f <@~|@floating>@ <|@
tid i344 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i334 
y: i30 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i334 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i345 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i344 
y: i334 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i344 y: i334  <|@  <|@
f <@~|@floating>@ <|@
tid i350 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i476 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i476  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i345 
y: i350 
=== Succesors ===
=== Usages ===
i353 i354 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i345 y: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i353 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i343 
y: i30 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i343 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i353 
y: i343 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i353 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i359 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i477 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i477  <|@  <|@
f <@~|@floating>@ <|@
tid i352 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i354 
y: i359 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i354 y: i359  <|@  <|@
f <@~|@floating>@ <|@
tid i365 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16]
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
i380 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i380 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i365 
=== Succesors ===
=== Usages ===
i128 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i365  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v117 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i477 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v117  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v117 
=== Succesors ===
next: v159 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v117 #next: v159  <|@  <|@
f <@*|@fixed>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
v119 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i150 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i127 i145 
=== Succesors ===
=== Usages ===
i148 i149 i51 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i127 i145  <|@  <|@
f <@~|@floating>@ <|@
tid i151 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i128 i146 
=== Succesors ===
=== Usages ===
v141 i146 j155 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i128 i146  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 31.268123583065343
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v159 
=== Succesors ===
next: v144 
=== Usages ===
v142 v147 i150 i151 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v159 #next: v144  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i6 
=== Succesors ===
=== Usages ===
v144 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i151 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v141 
=== Succesors ===
trueSuccessor: v143 
falseSuccessor: v142 
=== Usages ===
=== Predecessor ===
v140 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v141 #trueSuccessor: v143 #falseSuccessor: v142  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v143 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i478 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i478  <|@  <|@
f <@~|@floating>@ <|@
tid j155 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i151 
=== Succesors ===
=== Usages ===
v483 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v483 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j155 
=== Succesors ===
=== Usages ===
i478 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i478 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v483 
lastLocationAccess: - 
=== Succesors ===
next: v147 
=== Usages ===
i156 
=== Predecessor ===
v143 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v483 lastLocationAccess: - #next: v147  <|@  <|@
f <@~|@floating>@ <|@
tid i148 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i150 
y: i30 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i150 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i149 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i148 
y: i150 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i148 y: i150  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i478 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i478  <|@  <|@
f <@~|@floating>@ <|@
tid i145 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i149 
y: i156 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i149 y: i156  <|@  <|@
f <@~|@floating>@ <|@
tid i146 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i151 
y: i26 
=== Succesors ===
=== Usages ===
i151 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i151 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v140 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i478 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v140  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v140 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v140 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v142 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v437 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v437  <|@  <|@
f <@~|@floating>@ <|@
tid j430 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i438 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -15643
stableDimension: 0
stamp: i32 [-15643]
stampKind: i32
value: int[-15643|0xffffffffffffc2e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v437 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v114 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i431 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-18715 - -15643] bits:1...1xxx0x1011100101
valueDescription: i32
=== Inputs ===
merge: v427 
values: i435 i438 i435 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: i435 i438 i435  <|@  <|@
f <@~|@floating>@ <|@
tid j432 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v427 
values: j436 j430 j436 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: j436 j430 j436  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v427 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v434 v437 v458 
=== Succesors ===
next: v433 
=== Usages ===
i431 j432 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v434 v437 v458 #next: v433  <|@  <|@
f <@*|@fixed>@ <|@
tid v433 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i431 
speculation: j432 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v427 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i431 speculation: j432  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v35 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i51 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v46 
values: i150 i1 
=== Succesors ===
=== Usages ===
v29 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v46 values: i150 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v47 v48 
=== Succesors ===
next: v29 
=== Usages ===
i51 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v47 v48 #next: v29  <|@  <|@
f <@*|@fixed>@ <|@
tid v29 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v46 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v37  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
result v0|DWORD <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i51 i43 i44 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i41 v34 j82 v60 i168 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
result v4|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v101 i166 v34 i90 i384 v141 v165 v382 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v37 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9690096637498683
stamp: void
=== Inputs ===
condition: v34 
=== Succesors ===
trueSuccessor: v36 
falseSuccessor: v35 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v34 #trueSuccessor: v36 #falseSuccessor: v35  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i459 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i459  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v498 v497 v479 v480 v481 v482 v483 v484 v485 v486 v487 v488 v489 v490 v491 v492 v493 v494 v495 v496 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 215
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v433 i459 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v479 <|@
result [v1|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i459 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i459 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-14091|0xffffffffffffc8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v479 
lastLocationAccess: - 
=== Succesors ===
next: v449 
=== Usages ===
v60 v98 j89 
=== Predecessor ===
v36 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v479 lastLocationAccess: - #next: v449  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i27 i41 i123 i146 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i41 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i3 
y: i26 
=== Succesors ===
=== Usages ===
i53 i90 j92 v98 v101 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v101 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i6 
=== Succesors ===
=== Usages ===
v449 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i41 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v449 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v101 
=== Succesors ===
trueSuccessor: v448 
falseSuccessor: v445 
=== Usages ===
=== Predecessor ===
i459 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v101 #trueSuccessor: v448 #falseSuccessor: v445  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v448 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v457 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v457  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
result v7|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i41 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i41  <|@  <|@
f <@~|@floating>@ <|@
tid i90 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i41 
=== Succesors ===
=== Usages ===
j93 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i41  <|@  <|@
f <@~|@floating>@ <|@
tid j93 <|@
result v9|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i90 
=== Succesors ===
=== Usages ===
j425 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i90  <|@  <|@
f <@~|@floating>@ <|@
tid j425 <|@
result v10|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j92 
y: j93 
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j92 y: j93  <|@  <|@
f <@~|@floating>@ <|@
tid j94 <|@
result long[-1|0xffffffffffffffff] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j426 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j426 <|@
result v11|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j425 
y: j94 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j425 y: j94  <|@  <|@
f <@~|@floating>@ <|@
tid j89 <|@
result v12|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i459 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i459  <|@  <|@
f <@~|@floating>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j426 
y: j89 
=== Succesors ===
=== Usages ===
v457 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j426 y: j89  <|@  <|@
f <@~|@floating>@ <|@
tid j436 <|@
result long[24|0x18] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i435 <|@
result int[-18715|0xffffffffffffb6e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -18715
stableDimension: 0
stamp: i32 [-18715]
stampKind: i32
value: int[-18715|0xffffffffffffb6e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v457 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v97 
=== Succesors ===
trueSuccessor: v456 
falseSuccessor: v453 
=== Usages ===
=== Predecessor ===
v448 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v97 #trueSuccessor: v456 #falseSuccessor: v453  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v455 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v455  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i459 
=== Succesors ===
=== Usages ===
v455 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i41 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v446 
falseSuccessor: v454 
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v446 #falseSuccessor: v454  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v446 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v444 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v444  <|@  <|@
f <@*|@fixed>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v446 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v458 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v458  <|@  <|@
f <@*|@fixed>@ <|@
tid v458 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v454 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v434 
=== Usages ===
=== Predecessor ===
v457 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v434  <|@  <|@
f <@*|@fixed>@ <|@
tid v434 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v445 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v443 
=== Usages ===
=== Predecessor ===
v449 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v443  <|@  <|@
f <@*|@fixed>@ <|@
tid v443 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v442 
=== Predecessor ===
v445 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v442 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v443 v444 
=== Succesors ===
next: v115 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v443 v444 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i459 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i459  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v60 
=== Succesors ===
trueSuccessor: v112 
falseSuccessor: v114 
=== Usages ===
=== Predecessor ===
v442 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v60 #trueSuccessor: v112 #falseSuccessor: v114  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i460 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i460  <|@  <|@
f <@~|@floating>@ <|@
tid j82 <|@
result v13|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i3 
=== Succesors ===
=== Usages ===
v480 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v480 <|@
result [v1|QWORD[.] + v13|QWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j82 
=== Succesors ===
=== Usages ===
i460 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j82  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i460 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v480 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i83 
=== Predecessor ===
v112 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v480 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
result int[5|0x5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i31 i43 i125 i148 i177 i201 i211 i232 i242 i252 i261 i272 i286 i296 i306 i315 i326 i335 i344 i353 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i30 
=== Succesors ===
=== Usages ===
i44 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
result v15|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i43 
y: i1 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i43 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i83 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i460 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i460  <|@  <|@
f <@~|@floating>@ <|@
tid i40 <|@
result v17|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i44 
y: i83 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i44 y: i83  <|@  <|@
f <@~|@floating>@ <|@
tid i167 <|@
result int[2|0x2] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i168 i192 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
result v18|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i167 
=== Succesors ===
=== Usages ===
v165 i166 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i168 
y: i6 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i168 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
result v19|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v165 
trueValue: i168 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v165 trueValue: i168 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i460 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i53 <|@
result v20|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i41 i27 
=== Succesors ===
=== Usages ===
i27 v13 j84 i128 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i41 i27  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
result v21|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i40 i25 
=== Succesors ===
=== Usages ===
i31 i127 i32 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i40 i25  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 31.268123583065343
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i53 i52 v15 v28 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i166 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i166  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i461 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i461  <|@  <|@
f <@~|@floating>@ <|@
tid j84 <|@
result v20|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i53 
=== Succesors ===
=== Usages ===
v481 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i53  <|@  <|@
f <@~|@floating>@ <|@
tid v481 <|@
result [v1|QWORD[.] + v20|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j84 
=== Succesors ===
=== Usages ===
i461 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j84  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i461 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v481 
lastLocationAccess: - 
=== Succesors ===
next: v28 
=== Usages ===
i85 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v481 lastLocationAccess: - #next: v28  <|@  <|@
f <@~|@floating>@ <|@
tid i31 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i52 
y: i30 
=== Succesors ===
=== Usages ===
i32 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i52 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i32 <|@
result v23|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i31 
y: i52 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i31 y: i52  <|@  <|@
f <@~|@floating>@ <|@
tid i85 <|@
result v24|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i461 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i461  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
result v25|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i32 
y: i85 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i32 y: i85  <|@  <|@
f <@~|@floating>@ <|@
tid i27 <|@
result v26|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i53 
y: i26 
=== Succesors ===
=== Usages ===
i53 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i53 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v28 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i461 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v136 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v136  <|@  <|@
f <@~|@floating>@ <|@
tid i381 <|@
result int[-2147483632|0xffffffff80000010] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483632
stableDimension: 0
stamp: i32 [-2147483632]
stampKind: i32
value: int[-2147483632|0xffffffff80000010]
=== Inputs ===
=== Succesors ===
=== Usages ===
v382 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v382 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i381 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i381  <|@  <|@
f <@~|@floating>@ <|@
tid i186 <|@
result int[-2147483648|0xffffffff80000000] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
result int[-16|0xfffffffffffffff0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -16
stableDimension: 0
stamp: i32 [-16]
stampKind: i32
value: int[-16|0xfffffffffffffff0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i384 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i384 <|@
result v27|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i383 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i383  <|@  <|@
f <@~|@floating>@ <|@
tid i191 <|@
result v28|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v382 
trueValue: i186 
falseValue: i384 
=== Succesors ===
=== Usages ===
v118 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v382 trueValue: i186 falseValue: i384  <|@  <|@
f <@*|@fixed>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v117 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i127 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i52 i352 
=== Succesors ===
=== Usages ===
i125 i126 i150 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i52 i352  <|@  <|@
f <@~|@floating>@ <|@
tid i128 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i53 i380 
=== Succesors ===
=== Usages ===
v118 i123 j132 i151 i192 i222 i223 i272 i274 i276 i277 i367 i369 i371 i373 i375 i377 i379 i380 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i53 i380  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v117 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 31.268123583065343
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 16
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v136 
=== Succesors ===
next: v121 
=== Usages ===
v119 v124 i127 i128 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v136 #next: v121  <|@  <|@
f <@~|@floating>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i128 
y: i191 
=== Succesors ===
=== Usages ===
v121 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i128 y: i191  <|@  <|@
f <@*|@fixed>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.48829676467488703
stamp: void
=== Inputs ===
condition: v118 
=== Succesors ===
trueSuccessor: v120 
falseSuccessor: v119 
=== Usages ===
=== Predecessor ===
v117 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v118 #trueSuccessor: v120 #falseSuccessor: v119  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i462 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i462  <|@  <|@
f <@~|@floating>@ <|@
tid j132 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i128 
=== Succesors ===
=== Usages ===
v482 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i128  <|@  <|@
f <@~|@floating>@ <|@
tid v482 <|@
result [v1|QWORD[.] + v31|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j132 
=== Succesors ===
=== Usages ===
i462 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i462 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v482 
lastLocationAccess: - 
=== Succesors ===
next: i463 
=== Usages ===
i133 
=== Predecessor ===
v120 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v482 lastLocationAccess: - #next: i463  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i26 
=== Succesors ===
=== Usages ===
j182 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid j182 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i123 
=== Succesors ===
=== Usages ===
v484 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i123  <|@  <|@
f <@~|@floating>@ <|@
tid v484 <|@
result [v1|QWORD[.] + v33|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j182 
=== Succesors ===
=== Usages ===
i463 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j182  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i463 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v484 
lastLocationAccess: - 
=== Succesors ===
next: i464 
=== Usages ===
i183 
=== Predecessor ===
i462 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v484 lastLocationAccess: - #next: i464  <|@  <|@
f <@~|@floating>@ <|@
tid i192 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i167 
=== Succesors ===
=== Usages ===
j206 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid j206 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i192 
=== Succesors ===
=== Usages ===
v485 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i192  <|@  <|@
f <@~|@floating>@ <|@
tid v485 <|@
result [v1|QWORD[.] + v35|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j206 
=== Succesors ===
=== Usages ===
i464 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j206  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i464 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v485 
lastLocationAccess: - 
=== Succesors ===
next: i465 
=== Usages ===
i207 
=== Predecessor ===
i463 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v485 lastLocationAccess: - #next: i465  <|@  <|@
f <@~|@floating>@ <|@
tid i221 <|@
result int[3|0x3] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i222 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i222 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i221 
=== Succesors ===
=== Usages ===
j216 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i221  <|@  <|@
f <@~|@floating>@ <|@
tid j216 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i222 
=== Succesors ===
=== Usages ===
v486 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i222  <|@  <|@
f <@~|@floating>@ <|@
tid v486 <|@
result [v1|QWORD[.] + v37|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j216 
=== Succesors ===
=== Usages ===
i465 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j216  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i465 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v486 
lastLocationAccess: - 
=== Succesors ===
next: i466 
=== Usages ===
i217 
=== Predecessor ===
i464 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v486 lastLocationAccess: - #next: i466  <|@  <|@
f <@~|@floating>@ <|@
tid i220 <|@
result int[4|0x4] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i223 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i223 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i220 
=== Succesors ===
=== Usages ===
j237 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i220  <|@  <|@
f <@~|@floating>@ <|@
tid j237 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i223 
=== Succesors ===
=== Usages ===
v487 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i223  <|@  <|@
f <@~|@floating>@ <|@
tid v487 <|@
result [v1|QWORD[.] + v39|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j237 
=== Succesors ===
=== Usages ===
i466 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j237  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i466 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v487 
lastLocationAccess: - 
=== Succesors ===
next: i467 
=== Usages ===
i238 
=== Predecessor ===
i465 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v487 lastLocationAccess: - #next: i467  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i30 
=== Succesors ===
=== Usages ===
j247 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid j247 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i272 
=== Succesors ===
=== Usages ===
v488 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i272  <|@  <|@
f <@~|@floating>@ <|@
tid v488 <|@
result [v1|QWORD[.] + v41|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j247 
=== Succesors ===
=== Usages ===
i467 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j247  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i467 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v488 
lastLocationAccess: - 
=== Succesors ===
next: i468 
=== Usages ===
i248 
=== Predecessor ===
i466 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v488 lastLocationAccess: - #next: i468  <|@  <|@
f <@~|@floating>@ <|@
tid i273 <|@
result int[6|0x6] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i274 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i273 
=== Succesors ===
=== Usages ===
j257 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i273  <|@  <|@
f <@~|@floating>@ <|@
tid j257 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i274 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i274  <|@  <|@
f <@~|@floating>@ <|@
tid v489 <|@
result [v1|QWORD[.] + v43|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j257 
=== Succesors ===
=== Usages ===
i468 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j257  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i468 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v489 
lastLocationAccess: - 
=== Succesors ===
next: i469 
=== Usages ===
i258 
=== Predecessor ===
i467 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v489 lastLocationAccess: - #next: i469  <|@  <|@
f <@~|@floating>@ <|@
tid i275 <|@
result int[7|0x7] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i276 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i276 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i275 
=== Succesors ===
=== Usages ===
j266 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i275  <|@  <|@
f <@~|@floating>@ <|@
tid j266 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i276 
=== Succesors ===
=== Usages ===
v490 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i276  <|@  <|@
f <@~|@floating>@ <|@
tid v490 <|@
result [v1|QWORD[.] + v45|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j266 
=== Succesors ===
=== Usages ===
i469 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j266  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i469 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v490 
lastLocationAccess: - 
=== Succesors ===
next: i470 
=== Usages ===
i267 
=== Predecessor ===
i468 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v490 lastLocationAccess: - #next: i470  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
result int[8|0x8] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i277 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i277 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i271 
=== Succesors ===
=== Usages ===
j291 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i271  <|@  <|@
f <@~|@floating>@ <|@
tid j291 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i277 
=== Succesors ===
=== Usages ===
v491 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i277  <|@  <|@
f <@~|@floating>@ <|@
tid v491 <|@
result [v1|QWORD[.] + v47|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j291 
=== Succesors ===
=== Usages ===
i470 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j291  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i470 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v491 
lastLocationAccess: - 
=== Succesors ===
next: i471 
=== Usages ===
i292 
=== Predecessor ===
i469 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v491 lastLocationAccess: - #next: i471  <|@  <|@
f <@~|@floating>@ <|@
tid i366 <|@
result int[9|0x9] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 9
stableDimension: 0
stamp: i32 [9]
stampKind: i32
value: int[9|0x9]
=== Inputs ===
=== Succesors ===
=== Usages ===
i367 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i367 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i366 
=== Succesors ===
=== Usages ===
j301 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i366  <|@  <|@
f <@~|@floating>@ <|@
tid j301 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i367 
=== Succesors ===
=== Usages ===
v492 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i367  <|@  <|@
f <@~|@floating>@ <|@
tid v492 <|@
result [v1|QWORD[.] + v49|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j301 
=== Succesors ===
=== Usages ===
i471 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j301  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i471 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v492 
lastLocationAccess: - 
=== Succesors ===
next: i472 
=== Usages ===
i302 
=== Predecessor ===
i470 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v492 lastLocationAccess: - #next: i472  <|@  <|@
f <@~|@floating>@ <|@
tid i368 <|@
result int[10|0xa] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 10
stableDimension: 0
stamp: i32 [10]
stampKind: i32
value: int[10|0xa]
=== Inputs ===
=== Succesors ===
=== Usages ===
i369 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i369 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i368 
=== Succesors ===
=== Usages ===
j311 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i368  <|@  <|@
f <@~|@floating>@ <|@
tid j311 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i369 
=== Succesors ===
=== Usages ===
v493 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i369  <|@  <|@
f <@~|@floating>@ <|@
tid v493 <|@
result [v1|QWORD[.] + v51|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j311 
=== Succesors ===
=== Usages ===
i472 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j311  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i472 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v493 
lastLocationAccess: - 
=== Succesors ===
next: i473 
=== Usages ===
i312 
=== Predecessor ===
i471 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v493 lastLocationAccess: - #next: i473  <|@  <|@
f <@~|@floating>@ <|@
tid i370 <|@
result int[11|0xb] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 11
stableDimension: 0
stamp: i32 [11]
stampKind: i32
value: int[11|0xb]
=== Inputs ===
=== Succesors ===
=== Usages ===
i371 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i371 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i370 
=== Succesors ===
=== Usages ===
j320 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i370  <|@  <|@
f <@~|@floating>@ <|@
tid j320 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i371 
=== Succesors ===
=== Usages ===
v494 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i371  <|@  <|@
f <@~|@floating>@ <|@
tid v494 <|@
result [v1|QWORD[.] + v53|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j320 
=== Succesors ===
=== Usages ===
i473 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j320  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i473 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v494 
lastLocationAccess: - 
=== Succesors ===
next: i474 
=== Usages ===
i321 
=== Predecessor ===
i472 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v494 lastLocationAccess: - #next: i474  <|@  <|@
f <@~|@floating>@ <|@
tid i372 <|@
result int[12|0xc] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 12
stableDimension: 0
stamp: i32 [12]
stampKind: i32
value: int[12|0xc]
=== Inputs ===
=== Succesors ===
=== Usages ===
i373 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i373 <|@
result v55|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i372 
=== Succesors ===
=== Usages ===
j331 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i372  <|@  <|@
f <@~|@floating>@ <|@
tid j331 <|@
result v55|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i373 
=== Succesors ===
=== Usages ===
v495 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i373  <|@  <|@
f <@~|@floating>@ <|@
tid v495 <|@
result [v1|QWORD[.] + v55|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j331 
=== Succesors ===
=== Usages ===
i474 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j331  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i474 <|@
result v56|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v495 
lastLocationAccess: - 
=== Succesors ===
next: i475 
=== Usages ===
i332 
=== Predecessor ===
i473 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v495 lastLocationAccess: - #next: i475  <|@  <|@
f <@~|@floating>@ <|@
tid i374 <|@
result int[13|0xd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 13
stableDimension: 0
stamp: i32 [13]
stampKind: i32
value: int[13|0xd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i375 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i375 <|@
result v57|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i374 
=== Succesors ===
=== Usages ===
j340 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i374  <|@  <|@
f <@~|@floating>@ <|@
tid j340 <|@
result v57|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i375 
=== Succesors ===
=== Usages ===
v496 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i375  <|@  <|@
f <@~|@floating>@ <|@
tid v496 <|@
result [v1|QWORD[.] + v57|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j340 
=== Succesors ===
=== Usages ===
i475 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j340  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i475 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v496 
lastLocationAccess: - 
=== Succesors ===
next: i476 
=== Usages ===
i341 
=== Predecessor ===
i474 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v496 lastLocationAccess: - #next: i476  <|@  <|@
f <@~|@floating>@ <|@
tid i376 <|@
result int[14|0xe] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 14
stableDimension: 0
stamp: i32 [14]
stampKind: i32
value: int[14|0xe]
=== Inputs ===
=== Succesors ===
=== Usages ===
i377 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i377 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i376 
=== Succesors ===
=== Usages ===
j349 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i376  <|@  <|@
f <@~|@floating>@ <|@
tid j349 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i377 
=== Succesors ===
=== Usages ===
v497 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i377  <|@  <|@
f <@~|@floating>@ <|@
tid v497 <|@
result [v1|QWORD[.] + v59|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j349 
=== Succesors ===
=== Usages ===
i476 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j349  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i476 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v497 
lastLocationAccess: - 
=== Succesors ===
next: i477 
=== Usages ===
i350 
=== Predecessor ===
i475 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v497 lastLocationAccess: - #next: i477  <|@  <|@
f <@~|@floating>@ <|@
tid i378 <|@
result int[15|0xf] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 15
stableDimension: 0
stamp: i32 [15]
stampKind: i32
value: int[15|0xf]
=== Inputs ===
=== Succesors ===
=== Usages ===
i379 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i379 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i378 
=== Succesors ===
=== Usages ===
j358 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i378  <|@  <|@
f <@~|@floating>@ <|@
tid j358 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i379 
=== Succesors ===
=== Usages ===
v498 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i379  <|@  <|@
f <@~|@floating>@ <|@
tid v498 <|@
result [v1|QWORD[.] + v61|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j358 
=== Succesors ===
=== Usages ===
i477 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j358  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i477 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v498 
lastLocationAccess: - 
=== Succesors ===
next: v124 
=== Usages ===
i359 
=== Predecessor ===
i476 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v498 lastLocationAccess: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
result v62|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i127 
y: i30 
=== Succesors ===
=== Usages ===
i126 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i127 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i125 
y: i127 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i125 y: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i133 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i462 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i462  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i126 
y: i133 
=== Succesors ===
=== Usages ===
i178 i177 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i126 y: i133  <|@  <|@
f <@~|@floating>@ <|@
tid i177 <|@
result v65|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i122 
y: i30 
=== Succesors ===
=== Usages ===
i178 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i122 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i177 
y: i122 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i177 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid i183 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i463 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i463  <|@  <|@
f <@~|@floating>@ <|@
tid i174 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i178 
y: i183 
=== Succesors ===
=== Usages ===
i202 i201 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i178 y: i183  <|@  <|@
f <@~|@floating>@ <|@
tid i201 <|@
result v68|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i174 
y: i30 
=== Succesors ===
=== Usages ===
i202 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i174 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i202 <|@
result v69|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i201 
y: i174 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i201 y: i174  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i464 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i464  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
result v70|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i202 
y: i207 
=== Succesors ===
=== Usages ===
i211 i212 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i202 y: i207  <|@  <|@
f <@~|@floating>@ <|@
tid i211 <|@
result v71|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i198 
y: i30 
=== Succesors ===
=== Usages ===
i212 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i198 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
result v72|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i211 
y: i198 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i211 y: i198  <|@  <|@
f <@~|@floating>@ <|@
tid i217 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i465 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i465  <|@  <|@
f <@~|@floating>@ <|@
tid i210 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i212 
y: i217 
=== Succesors ===
=== Usages ===
i233 i232 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i212 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
result v74|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i210 
y: i30 
=== Succesors ===
=== Usages ===
i233 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i210 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i233 <|@
result v75|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i232 
y: i210 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i232 y: i210  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i466 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i466  <|@  <|@
f <@~|@floating>@ <|@
tid i229 <|@
result v76|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i233 
y: i238 
=== Succesors ===
=== Usages ===
i242 i243 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i233 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
result v77|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i229 
y: i30 
=== Succesors ===
=== Usages ===
i243 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i229 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i243 <|@
result v78|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i242 
y: i229 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i242 y: i229  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i467 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i467  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i243 
y: i248 
=== Succesors ===
=== Usages ===
i252 i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i243 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
result v80|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i241 
y: i30 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i241 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i253 <|@
result v81|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i252 
y: i241 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i252 y: i241  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i468 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i468  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
result v82|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i253 
y: i258 
=== Succesors ===
=== Usages ===
i261 i262 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
result v83|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i251 
y: i30 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i251 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
result v84|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i251 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i251  <|@  <|@
f <@~|@floating>@ <|@
tid i267 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i469 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i469  <|@  <|@
f <@~|@floating>@ <|@
tid i260 <|@
result v85|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i262 
y: i267 
=== Succesors ===
=== Usages ===
i287 i286 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i267  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
result v86|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i260 
y: i30 
=== Succesors ===
=== Usages ===
i287 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i260 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i287 <|@
result v87|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i286 
y: i260 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i286 y: i260  <|@  <|@
f <@~|@floating>@ <|@
tid i292 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i470 
=== Succesors ===
=== Usages ===
i283 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i470  <|@  <|@
f <@~|@floating>@ <|@
tid i283 <|@
result v88|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i287 
y: i292 
=== Succesors ===
=== Usages ===
i296 i297 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i287 y: i292  <|@  <|@
f <@~|@floating>@ <|@
tid i296 <|@
result v89|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i283 
y: i30 
=== Succesors ===
=== Usages ===
i297 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i283 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i297 <|@
result v90|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i296 
y: i283 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i296 y: i283  <|@  <|@
f <@~|@floating>@ <|@
tid i302 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i471 
=== Succesors ===
=== Usages ===
i295 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i471  <|@  <|@
f <@~|@floating>@ <|@
tid i295 <|@
result v91|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i297 
y: i302 
=== Succesors ===
=== Usages ===
i306 i307 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i297 y: i302  <|@  <|@
f <@~|@floating>@ <|@
tid i306 <|@
result v92|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i295 
y: i30 
=== Succesors ===
=== Usages ===
i307 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i295 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i307 <|@
result v93|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i306 
y: i295 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i306 y: i295  <|@  <|@
f <@~|@floating>@ <|@
tid i312 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i472 
=== Succesors ===
=== Usages ===
i305 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i472  <|@  <|@
f <@~|@floating>@ <|@
tid i305 <|@
result v94|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i307 
y: i312 
=== Succesors ===
=== Usages ===
i315 i316 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i307 y: i312  <|@  <|@
f <@~|@floating>@ <|@
tid i315 <|@
result v95|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i305 
y: i30 
=== Succesors ===
=== Usages ===
i316 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i305 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
result v96|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i315 
y: i305 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i315 y: i305  <|@  <|@
f <@~|@floating>@ <|@
tid i321 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i473 
=== Succesors ===
=== Usages ===
i314 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i473  <|@  <|@
f <@~|@floating>@ <|@
tid i314 <|@
result v97|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i316 
y: i321 
=== Succesors ===
=== Usages ===
i326 i327 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i316 y: i321  <|@  <|@
f <@~|@floating>@ <|@
tid i326 <|@
result v98|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i314 
y: i30 
=== Succesors ===
=== Usages ===
i327 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i314 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i327 <|@
result v99|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i326 
y: i314 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i326 y: i314  <|@  <|@
f <@~|@floating>@ <|@
tid i332 <|@
result v56|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i474 
=== Succesors ===
=== Usages ===
i325 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i474  <|@  <|@
f <@~|@floating>@ <|@
tid i325 <|@
result v100|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i327 
y: i332 
=== Succesors ===
=== Usages ===
i335 i336 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i327 y: i332  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
result v101|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i325 
y: i30 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i325 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
result v102|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i335 
y: i325 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i335 y: i325  <|@  <|@
f <@~|@floating>@ <|@
tid i341 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i475 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i475  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
result v103|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i336 
y: i341 
=== Succesors ===
=== Usages ===
i344 i345 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i336 y: i341  <|@  <|@
f <@~|@floating>@ <|@
tid i344 <|@
result v104|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i334 
y: i30 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i334 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i345 <|@
result v105|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i344 
y: i334 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i344 y: i334  <|@  <|@
f <@~|@floating>@ <|@
tid i350 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i476 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i476  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
result v106|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i345 
y: i350 
=== Succesors ===
=== Usages ===
i353 i354 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i345 y: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i353 <|@
result v107|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i343 
y: i30 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i343 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
result v108|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i353 
y: i343 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i353 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i359 <|@
result v109|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i477 
=== Succesors ===
=== Usages ===
i352 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i477  <|@  <|@
f <@~|@floating>@ <|@
tid i352 <|@
result v110|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i354 
y: i359 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i354 y: i359  <|@  <|@
f <@~|@floating>@ <|@
tid i365 <|@
result int[16|0x10] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16]
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
i380 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i380 <|@
result v111|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i365 
=== Succesors ===
=== Usages ===
i128 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i365  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v117 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i477 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v117  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v117 
=== Succesors ===
next: v159 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v117 #next: v159  <|@  <|@
f <@*|@fixed>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
v119 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i150 <|@
result v112|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i127 i145 
=== Succesors ===
=== Usages ===
i148 i149 i51 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i127 i145  <|@  <|@
f <@~|@floating>@ <|@
tid i151 <|@
result v113|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i128 i146 
=== Succesors ===
=== Usages ===
v141 i146 j155 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i128 i146  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 31.268123583065343
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v159 
=== Succesors ===
next: v144 
=== Usages ===
v142 v147 i150 i151 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v159 #next: v144  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i6 
=== Succesors ===
=== Usages ===
v144 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i151 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v141 
=== Succesors ===
trueSuccessor: v143 
falseSuccessor: v142 
=== Usages ===
=== Predecessor ===
v140 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v141 #trueSuccessor: v143 #falseSuccessor: v142  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v143 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i478 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i478  <|@  <|@
f <@~|@floating>@ <|@
tid j155 <|@
result v113|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i151 
=== Succesors ===
=== Usages ===
v483 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v483 <|@
result [v1|QWORD[.] + v113|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j155 
=== Succesors ===
=== Usages ===
i478 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i478 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v483 
lastLocationAccess: - 
=== Succesors ===
next: v147 
=== Usages ===
i156 
=== Predecessor ===
v143 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v483 lastLocationAccess: - #next: v147  <|@  <|@
f <@~|@floating>@ <|@
tid i148 <|@
result v114|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i150 
y: i30 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i150 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i149 <|@
result v115|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i148 
y: i150 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i148 y: i150  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
result v116|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i478 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i478  <|@  <|@
f <@~|@floating>@ <|@
tid i145 <|@
result v117|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i149 
y: i156 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i149 y: i156  <|@  <|@
f <@~|@floating>@ <|@
tid i146 <|@
result v118|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i151 
y: i26 
=== Succesors ===
=== Usages ===
i151 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i151 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v140 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i478 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v140  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v140 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v140 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v142 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v437 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v437  <|@  <|@
f <@~|@floating>@ <|@
tid j430 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j432 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i438 <|@
result int[-15643|0xffffffffffffc2e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -15643
stableDimension: 0
stamp: i32 [-15643]
stampKind: i32
value: int[-15643|0xffffffffffffc2e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i431 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v437 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v427 
=== Predecessor ===
v114 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i431 <|@
result v119|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-18715 - -15643] bits:1...1xxx0x1011100101
valueDescription: i32
=== Inputs ===
merge: v427 
values: i435 i438 i435 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: i435 i438 i435  <|@  <|@
f <@~|@floating>@ <|@
tid j432 <|@
result v120|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v427 
values: j436 j430 j436 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v427 values: j436 j430 j436  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v427 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v434 v437 v458 
=== Succesors ===
next: v433 
=== Usages ===
i431 j432 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v434 v437 v458 #next: v433  <|@  <|@
f <@*|@fixed>@ <|@
tid v433 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i431 
speculation: j432 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v427 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i431 speculation: j432  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v35 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i51 <|@
result v121|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v46 
values: i150 i1 
=== Succesors ===
=== Usages ===
v29 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v46 values: i150 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v47 v48 
=== Succesors ===
next: v29 
=== Usages ===
i51 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v47 v48 #next: v29  <|@  <|@
f <@*|@fixed>@ <|@
tid v29 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v46 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGTSlowdown"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr  558  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr  652  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr  558  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr  652  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v121|d [0, 1[[740, 742[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 32[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 30[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 24[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 28[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 34[ "NoSpillStore"
  v0|d DWORD "[v0|d]" v0|d rsi|d [28, 173[[744, 753[[754, 805[28 MustHaveRegister 170 MustHaveRegister 172 ShouldHaveRegister 752 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|q [30, 712[[754, 805[30 MustHaveRegister 54 MustHaveRegister 174 MustHaveRegister 220 MustHaveRegister 227 LiveAtLoopEnd 498 MustHaveRegister 502 MustHaveRegister 506 MustHaveRegister 510 MustHaveRegister 514 MustHaveRegister 518 MustHaveRegister 522 MustHaveRegister 526 MustHaveRegister 530 MustHaveRegister 534 MustHaveRegister 538 MustHaveRegister 542 MustHaveRegister 546 MustHaveRegister 550 MustHaveRegister 554 MustHaveRegister 652 MustHaveRegister 659 LiveAtLoopEnd 704 MustHaveRegister 711 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|d [32, 178[[754, 805[32 MustHaveRegister 36 ShouldHaveRegister 38 ShouldHaveRegister 56 ShouldHaveRegister 138 ShouldHaveRegister 168 ShouldHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d r8|d [34, 140[[754, 805[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d v2|d [36, 712[36 MustHaveRegister 38 MustHaveRegister 58 MustHaveRegister 94 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister 248 MustHaveRegister 250 ShouldHaveRegister 680 MustHaveRegister 711 LiveAtLoopEnd  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [54, 138[54 MustHaveRegister 102 ShouldHaveRegister 116 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d v2|d [56, 185[56 MustHaveRegister 58 ShouldHaveRegister 92 ShouldHaveRegister 94 ShouldHaveRegister 116 ShouldHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[v7|q]" v7|q -1 [92, 98[92 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d v4|d [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q -1 [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[v10|q]" v10|q v7|q [98, 100[98 MustHaveRegister 100 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q v10|q [100, 104[100 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[v12|q]" v12|q v5|d [102, 104[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[v13|q]" v13|q -1 [168, 174[168 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d v0|d [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[v15|d]" v15|d v14|d [172, 176[172 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d -1 [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[v17|d]" v17|d v15|d [176, 185[176 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[v18|d]" v18|d -1 [178, 183[178 MustHaveRegister 180 ShouldHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[v19|d]" v19|d v4|d [182, 228[182 MustHaveRegister 196 MustHaveRegister 227 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[v20|d]" v20|d v6|d [186, 224[[228, 257[196 ShouldHaveRegister 220 MustHaveRegister 224 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[v21|d]" v21|d v17|d [186, 219[[228, 257[216 MustHaveRegister 218 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[v22|d]" v22|d v21|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[v23|d]" v23|d v22|d [218, 222[218 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[v24|d]" v24|d -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[v25|d]" v25|d v23|d [222, 227[222 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[v26|d]" v26|d v20|d [224, 227[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[v27|d]" v27|d -1 [248, 254[248 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d v27|d [254, 660[254 MustHaveRegister 268 MustHaveRegister 659 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d -1 [252, 255[252 MustHaveRegister 254 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d v21|d [258, 561[[660, 669[558 MustHaveRegister 560 ShouldHaveRegister 668 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d v20|d [258, 656[[660, 669[268 ShouldHaveRegister 498 MustHaveRegister 500 ShouldHaveRegister 504 MustHaveRegister 508 MustHaveRegister 512 MustHaveRegister 516 MustHaveRegister 520 MustHaveRegister 524 MustHaveRegister 528 MustHaveRegister 532 MustHaveRegister 536 MustHaveRegister 540 MustHaveRegister 544 MustHaveRegister 548 MustHaveRegister 552 MustHaveRegister 556 MustHaveRegister 656 MustHaveRegister 668 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[v32|d]" v32|d -1 [498, 562[498 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d v31|d [500, 502[500 MustHaveRegister 502 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[v34|d]" v34|d -1 [502, 568[502 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d -1 [504, 506[504 MustHaveRegister 506 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[v36|d]" v36|d -1 [506, 574[506 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d -1 [508, 510[508 MustHaveRegister 510 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d -1 [510, 580[510 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d -1 [514, 586[514 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d -1 [516, 518[516 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d -1 [518, 592[518 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [520, 522[520 MustHaveRegister 522 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[v44|d]" v44|d -1 [522, 598[522 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d -1 [524, 526[524 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d -1 [526, 604[526 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d -1 [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d -1 [530, 610[530 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d -1 [532, 534[532 MustHaveRegister 534 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d -1 [534, 616[534 MustHaveRegister 616 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d -1 [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[v52|d]" v52|d -1 [538, 622[538 MustHaveRegister 622 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[v53|d]" v53|d -1 [540, 542[540 MustHaveRegister 542 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[v54|d]" v54|d -1 [542, 628[542 MustHaveRegister 628 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[v55|d]" v55|d -1 [544, 546[544 MustHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[v56|d]" v56|d -1 [546, 634[546 MustHaveRegister 634 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[v57|d]" v57|d -1 [548, 550[548 MustHaveRegister 550 MustHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d -1 [550, 640[550 MustHaveRegister 640 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d -1 [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d -1 [554, 646[554 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d -1 [556, 652[556 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[v62|d]" v62|d v30|d [558, 560[558 MustHaveRegister 560 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v62|d [560, 562[560 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d v63|d [562, 567[562 MustHaveRegister 564 MustHaveRegister 566 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[v65|d]" v65|d v64|d [564, 566[564 MustHaveRegister 566 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d v65|d [566, 568[566 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[v67|d]" v67|d v66|d [568, 573[568 MustHaveRegister 570 MustHaveRegister 572 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[v68|d]" v68|d v67|d [570, 572[570 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[v69|d]" v69|d v68|d [572, 574[572 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[v70|d]" v70|d v69|d [574, 579[574 MustHaveRegister 576 MustHaveRegister 578 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[v71|d]" v71|d v70|d [576, 578[576 MustHaveRegister 578 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[v72|d]" v72|d v71|d [578, 580[578 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[v73|d]" v73|d v72|d [580, 585[580 MustHaveRegister 582 MustHaveRegister 584 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[v74|d]" v74|d v73|d [582, 584[582 MustHaveRegister 584 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[v75|d]" v75|d v74|d [584, 586[584 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[v76|d]" v76|d v75|d [586, 591[586 MustHaveRegister 588 MustHaveRegister 590 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[v77|d]" v77|d v76|d [588, 590[588 MustHaveRegister 590 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[v78|d]" v78|d v77|d [590, 592[590 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[v79|d]" v79|d v78|d [592, 597[592 MustHaveRegister 594 MustHaveRegister 596 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[v80|d]" v80|d v79|d [594, 596[594 MustHaveRegister 596 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[v81|d]" v81|d v80|d [596, 598[596 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[v82|d]" v82|d v81|d [598, 603[598 MustHaveRegister 600 MustHaveRegister 602 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[v83|d]" v83|d v82|d [600, 602[600 MustHaveRegister 602 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[v84|d]" v84|d v83|d [602, 604[602 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[v85|d]" v85|d v84|d [604, 609[604 MustHaveRegister 606 MustHaveRegister 608 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[v86|d]" v86|d v85|d [606, 608[606 MustHaveRegister 608 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[v87|d]" v87|d v86|d [608, 610[608 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[v88|d]" v88|d v87|d [610, 615[610 MustHaveRegister 612 MustHaveRegister 614 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[v89|d]" v89|d v88|d [612, 614[612 MustHaveRegister 614 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[v90|d]" v90|d v89|d [614, 616[614 MustHaveRegister 616 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[v91|d]" v91|d v90|d [616, 621[616 MustHaveRegister 618 MustHaveRegister 620 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[v92|d]" v92|d v91|d [618, 620[618 MustHaveRegister 620 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[v93|d]" v93|d v92|d [620, 622[620 MustHaveRegister 622 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[v94|d]" v94|d v93|d [622, 627[622 MustHaveRegister 624 MustHaveRegister 626 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[v95|d]" v95|d v94|d [624, 626[624 MustHaveRegister 626 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[v96|d]" v96|d v95|d [626, 628[626 MustHaveRegister 628 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[v97|d]" v97|d v96|d [628, 633[628 MustHaveRegister 630 MustHaveRegister 632 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[v98|d]" v98|d v97|d [630, 632[630 MustHaveRegister 632 MustHaveRegister  "NoSpillStore"
  v99|d DWORD "[v99|d]" v99|d v98|d [632, 634[632 MustHaveRegister 634 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[v100|d]" v100|d v99|d [634, 639[634 MustHaveRegister 636 MustHaveRegister 638 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[v101|d]" v101|d v100|d [636, 638[636 MustHaveRegister 638 MustHaveRegister  "NoSpillStore"
  v102|d DWORD "[v102|d]" v102|d v101|d [638, 640[638 MustHaveRegister 640 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[v103|d]" v103|d v102|d [640, 645[640 MustHaveRegister 642 MustHaveRegister 644 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[v104|d]" v104|d v103|d [642, 644[642 MustHaveRegister 644 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[v105|d]" v105|d v104|d [644, 646[644 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[v106|d]" v106|d v105|d [646, 651[646 MustHaveRegister 648 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[v107|d]" v107|d v106|d [648, 650[648 MustHaveRegister 650 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[v108|d]" v108|d v107|d [650, 654[650 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[v109|d]" v109|d -1 [652, 654[652 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[v110|d]" v110|d v108|d [654, 659[654 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[v111|d]" v111|d -1 [656, 659[656 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[v112|d]" v112|d v30|d [670, 703[[712, 721[700 MustHaveRegister 702 ShouldHaveRegister 720 ShouldHaveRegister  "NoSpillStore"
  v113|d DWORD "[v113|d]" v113|d v31|d [670, 708[680 ShouldHaveRegister 704 MustHaveRegister 708 ShouldHaveRegister  "NoSpillStore"
  v114|d DWORD "[v114|d]" v114|d v112|d [700, 702[700 MustHaveRegister 702 MustHaveRegister  "NoSpillStore"
  v115|d DWORD "[v115|d]" v115|d v114|d [702, 706[702 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v116|d DWORD "[v116|d]" v116|d -1 [704, 706[704 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v117|d DWORD "[v117|d]" v117|d v115|d [706, 711[706 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v118|d DWORD "[v118|d]" v118|d v113|d [708, 711[708 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v119|d DWORD "[v119|d]" v119|d -1 [784, 800[800 MustHaveRegister  "NoSpillStore"
  v120|q QWORD "[v120|q]" v120|q -1 [784, 802[802 MustHaveRegister  "NoSpillStore"
  v121|d DWORD "[v121|d]" v121|d v112|d [722, 740[740 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v121|d [0, 1[[740, 742[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 32[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 30[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 24[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 28[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 34[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [28, 173[[744, 753[[754, 805[28 MustHaveRegister 170 MustHaveRegister 172 ShouldHaveRegister 752 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [30, 555[30 MustHaveRegister 54 MustHaveRegister 174 MustHaveRegister 220 MustHaveRegister 227 LiveAtLoopEnd 498 MustHaveRegister 502 MustHaveRegister 506 MustHaveRegister 510 MustHaveRegister 514 MustHaveRegister 518 MustHaveRegister 522 MustHaveRegister 526 MustHaveRegister 530 MustHaveRegister 534 MustHaveRegister 538 MustHaveRegister 542 MustHaveRegister 546 MustHaveRegister 550 MustHaveRegister 554 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [32, 178[[754, 805[32 MustHaveRegister 36 ShouldHaveRegister 38 ShouldHaveRegister 56 ShouldHaveRegister 138 ShouldHaveRegister 168 ShouldHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [34, 140[[754, 805[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [36, 258[36 MustHaveRegister 38 MustHaveRegister 58 MustHaveRegister 94 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister 248 MustHaveRegister 250 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [54, 138[54 MustHaveRegister 102 ShouldHaveRegister 116 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [56, 185[56 MustHaveRegister 58 ShouldHaveRegister 92 ShouldHaveRegister 94 ShouldHaveRegister 116 ShouldHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [92, 98[92 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [98, 100[98 MustHaveRegister 100 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [100, 104[100 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q v5|d [102, 104[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[r10|q]" v13|q -1 [168, 174[168 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r8|d]" v14|d v0|d [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d v14|d [172, 176[172 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d -1 [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d v15|d [176, 185[176 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[r10|d]" v18|d -1 [178, 183[178 MustHaveRegister 180 ShouldHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d v4|d [182, 228[182 MustHaveRegister 196 MustHaveRegister 227 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[r11|d]" v20|d v6|d [186, 224[[228, 257[196 ShouldHaveRegister 220 MustHaveRegister 224 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v17|d [186, 219[[228, 257[216 MustHaveRegister 218 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d v22|d [218, 222[218 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d v23|d [222, 227[222 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r11|d]" v26|d v20|d [224, 227[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [248, 254[248 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v27|d [254, 270[254 MustHaveRegister 268 MustHaveRegister  "SpillInDominator"
  v29|d DWORD "[r9|d]" v29|d -1 [252, 255[252 MustHaveRegister 254 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v21|d [258, 561[[660, 669[558 MustHaveRegister 560 ShouldHaveRegister 668 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r11|d]" v31|d v20|d [258, 557[268 ShouldHaveRegister 498 MustHaveRegister 500 ShouldHaveRegister 504 MustHaveRegister 508 MustHaveRegister 512 MustHaveRegister 516 MustHaveRegister 520 MustHaveRegister 524 MustHaveRegister 528 MustHaveRegister 532 MustHaveRegister 536 MustHaveRegister 540 MustHaveRegister 544 MustHaveRegister 548 MustHaveRegister 552 MustHaveRegister 556 MustHaveRegister  "OneSpillStore"
  v32|d DWORD "[r9|d]" v32|d -1 [498, 562[498 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rcx|d]" v33|d v31|d [500, 502[500 MustHaveRegister 502 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rcx|d]" v34|d -1 [502, 568[502 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [504, 506[504 MustHaveRegister 506 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbx|d]" v36|d -1 [506, 574[506 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [508, 510[508 MustHaveRegister 510 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdi|d]" v38|d -1 [510, 580[510 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rsi|d]" v40|d -1 [514, 586[514 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[rbp|d]" v41|d -1 [516, 518[516 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbp|d]" v42|d -1 [518, 592[518 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[r13|d]" v43|d -1 [520, 522[520 MustHaveRegister 522 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r13|d]" v44|d -1 [522, 598[522 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r14|d]" v45|d -1 [524, 526[524 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[r14|d]" v46|d -1 [526, 604[526 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d -1 [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d -1 [530, 610[530 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r10|d]" v49|d -1 [532, 534[532 MustHaveRegister 534 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r10|d]" v50|d -1 [534, 535[534 MustHaveRegister  "OneSpillStore"
  v51|d DWORD "[r10|d]" v51|d -1 [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[r10|d]" v52|d -1 [538, 539[538 MustHaveRegister  "OneSpillStore"
  v53|d DWORD "[r10|d]" v53|d -1 [540, 542[540 MustHaveRegister 542 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r10|d]" v54|d -1 [542, 543[542 MustHaveRegister  "OneSpillStore"
  v55|d DWORD "[r10|d]" v55|d -1 [544, 546[544 MustHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r10|d]" v56|d -1 [546, 547[546 MustHaveRegister  "OneSpillStore"
  v57|d DWORD "[r10|d]" v57|d -1 [548, 550[548 MustHaveRegister 550 MustHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d -1 [550, 551[550 MustHaveRegister  "OneSpillStore"
  v59|d DWORD "[r10|d]" v59|d -1 [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r10|d]" v60|d -1 [554, 646[554 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[rdx|d]" v61|d -1 [556, 652[556 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r11|d]" v62|d v30|d [558, 560[558 MustHaveRegister 560 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[r11|d]" v63|d v62|d [560, 562[560 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r11|d]" v64|d v63|d [562, 567[562 MustHaveRegister 564 MustHaveRegister 566 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v64|d [564, 566[564 MustHaveRegister 566 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [566, 568[566 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [568, 573[568 MustHaveRegister 570 MustHaveRegister 572 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[r11|d]" v68|d v67|d [570, 572[570 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r11|d]" v69|d v68|d [572, 574[572 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r11|d]" v70|d v69|d [574, 579[574 MustHaveRegister 576 MustHaveRegister 578 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[r8|d]" v71|d v70|d [576, 578[576 MustHaveRegister 578 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v71|d [578, 580[578 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d v72|d [580, 585[580 MustHaveRegister 582 MustHaveRegister 584 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r11|d]" v74|d v73|d [582, 584[582 MustHaveRegister 584 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r11|d]" v75|d v74|d [584, 586[584 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r11|d]" v76|d v75|d [586, 591[586 MustHaveRegister 588 MustHaveRegister 590 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[r8|d]" v77|d v76|d [588, 590[588 MustHaveRegister 590 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[r8|d]" v78|d v77|d [590, 592[590 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d v78|d [592, 597[592 MustHaveRegister 594 MustHaveRegister 596 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[r11|d]" v80|d v79|d [594, 596[594 MustHaveRegister 596 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r11|d]" v81|d v80|d [596, 598[596 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r11|d]" v82|d v81|d [598, 603[598 MustHaveRegister 600 MustHaveRegister 602 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[r8|d]" v83|d v82|d [600, 602[600 MustHaveRegister 602 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[r8|d]" v84|d v83|d [602, 604[602 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[r8|d]" v85|d v84|d [604, 609[604 MustHaveRegister 606 MustHaveRegister 608 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[r11|d]" v86|d v85|d [606, 608[606 MustHaveRegister 608 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[r11|d]" v87|d v86|d [608, 610[608 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r11|d]" v88|d v87|d [610, 615[610 MustHaveRegister 612 MustHaveRegister 614 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[rax|d]" v89|d v88|d [612, 614[612 MustHaveRegister 614 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rax|d]" v90|d v89|d [614, 616[614 MustHaveRegister 616 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [616, 621[616 MustHaveRegister 618 MustHaveRegister 620 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[r11|d]" v92|d v91|d [618, 620[618 MustHaveRegister 620 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[r11|d]" v93|d v92|d [620, 622[620 MustHaveRegister 622 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[r11|d]" v94|d v93|d [622, 627[622 MustHaveRegister 624 MustHaveRegister 626 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[rax|d]" v95|d v94|d [624, 626[624 MustHaveRegister 626 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[rax|d]" v96|d v95|d [626, 628[626 MustHaveRegister 628 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[rax|d]" v97|d v96|d [628, 633[628 MustHaveRegister 630 MustHaveRegister 632 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r11|d]" v98|d v97|d [630, 632[630 MustHaveRegister 632 MustHaveRegister  "NoSpillStore"
  v99|d DWORD "[r11|d]" v99|d v98|d [632, 634[632 MustHaveRegister 634 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[r11|d]" v100|d v99|d [634, 639[634 MustHaveRegister 636 MustHaveRegister 638 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[rax|d]" v101|d v100|d [636, 638[636 MustHaveRegister 638 MustHaveRegister  "NoSpillStore"
  v102|d DWORD "[rax|d]" v102|d v101|d [638, 640[638 MustHaveRegister 640 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[rax|d]" v103|d v102|d [640, 645[640 MustHaveRegister 642 MustHaveRegister 644 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r11|d]" v104|d v103|d [642, 644[642 MustHaveRegister 644 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[r11|d]" v105|d v104|d [644, 646[644 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[r11|d]" v106|d v105|d [646, 651[646 MustHaveRegister 648 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[rax|d]" v107|d v106|d [648, 650[648 MustHaveRegister 650 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[rax|d]" v108|d v107|d [650, 654[650 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[r11|d]" v109|d -1 [652, 654[652 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[rax|d]" v110|d v108|d [654, 659[654 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[r11|d]" v111|d -1 [656, 659[656 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[r8|d]" v112|d v30|d [670, 703[[712, 721[700 MustHaveRegister 702 ShouldHaveRegister 720 ShouldHaveRegister  "NoSpillStore"
  v113|d DWORD "[r11|d]" v113|d v31|d [670, 708[680 ShouldHaveRegister 704 MustHaveRegister 708 ShouldHaveRegister  "NoSpillStore"
  v114|d DWORD "[r9|d]" v114|d v112|d [700, 702[700 MustHaveRegister 702 MustHaveRegister  "NoSpillStore"
  v115|d DWORD "[r9|d]" v115|d v114|d [702, 706[702 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v116|d DWORD "[r8|d]" v116|d -1 [704, 706[704 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v117|d DWORD "[r9|d]" v117|d v115|d [706, 711[706 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v118|d DWORD "[r11|d]" v118|d v113|d [708, 711[708 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v119|d DWORD "[r11|d]" v119|d -1 [784, 800[800 MustHaveRegister  "NoSpillStore"
  v120|q QWORD "[r9|q]" v120|q -1 [784, 802[802 MustHaveRegister  "NoSpillStore"
  v121|d DWORD "[r8|d]" v121|d v112|d [722, 740[740 ShouldHaveRegister  "NoSpillStore"
  v122|d DWORD "[rax|d]" v4|d v4|d [670, 712[680 MustHaveRegister 711 LiveAtLoopEnd  "SpillInDominator"
  v123|d DWORD "[vstack:0|d]" v4|d v4|d [258, 670[ "SpillInDominator"
  v124|d DWORD "[vstack:1|d]" v28|d v28|d [270, 660[659 LiveAtLoopEnd  "SpillInDominator"
  v125|d DWORD "[vstack:2|d]" v50|d v50|d [535, 616[616 ShouldHaveRegister  "OneSpillStore"
  v126|d DWORD "[vstack:3|d]" v52|d v52|d [539, 622[622 ShouldHaveRegister  "OneSpillStore"
  v127|d DWORD "[vstack:4|d]" v54|d v54|d [543, 628[628 ShouldHaveRegister  "OneSpillStore"
  v128|d DWORD "[vstack:5|d]" v56|d v56|d [547, 634[634 ShouldHaveRegister  "OneSpillStore"
  v129|d DWORD "[vstack:6|d]" v58|d v58|d [551, 640[640 ShouldHaveRegister  "OneSpillStore"
  v130|q QWORD "[r10|q]" v1|q v1|q [651, 712[[754, 805[652 MustHaveRegister 659 LiveAtLoopEnd 704 MustHaveRegister 711 LiveAtLoopEnd  "SpillInDominator"
  v131|q QWORD "[vstack:7|q]" v1|q v1|q [555, 651[ "SpillInDominator"
  v132|d DWORD "[r11|d]" v31|d v31|d [655, 656[[660, 669[656 MustHaveRegister 668 ShouldHaveRegister  "OneSpillStore"
  v133|d DWORD "[vstack:8|d]" v31|d v31|d [557, 655[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = MOVE input: v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  536  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = MOVE input: v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v127|DWORD = MOVE input: v54|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v128|DWORD = MOVE input: v56|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  548  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|DWORD = MOVE input: v58|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  552  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v131|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  556  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v133|DWORD = MOVE input: v31|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v131|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  652  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v133|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  656  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v121|d [0, 1[[740, 742[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 32[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 30[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 24[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 28[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 34[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [28, 173[[744, 753[[754, 805[28 MustHaveRegister 170 MustHaveRegister 172 ShouldHaveRegister 752 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [30, 555[30 MustHaveRegister 54 MustHaveRegister 174 MustHaveRegister 220 MustHaveRegister 227 LiveAtLoopEnd 498 MustHaveRegister 502 MustHaveRegister 506 MustHaveRegister 510 MustHaveRegister 514 MustHaveRegister 518 MustHaveRegister 522 MustHaveRegister 526 MustHaveRegister 530 MustHaveRegister 534 MustHaveRegister 538 MustHaveRegister 542 MustHaveRegister 546 MustHaveRegister 550 MustHaveRegister 554 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [32, 178[[754, 805[32 MustHaveRegister 36 ShouldHaveRegister 38 ShouldHaveRegister 56 ShouldHaveRegister 138 ShouldHaveRegister 168 ShouldHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [34, 140[[754, 805[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [36, 258[36 MustHaveRegister 38 MustHaveRegister 58 MustHaveRegister 94 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister 248 MustHaveRegister 250 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [54, 138[54 MustHaveRegister 102 ShouldHaveRegister 116 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [56, 185[56 MustHaveRegister 58 ShouldHaveRegister 92 ShouldHaveRegister 94 ShouldHaveRegister 116 ShouldHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [92, 98[92 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [98, 100[98 MustHaveRegister 100 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [100, 104[100 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q v5|d [102, 104[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[r10|q]" v13|q -1 [168, 174[168 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r8|d]" v14|d v0|d [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d v14|d [172, 176[172 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d -1 [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d v15|d [176, 185[176 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[r10|d]" v18|d -1 [178, 183[178 MustHaveRegister 180 ShouldHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d v4|d [182, 228[182 MustHaveRegister 196 MustHaveRegister 227 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[r11|d]" v20|d v6|d [186, 224[[228, 257[196 ShouldHaveRegister 220 MustHaveRegister 224 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v17|d [186, 219[[228, 257[216 MustHaveRegister 218 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d v22|d [218, 222[218 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d v23|d [222, 227[222 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r11|d]" v26|d v20|d [224, 227[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [248, 254[248 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v27|d [254, 270[254 MustHaveRegister 268 MustHaveRegister  "StoreAtDefinition"
  v29|d DWORD "[r9|d]" v29|d -1 [252, 255[252 MustHaveRegister 254 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v21|d [258, 561[[660, 669[558 MustHaveRegister 560 ShouldHaveRegister 668 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r11|d]" v31|d v20|d [258, 557[268 ShouldHaveRegister 498 MustHaveRegister 500 ShouldHaveRegister 504 MustHaveRegister 508 MustHaveRegister 512 MustHaveRegister 516 MustHaveRegister 520 MustHaveRegister 524 MustHaveRegister 528 MustHaveRegister 532 MustHaveRegister 536 MustHaveRegister 540 MustHaveRegister 544 MustHaveRegister 548 MustHaveRegister 552 MustHaveRegister 556 MustHaveRegister  "OneSpillStore"
  v32|d DWORD "[r9|d]" v32|d -1 [498, 562[498 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rcx|d]" v33|d v31|d [500, 502[500 MustHaveRegister 502 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rcx|d]" v34|d -1 [502, 568[502 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [504, 506[504 MustHaveRegister 506 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbx|d]" v36|d -1 [506, 574[506 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [508, 510[508 MustHaveRegister 510 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdi|d]" v38|d -1 [510, 580[510 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rsi|d]" v40|d -1 [514, 586[514 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[rbp|d]" v41|d -1 [516, 518[516 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbp|d]" v42|d -1 [518, 592[518 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[r13|d]" v43|d -1 [520, 522[520 MustHaveRegister 522 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r13|d]" v44|d -1 [522, 598[522 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r14|d]" v45|d -1 [524, 526[524 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[r14|d]" v46|d -1 [526, 604[526 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d -1 [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d -1 [530, 610[530 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r10|d]" v49|d -1 [532, 534[532 MustHaveRegister 534 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r10|d]" v50|d -1 [534, 535[534 MustHaveRegister  "OneSpillStore"
  v51|d DWORD "[r10|d]" v51|d -1 [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[r10|d]" v52|d -1 [538, 539[538 MustHaveRegister  "OneSpillStore"
  v53|d DWORD "[r10|d]" v53|d -1 [540, 542[540 MustHaveRegister 542 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r10|d]" v54|d -1 [542, 543[542 MustHaveRegister  "OneSpillStore"
  v55|d DWORD "[r10|d]" v55|d -1 [544, 546[544 MustHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r10|d]" v56|d -1 [546, 547[546 MustHaveRegister  "OneSpillStore"
  v57|d DWORD "[r10|d]" v57|d -1 [548, 550[548 MustHaveRegister 550 MustHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d -1 [550, 551[550 MustHaveRegister  "OneSpillStore"
  v59|d DWORD "[r10|d]" v59|d -1 [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r10|d]" v60|d -1 [554, 646[554 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[rdx|d]" v61|d -1 [556, 652[556 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r11|d]" v62|d v30|d [558, 560[558 MustHaveRegister 560 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[r11|d]" v63|d v62|d [560, 562[560 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r11|d]" v64|d v63|d [562, 567[562 MustHaveRegister 564 MustHaveRegister 566 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v64|d [564, 566[564 MustHaveRegister 566 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [566, 568[566 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [568, 573[568 MustHaveRegister 570 MustHaveRegister 572 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[r11|d]" v68|d v67|d [570, 572[570 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r11|d]" v69|d v68|d [572, 574[572 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r11|d]" v70|d v69|d [574, 579[574 MustHaveRegister 576 MustHaveRegister 578 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[r8|d]" v71|d v70|d [576, 578[576 MustHaveRegister 578 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v71|d [578, 580[578 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d v72|d [580, 585[580 MustHaveRegister 582 MustHaveRegister 584 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r11|d]" v74|d v73|d [582, 584[582 MustHaveRegister 584 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r11|d]" v75|d v74|d [584, 586[584 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r11|d]" v76|d v75|d [586, 591[586 MustHaveRegister 588 MustHaveRegister 590 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[r8|d]" v77|d v76|d [588, 590[588 MustHaveRegister 590 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[r8|d]" v78|d v77|d [590, 592[590 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d v78|d [592, 597[592 MustHaveRegister 594 MustHaveRegister 596 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[r11|d]" v80|d v79|d [594, 596[594 MustHaveRegister 596 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r11|d]" v81|d v80|d [596, 598[596 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r11|d]" v82|d v81|d [598, 603[598 MustHaveRegister 600 MustHaveRegister 602 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[r8|d]" v83|d v82|d [600, 602[600 MustHaveRegister 602 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[r8|d]" v84|d v83|d [602, 604[602 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[r8|d]" v85|d v84|d [604, 609[604 MustHaveRegister 606 MustHaveRegister 608 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[r11|d]" v86|d v85|d [606, 608[606 MustHaveRegister 608 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[r11|d]" v87|d v86|d [608, 610[608 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r11|d]" v88|d v87|d [610, 615[610 MustHaveRegister 612 MustHaveRegister 614 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[rax|d]" v89|d v88|d [612, 614[612 MustHaveRegister 614 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rax|d]" v90|d v89|d [614, 616[614 MustHaveRegister 616 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [616, 621[616 MustHaveRegister 618 MustHaveRegister 620 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[r11|d]" v92|d v91|d [618, 620[618 MustHaveRegister 620 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[r11|d]" v93|d v92|d [620, 622[620 MustHaveRegister 622 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[r11|d]" v94|d v93|d [622, 627[622 MustHaveRegister 624 MustHaveRegister 626 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[rax|d]" v95|d v94|d [624, 626[624 MustHaveRegister 626 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[rax|d]" v96|d v95|d [626, 628[626 MustHaveRegister 628 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[rax|d]" v97|d v96|d [628, 633[628 MustHaveRegister 630 MustHaveRegister 632 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r11|d]" v98|d v97|d [630, 632[630 MustHaveRegister 632 MustHaveRegister  "NoSpillStore"
  v99|d DWORD "[r11|d]" v99|d v98|d [632, 634[632 MustHaveRegister 634 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[r11|d]" v100|d v99|d [634, 639[634 MustHaveRegister 636 MustHaveRegister 638 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[rax|d]" v101|d v100|d [636, 638[636 MustHaveRegister 638 MustHaveRegister  "NoSpillStore"
  v102|d DWORD "[rax|d]" v102|d v101|d [638, 640[638 MustHaveRegister 640 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[rax|d]" v103|d v102|d [640, 645[640 MustHaveRegister 642 MustHaveRegister 644 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r11|d]" v104|d v103|d [642, 644[642 MustHaveRegister 644 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[r11|d]" v105|d v104|d [644, 646[644 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[r11|d]" v106|d v105|d [646, 651[646 MustHaveRegister 648 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[rax|d]" v107|d v106|d [648, 650[648 MustHaveRegister 650 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[rax|d]" v108|d v107|d [650, 654[650 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[r11|d]" v109|d -1 [652, 654[652 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[rax|d]" v110|d v108|d [654, 659[654 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[r11|d]" v111|d -1 [656, 659[656 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[r8|d]" v112|d v30|d [670, 703[[712, 721[700 MustHaveRegister 702 ShouldHaveRegister 720 ShouldHaveRegister  "NoSpillStore"
  v113|d DWORD "[r11|d]" v113|d v31|d [670, 708[680 ShouldHaveRegister 704 MustHaveRegister 708 ShouldHaveRegister  "NoSpillStore"
  v114|d DWORD "[r9|d]" v114|d v112|d [700, 702[700 MustHaveRegister 702 MustHaveRegister  "NoSpillStore"
  v115|d DWORD "[r9|d]" v115|d v114|d [702, 706[702 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v116|d DWORD "[r8|d]" v116|d -1 [704, 706[704 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v117|d DWORD "[r9|d]" v117|d v115|d [706, 711[706 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v118|d DWORD "[r11|d]" v118|d v113|d [708, 711[708 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v119|d DWORD "[r11|d]" v119|d -1 [784, 800[800 MustHaveRegister  "NoSpillStore"
  v120|q QWORD "[r9|q]" v120|q -1 [784, 802[802 MustHaveRegister  "NoSpillStore"
  v121|d DWORD "[r8|d]" v121|d v112|d [722, 740[740 ShouldHaveRegister  "NoSpillStore"
  v122|d DWORD "[rax|d]" v4|d v4|d [670, 712[680 MustHaveRegister 711 LiveAtLoopEnd  "SpillInDominator"
  v123|d DWORD "[vstack:0|d]" v4|d v4|d [258, 670[ "SpillInDominator"
  v124|d DWORD "[vstack:1|d]" v28|d v28|d [270, 660[659 LiveAtLoopEnd  "StoreAtDefinition"
  v125|d DWORD "[vstack:2|d]" v50|d v50|d [535, 616[616 ShouldHaveRegister  "OneSpillStore"
  v126|d DWORD "[vstack:3|d]" v52|d v52|d [539, 622[622 ShouldHaveRegister  "OneSpillStore"
  v127|d DWORD "[vstack:4|d]" v54|d v54|d [543, 628[628 ShouldHaveRegister  "OneSpillStore"
  v128|d DWORD "[vstack:5|d]" v56|d v56|d [547, 634[634 ShouldHaveRegister  "OneSpillStore"
  v129|d DWORD "[vstack:6|d]" v58|d v58|d [551, 640[640 ShouldHaveRegister  "OneSpillStore"
  v130|q QWORD "[r10|q]" v1|q v1|q [651, 712[[754, 805[652 MustHaveRegister 659 LiveAtLoopEnd 704 MustHaveRegister 711 LiveAtLoopEnd  "SpillInDominator"
  v131|q QWORD "[vstack:7|q]" v1|q v1|q [555, 651[ "SpillInDominator"
  v132|d DWORD "[r11|d]" v31|d v31|d [655, 656[[660, 669[656 MustHaveRegister 668 ShouldHaveRegister  "OneSpillStore"
  v133|d DWORD "[vstack:8|d]" v31|d v31|d [557, 655[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = MOVE input: v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  536  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = MOVE input: v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v127|DWORD = MOVE input: v54|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v128|DWORD = MOVE input: v56|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  548  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|DWORD = MOVE input: v58|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  552  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v131|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  556  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v133|DWORD = MOVE input: v31|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v131|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  652  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v133|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  656  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [v110|DWORD, v111|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [v117|DWORD, v118|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [v112|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v121|d [0, 1[[740, 742[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 32[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 30[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 24[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 28[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 34[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [28, 173[[744, 753[[754, 805[28 MustHaveRegister 170 MustHaveRegister 172 ShouldHaveRegister 752 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [30, 555[30 MustHaveRegister 54 MustHaveRegister 174 MustHaveRegister 220 MustHaveRegister 227 LiveAtLoopEnd 498 MustHaveRegister 502 MustHaveRegister 506 MustHaveRegister 510 MustHaveRegister 514 MustHaveRegister 518 MustHaveRegister 522 MustHaveRegister 526 MustHaveRegister 530 MustHaveRegister 534 MustHaveRegister 538 MustHaveRegister 542 MustHaveRegister 546 MustHaveRegister 550 MustHaveRegister 554 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [32, 178[[754, 805[32 MustHaveRegister 36 ShouldHaveRegister 38 ShouldHaveRegister 56 ShouldHaveRegister 138 ShouldHaveRegister 168 ShouldHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [34, 140[[754, 805[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [36, 258[36 MustHaveRegister 38 MustHaveRegister 58 MustHaveRegister 94 MustHaveRegister 180 MustHaveRegister 182 ShouldHaveRegister 248 MustHaveRegister 250 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [54, 138[54 MustHaveRegister 102 ShouldHaveRegister 116 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [56, 185[56 MustHaveRegister 58 ShouldHaveRegister 92 ShouldHaveRegister 94 ShouldHaveRegister 116 ShouldHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [92, 98[92 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [98, 100[98 MustHaveRegister 100 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [100, 104[100 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q v5|d [102, 104[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[r10|q]" v13|q -1 [168, 174[168 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r8|d]" v14|d v0|d [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d v14|d [172, 176[172 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d -1 [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d v15|d [176, 185[176 MustHaveRegister 184 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[r10|d]" v18|d -1 [178, 183[178 MustHaveRegister 180 ShouldHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d v4|d [182, 228[182 MustHaveRegister 196 MustHaveRegister 227 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[r11|d]" v20|d v6|d [186, 224[[228, 257[196 ShouldHaveRegister 220 MustHaveRegister 224 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v17|d [186, 219[[228, 257[216 MustHaveRegister 218 ShouldHaveRegister 256 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d v22|d [218, 222[218 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d -1 [220, 222[220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d v23|d [222, 227[222 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r11|d]" v26|d v20|d [224, 227[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [248, 254[248 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v27|d [254, 270[254 MustHaveRegister 268 MustHaveRegister  "StoreAtDefinition"
  v29|d DWORD "[r9|d]" v29|d -1 [252, 255[252 MustHaveRegister 254 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v21|d [258, 561[[660, 669[558 MustHaveRegister 560 ShouldHaveRegister 668 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r11|d]" v31|d v20|d [258, 557[268 ShouldHaveRegister 498 MustHaveRegister 500 ShouldHaveRegister 504 MustHaveRegister 508 MustHaveRegister 512 MustHaveRegister 516 MustHaveRegister 520 MustHaveRegister 524 MustHaveRegister 528 MustHaveRegister 532 MustHaveRegister 536 MustHaveRegister 540 MustHaveRegister 544 MustHaveRegister 548 MustHaveRegister 552 MustHaveRegister 556 MustHaveRegister  "OneSpillStore"
  v32|d DWORD "[r9|d]" v32|d -1 [498, 562[498 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rcx|d]" v33|d v31|d [500, 502[500 MustHaveRegister 502 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rcx|d]" v34|d -1 [502, 568[502 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [504, 506[504 MustHaveRegister 506 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbx|d]" v36|d -1 [506, 574[506 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [508, 510[508 MustHaveRegister 510 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdi|d]" v38|d -1 [510, 580[510 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rsi|d]" v40|d -1 [514, 586[514 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[rbp|d]" v41|d -1 [516, 518[516 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbp|d]" v42|d -1 [518, 592[518 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[r13|d]" v43|d -1 [520, 522[520 MustHaveRegister 522 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r13|d]" v44|d -1 [522, 598[522 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r14|d]" v45|d -1 [524, 526[524 MustHaveRegister 526 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[r14|d]" v46|d -1 [526, 604[526 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d -1 [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d -1 [530, 610[530 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r10|d]" v49|d -1 [532, 534[532 MustHaveRegister 534 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r10|d]" v50|d -1 [534, 535[534 MustHaveRegister  "OneSpillStore"
  v51|d DWORD "[r10|d]" v51|d -1 [536, 538[536 MustHaveRegister 538 MustHaveRegister  "NoSpillStore"
  v52|d DWORD "[r10|d]" v52|d -1 [538, 539[538 MustHaveRegister  "OneSpillStore"
  v53|d DWORD "[r10|d]" v53|d -1 [540, 542[540 MustHaveRegister 542 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r10|d]" v54|d -1 [542, 543[542 MustHaveRegister  "OneSpillStore"
  v55|d DWORD "[r10|d]" v55|d -1 [544, 546[544 MustHaveRegister 546 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r10|d]" v56|d -1 [546, 547[546 MustHaveRegister  "OneSpillStore"
  v57|d DWORD "[r10|d]" v57|d -1 [548, 550[548 MustHaveRegister 550 MustHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d -1 [550, 551[550 MustHaveRegister  "OneSpillStore"
  v59|d DWORD "[r10|d]" v59|d -1 [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r10|d]" v60|d -1 [554, 646[554 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[rdx|d]" v61|d -1 [556, 652[556 MustHaveRegister 652 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r11|d]" v62|d v30|d [558, 560[558 MustHaveRegister 560 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[r11|d]" v63|d v62|d [560, 562[560 MustHaveRegister 562 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r11|d]" v64|d v63|d [562, 567[562 MustHaveRegister 564 MustHaveRegister 566 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v64|d [564, 566[564 MustHaveRegister 566 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [566, 568[566 MustHaveRegister 568 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [568, 573[568 MustHaveRegister 570 MustHaveRegister 572 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[r11|d]" v68|d v67|d [570, 572[570 MustHaveRegister 572 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[r11|d]" v69|d v68|d [572, 574[572 MustHaveRegister 574 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r11|d]" v70|d v69|d [574, 579[574 MustHaveRegister 576 MustHaveRegister 578 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[r8|d]" v71|d v70|d [576, 578[576 MustHaveRegister 578 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v71|d [578, 580[578 MustHaveRegister 580 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d v72|d [580, 585[580 MustHaveRegister 582 MustHaveRegister 584 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r11|d]" v74|d v73|d [582, 584[582 MustHaveRegister 584 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r11|d]" v75|d v74|d [584, 586[584 MustHaveRegister 586 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r11|d]" v76|d v75|d [586, 591[586 MustHaveRegister 588 MustHaveRegister 590 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[r8|d]" v77|d v76|d [588, 590[588 MustHaveRegister 590 MustHaveRegister  "NoSpillStore"
  v78|d DWORD "[r8|d]" v78|d v77|d [590, 592[590 MustHaveRegister 592 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[r8|d]" v79|d v78|d [592, 597[592 MustHaveRegister 594 MustHaveRegister 596 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[r11|d]" v80|d v79|d [594, 596[594 MustHaveRegister 596 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r11|d]" v81|d v80|d [596, 598[596 MustHaveRegister 598 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r11|d]" v82|d v81|d [598, 603[598 MustHaveRegister 600 MustHaveRegister 602 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[r8|d]" v83|d v82|d [600, 602[600 MustHaveRegister 602 MustHaveRegister  "NoSpillStore"
  v84|d DWORD "[r8|d]" v84|d v83|d [602, 604[602 MustHaveRegister 604 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[r8|d]" v85|d v84|d [604, 609[604 MustHaveRegister 606 MustHaveRegister 608 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[r11|d]" v86|d v85|d [606, 608[606 MustHaveRegister 608 MustHaveRegister  "NoSpillStore"
  v87|d DWORD "[r11|d]" v87|d v86|d [608, 610[608 MustHaveRegister 610 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r11|d]" v88|d v87|d [610, 615[610 MustHaveRegister 612 MustHaveRegister 614 ShouldHaveRegister  "NoSpillStore"
  v89|d DWORD "[rax|d]" v89|d v88|d [612, 614[612 MustHaveRegister 614 MustHaveRegister  "NoSpillStore"
  v90|d DWORD "[rax|d]" v90|d v89|d [614, 616[614 MustHaveRegister 616 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [616, 621[616 MustHaveRegister 618 MustHaveRegister 620 ShouldHaveRegister  "NoSpillStore"
  v92|d DWORD "[r11|d]" v92|d v91|d [618, 620[618 MustHaveRegister 620 MustHaveRegister  "NoSpillStore"
  v93|d DWORD "[r11|d]" v93|d v92|d [620, 622[620 MustHaveRegister 622 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[r11|d]" v94|d v93|d [622, 627[622 MustHaveRegister 624 MustHaveRegister 626 ShouldHaveRegister  "NoSpillStore"
  v95|d DWORD "[rax|d]" v95|d v94|d [624, 626[624 MustHaveRegister 626 MustHaveRegister  "NoSpillStore"
  v96|d DWORD "[rax|d]" v96|d v95|d [626, 628[626 MustHaveRegister 628 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[rax|d]" v97|d v96|d [628, 633[628 MustHaveRegister 630 MustHaveRegister 632 ShouldHaveRegister  "NoSpillStore"
  v98|d DWORD "[r11|d]" v98|d v97|d [630, 632[630 MustHaveRegister 632 MustHaveRegister  "NoSpillStore"
  v99|d DWORD "[r11|d]" v99|d v98|d [632, 634[632 MustHaveRegister 634 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[r11|d]" v100|d v99|d [634, 639[634 MustHaveRegister 636 MustHaveRegister 638 ShouldHaveRegister  "NoSpillStore"
  v101|d DWORD "[rax|d]" v101|d v100|d [636, 638[636 MustHaveRegister 638 MustHaveRegister  "NoSpillStore"
  v102|d DWORD "[rax|d]" v102|d v101|d [638, 640[638 MustHaveRegister 640 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[rax|d]" v103|d v102|d [640, 645[640 MustHaveRegister 642 MustHaveRegister 644 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r11|d]" v104|d v103|d [642, 644[642 MustHaveRegister 644 MustHaveRegister  "NoSpillStore"
  v105|d DWORD "[r11|d]" v105|d v104|d [644, 646[644 MustHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[r11|d]" v106|d v105|d [646, 651[646 MustHaveRegister 648 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[rax|d]" v107|d v106|d [648, 650[648 MustHaveRegister 650 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[rax|d]" v108|d v107|d [650, 654[650 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[r11|d]" v109|d -1 [652, 654[652 MustHaveRegister 654 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[rax|d]" v110|d v108|d [654, 659[654 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[r11|d]" v111|d -1 [656, 659[656 MustHaveRegister 658 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[r8|d]" v112|d v30|d [670, 703[[712, 721[700 MustHaveRegister 702 ShouldHaveRegister 720 ShouldHaveRegister  "NoSpillStore"
  v113|d DWORD "[r11|d]" v113|d v31|d [670, 708[680 ShouldHaveRegister 704 MustHaveRegister 708 ShouldHaveRegister  "NoSpillStore"
  v114|d DWORD "[r9|d]" v114|d v112|d [700, 702[700 MustHaveRegister 702 MustHaveRegister  "NoSpillStore"
  v115|d DWORD "[r9|d]" v115|d v114|d [702, 706[702 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v116|d DWORD "[r8|d]" v116|d -1 [704, 706[704 MustHaveRegister 706 ShouldHaveRegister  "NoSpillStore"
  v117|d DWORD "[r9|d]" v117|d v115|d [706, 711[706 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v118|d DWORD "[r11|d]" v118|d v113|d [708, 711[708 MustHaveRegister 710 ShouldHaveRegister  "NoSpillStore"
  v119|d DWORD "[r11|d]" v119|d -1 [784, 800[800 MustHaveRegister  "NoSpillStore"
  v120|q QWORD "[r9|q]" v120|q -1 [784, 802[802 MustHaveRegister  "NoSpillStore"
  v121|d DWORD "[r8|d]" v121|d v112|d [722, 740[740 ShouldHaveRegister  "NoSpillStore"
  v122|d DWORD "[rax|d]" v4|d v4|d [670, 712[680 MustHaveRegister 711 LiveAtLoopEnd  "SpillInDominator"
  v123|d DWORD "[vstack:0|d]" v4|d v4|d [258, 670[ "SpillInDominator"
  v124|d DWORD "[vstack:1|d]" v28|d v28|d [270, 660[659 LiveAtLoopEnd  "StoreAtDefinition"
  v125|d DWORD "[vstack:2|d]" v50|d v50|d [535, 616[616 ShouldHaveRegister  "OneSpillStore"
  v126|d DWORD "[vstack:3|d]" v52|d v52|d [539, 622[622 ShouldHaveRegister  "OneSpillStore"
  v127|d DWORD "[vstack:4|d]" v54|d v54|d [543, 628[628 ShouldHaveRegister  "OneSpillStore"
  v128|d DWORD "[vstack:5|d]" v56|d v56|d [547, 634[634 ShouldHaveRegister  "OneSpillStore"
  v129|d DWORD "[vstack:6|d]" v58|d v58|d [551, 640[640 ShouldHaveRegister  "OneSpillStore"
  v130|q QWORD "[r10|q]" v1|q v1|q [651, 712[[754, 805[652 MustHaveRegister 659 LiveAtLoopEnd 704 MustHaveRegister 711 LiveAtLoopEnd  "SpillInDominator"
  v131|q QWORD "[vstack:7|q]" v1|q v1|q [555, 651[ "SpillInDominator"
  v132|d DWORD "[r11|d]" v31|d v31|d [655, 656[[660, 669[656 MustHaveRegister 668 ShouldHaveRegister  "OneSpillStore"
  v133|d DWORD "[vstack:8|d]" v31|d v31|d [557, 655[ "OneSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOVE input: v25|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE input: v4|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE input: v28|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = MOVE input: v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  536  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = MOVE input: v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v127|DWORD = MOVE input: v54|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v128|DWORD = MOVE input: v56|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  548  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|DWORD = MOVE input: v58|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  552  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v131|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  556  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v133|DWORD = MOVE input: v31|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v131|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  652  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v133|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  656  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOVE input: v110|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: v130|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v122|DWORD = MOVE input: v123|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [v112|DWORD, v113|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: v117|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [v121|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE input: v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v120|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v120|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v120|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [v119|DWORD, v120|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOVE input: v25|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: v4|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction v46|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction v47|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction v48|DWORD = MOVZXB input: [v1|QWORD[.] + v47|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction v49|DWORD = LEA address: [v31|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction v50|DWORD = MOVZXB input: [v1|QWORD[.] + v49|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|DWORD = MOVE input: v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  536  <|@ instruction v51|DWORD = LEA address: [v31|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction v52|DWORD = MOVZXB input: [v1|QWORD[.] + v51|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|DWORD = MOVE input: v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction v53|DWORD = LEA address: [v31|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction v54|DWORD = MOVZXB input: [v1|QWORD[.] + v53|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v127|DWORD = MOVE input: v54|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction v55|DWORD = LEA address: [v31|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction v56|DWORD = MOVZXB input: [v1|QWORD[.] + v55|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v128|DWORD = MOVE input: v56|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  548  <|@ instruction v57|DWORD = LEA address: [v31|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction v58|DWORD = MOVZXB input: [v1|QWORD[.] + v57|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v129|DWORD = MOVE input: v58|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  552  <|@ instruction v59|DWORD = LEA address: [v31|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction v60|DWORD = MOVZXB input: [v1|QWORD[.] + v59|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  556  <|@ instruction v61|DWORD = LEA address: [v31|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v133|DWORD = MOVE input: v31|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction v62|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction v76|DWORD = ADD (x: v75|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction v77|DWORD = SHL x: v76|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction v78|DWORD = SUB (x: v77|DWORD, ~y: v76|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction v79|DWORD = ADD (x: v78|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction v80|DWORD = SHL x: v79|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction v81|DWORD = SUB (x: v80|DWORD, ~y: v79|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction v82|DWORD = ADD (x: v81|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction v83|DWORD = SHL x: v82|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction v84|DWORD = SUB (x: v83|DWORD, ~y: v82|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction v85|DWORD = ADD (x: v84|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction v86|DWORD = SHL x: v85|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction v87|DWORD = SUB (x: v86|DWORD, ~y: v85|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction v88|DWORD = ADD (x: v87|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction v89|DWORD = SHL x: v88|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction v90|DWORD = SUB (x: v89|DWORD, ~y: v88|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction v91|DWORD = ADD (x: v90|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction v92|DWORD = SHL x: v91|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction v93|DWORD = SUB (x: v92|DWORD, ~y: v91|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction v94|DWORD = ADD (x: v93|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction v95|DWORD = SHL x: v94|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction v96|DWORD = SUB (x: v95|DWORD, ~y: v94|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction v97|DWORD = ADD (x: v96|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction v98|DWORD = SHL x: v97|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction v99|DWORD = SUB (x: v98|DWORD, ~y: v97|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction v100|DWORD = ADD (x: v99|DWORD, y: v56|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction v101|DWORD = SHL x: v100|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction v102|DWORD = SUB (x: v101|DWORD, ~y: v100|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction v103|DWORD = ADD (x: v102|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction v104|DWORD = SHL x: v103|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction v105|DWORD = SUB (x: v104|DWORD, ~y: v103|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction v106|DWORD = ADD (x: v105|DWORD, y: v60|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction v107|DWORD = SHL x: v106|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v106|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v131|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  652  <|@ instruction v109|DWORD = MOVZXB input: [v1|QWORD[.] + v61|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v132|DWORD = MOVE input: v133|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  656  <|@ instruction v111|DWORD = LEA address: [v31|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = MOVE input: v110|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: v130|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: v124|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v122|DWORD = MOVE input: v123|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v113|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction v114|DWORD = SHL x: v112|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction v115|DWORD = SUB (x: v114|DWORD, ~y: v112|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction v116|DWORD = MOVZXB input: [v1|QWORD[.] + v113|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction v117|DWORD = ADD (x: v115|DWORD, y: v116|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction v118|DWORD = INC value: v113|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: v117|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: v121|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE input: v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v120|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v120|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v130|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v120|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v119|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v120|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   36  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  536  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  548  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  552  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:8|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:2|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  652  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  656  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   36  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   56  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   98  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr  100  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr  102  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  118  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  128  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  140  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  170  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  174  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  180  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  184  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  198  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  226  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  250  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  252  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  254  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  256  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  258  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  270  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  500  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  502  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  504  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  506  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  508  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  510  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  512  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  514  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  516  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  518  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  520  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  522  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  524  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  526  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  528  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  530  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  534  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  536  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  538  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  542  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  546  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  548  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  550  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  552  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  554  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:8|DWORD = MOVE input: r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  558  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  560  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  562  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  564  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  566  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  568  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  570  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  572  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  574  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  576  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  578  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  580  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  582  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  584  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  586  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  588  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  590  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  592  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  594  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  596  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  598  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  600  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  602  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  604  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  608  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  610  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  614  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  616  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:2|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  620  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  622  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  626  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  628  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  632  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  638  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  640  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  644  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  646  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  650  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  652  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  654  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  656  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  658  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  682  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction NOP <|@ <|@
      nr  690  <|@ instruction NOP <|@ <|@
      nr  692  <|@ instruction NOP <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  702  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  704  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  708  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  710  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  712  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  722  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  724  <|@ instruction NOP <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  742  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  744  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  752  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  762  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  764  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  772  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  774  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  782  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  784  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  802  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  804  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction vstack:7|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction vstack:1|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction vstack:2|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction vstack:3|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction vstack:4|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction vstack:5|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction vstack:6|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction vstack:8|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:2|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: vstack:7|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|d DWORD "[vstack:0|d]" vstack:0|d -1 [258, 724[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[vstack:1|d]" vstack:1|d -1 [286, 713[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[vstack:2|d]" vstack:2|d -1 [568, 660[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[vstack:3|d]" vstack:3|d -1 [574, 666[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[vstack:4|d]" vstack:4|d -1 [580, 672[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[vstack:5|d]" vstack:5|d -1 [586, 678[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[vstack:6|d]" vstack:6|d -1 [592, 684[ "NOT_SUPPORTED"
  vstack:7|q QWORD "[vstack:7|q]" vstack:7|q -1 [256, 713[ "NOT_SUPPORTED"
  vstack:8|d DWORD "[vstack:8|d]" vstack:8|d -1 [600, 702[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|d DWORD "[stack:28|d]" vstack:0|d -1 [258, 724[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[stack:32|d]" vstack:1|d -1 [286, 713[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[stack:36|d]" vstack:2|d -1 [568, 660[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[stack:40|d]" vstack:3|d -1 [574, 666[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[stack:44|d]" vstack:4|d -1 [580, 672[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[stack:48|d]" vstack:5|d -1 [586, 678[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[stack:52|d]" vstack:6|d -1 [592, 684[ "NOT_SUPPORTED"
  vstack:7|q QWORD "[stack:64|q]" vstack:7|q -1 [256, 713[ "NOT_SUPPORTED"
  vstack:8|d DWORD "[stack:56|d]" vstack:8|d -1 [600, 702[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@reference-map: [r10:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   30  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction NOP <|@ <|@
      nr   36  <|@ instruction NOP <|@ <|@
      nr   38  <|@ instruction NOP <|@ <|@
      nr   40  <|@ instruction NOP <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   48  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  142  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction NOP <|@ <|@
      nr  182  <|@ instruction NOP <|@ <|@
      nr  184  <|@ instruction NOP <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  204  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576796006020998254
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  252  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606991444920190187
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606903282666441049
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  258  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  280  <|@ instruction CMP x: rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  282  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  284  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  286  <|@ instruction stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4606504041193697456
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction NOP <|@ <|@
      nr  404  <|@ instruction NOP <|@ <|@
      nr  406  <|@ instruction NOP <|@ <|@
      nr  408  <|@ instruction NOP <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction NOP <|@ <|@
      nr  418  <|@ instruction NOP <|@ <|@
      nr  420  <|@ instruction NOP <|@ <|@
      nr  422  <|@ instruction NOP <|@ <|@
      nr  424  <|@ instruction NOP <|@ <|@
      nr  426  <|@ instruction NOP <|@ <|@
      nr  428  <|@ instruction NOP <|@ <|@
      nr  430  <|@ instruction NOP <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction NOP <|@ <|@
      nr  458  <|@ instruction NOP <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  532  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  534  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  536  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  538  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  540  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  542  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  544  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  546  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  548  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  550  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  552  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  554  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  556  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  558  <|@ instruction r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  560  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  562  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  564  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD <|@ <|@
      nr  566  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  568  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  570  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD <|@ <|@
      nr  572  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  574  <|@ instruction stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  576  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD <|@ <|@
      nr  578  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  580  <|@ instruction stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  582  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD <|@ <|@
      nr  584  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  586  <|@ instruction stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  588  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD <|@ <|@
      nr  590  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  592  <|@ instruction stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  594  <|@ instruction r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD <|@ <|@
      nr  596  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  598  <|@ instruction rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD <|@ <|@
      nr  600  <|@ instruction stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  602  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  604  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  606  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  608  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  610  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  612  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  614  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  616  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  618  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  620  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  622  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  624  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  626  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  628  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  630  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  632  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  634  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  636  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  638  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  640  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  642  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  644  <|@ instruction r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  646  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  648  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  650  <|@ instruction r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  652  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  654  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  656  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  658  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  660  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD <|@ <|@
      nr  662  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  664  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  666  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  668  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  670  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  672  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  674  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  676  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  678  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  680  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  682  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  684  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  686  <|@ instruction r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  688  <|@ instruction r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  690  <|@ instruction r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  692  <|@ instruction rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD <|@ <|@
      nr  694  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr  696  <|@ instruction r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  700  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  702  <|@ instruction r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD <|@ <|@
      nr  704  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  706  <|@ instruction r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  708  <|@ instruction rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  712  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4611207261557439748
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  714  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  716  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction NOP <|@ <|@
      nr  722  <|@ instruction NOP <|@ <|@
      nr  724  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576796006020998253
    begin_IR
      LIR
      nr  740  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction NOP <|@ <|@
      nr  752  <|@ instruction NOP <|@ <|@
      nr  754  <|@ instruction NOP <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  760  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  762  <|@ instruction r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  764  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  766  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  768  <|@ instruction r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606991444920190186
    begin_IR
      LIR
      nr  728  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction NOP <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606903282666441048
    begin_IR
      LIR
      nr  772  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  774  <|@ instruction NOP <|@ <|@
      nr  776  <|@ instruction NOP <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  832  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  852  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   76  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   80  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   82  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   84  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   86  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602399683039070553
    begin_IR
      LIR
      nr  100  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4584589577682867424
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  830  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  138  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  140  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  798  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD <|@ <|@
      nr  816  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD <|@ <|@
      nr  818  <|@ st <@st|@reference-map: [r10:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD r10|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  782  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  784  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  786  <|@ instruction NOP <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction r9|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  794  <|@ instruction r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  796  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  110  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  112  <|@ instruction r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction r9|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr  122  <|@ instruction r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 89842400c0feff4883ec389041817f20000000000f8518040000909090909090909090909048896c24308bc14103c03bc10f8e94030000909090909090448b520c448bd941ffc3413bc30f8f3f03000090909090909090443bd10f86a803000090909090909090909090909090448bd1448bc641c1e005442bc6460fb65412104503c2448d5102413bc2448bc8450f4fcae92b00000066660f1f8400000000009090909090909090458bd041c1e205452bd0460fb6441a104503d041ffc3458bc290909090453bcb7fd64889142489442424909090909090909090448d50f081f81000008041b900000080450f4cd14489542420e9180200000f1f80000000009090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090460fb64c1a10418bcbffc10fb64c0a10418d5b020fb65c1a10418d7b030fb67c3a10418d73040fb6743210418d6b050fb66c2a10458d6b06460fb66c2a10458d7307460fb6743210418d43080fb6440210458d5309460fb6541210448954241c458d530a460fb65412104489542418458d530b460fb65412104489542414458d530c460fb65412104489542410458d530d460fb6541210448954240c458d530e460fb6541210418d530f44895c2408458bd841c1e305452bd84503d9458bc341c1e005452bc34403c1458bd841c1e305452bd84403db458bc341c1e005452bc34403c7458bd841c1e305452bd84403de458bc341c1e005452bc34403c5458bd841c1e305452bd84503dd458bc341c1e005452bc34503c6458bd841c1e305452bd84403d8418bc3c1e005412bc30344241c448bd841c1e305442bd844035c2418418bc3c1e005412bc303442414448bd841c1e305442bd844035c2410418bc3c1e005412bc30344240c448bd841c1e305442bd84503da418bc3c1e005412bc34c8b1424450fb65c12104103c3448b5c2408458d5b10448bc0498bd2448b54242090909090453bd30f8fe2fdffff4c8bd29090908b442424e9340000006666660f1f840000000000666666900f1f40009090909090909090458bc841c1e105452bc8470fb6441a104503c841ffc3458bc190909090413bc37fd69090909090909090909090418bc0488b6c24304883c438493ba7500400000f87b4000000c3909090909090909090904d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f861d00000090909090453bd30f865a000000909090e988fcffff909090448bc6eb9a4c8bd290909049c7c11800000041bbe5b6ffff9090909090909045899f840400004d898f90040000e8000000000f1f8400000000004c8bd290909049c7c10000000041bbe5c2ffffebc94c8bd290909049c7c11800000041bbe5b6ffffebb448896c2430e800000000e9d9fbfffff4488d0d38ffffff49898f68040000e9abfbfffff441c78784040000f5c8ffff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 NOP  <||@
  Comment 27 4 NOP  <||@
  Comment 28 6 NOP  <||@
  Comment 29 8 NOP  <||@
  Comment 30 10 NOP  <||@
  Comment 31 12 NOP  <||@
  Comment 32 14 NOP  <||@
  Comment 33 16 NOP  <||@
  Comment 34 18 NOP  <||@
  Comment 35 20 NOP  <||@
  Comment 36 22 NOP  <||@
  Comment 37 24 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 42 26 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD  <||@
  Comment 42 28 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 47 30 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 55 block B1 null  <||@
  Comment 55 32 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 55 34 NOP  <||@
  Comment 56 36 NOP  <||@
  Comment 57 38 NOP  <||@
  Comment 58 40 NOP  <||@
  Comment 59 42 NOP  <||@
  Comment 60 44 NOP  <||@
  Comment 61 46 r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 61 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 61 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 65 48 r11|DWORD = INC value: rcx|DWORD size: DWORD  <||@
  Comment 71 50 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD  <||@
  Comment 80 block B7 null  <||@
  Comment 80 142 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 80 144 NOP  <||@
  Comment 81 146 NOP  <||@
  Comment 82 148 NOP  <||@
  Comment 83 150 JUMP ~outgoingValues: [] destination: B7 -> B8  <||@
  Comment 83 block B8 null  <||@
  Comment 83 152 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 83 154 NOP  <||@
  Comment 84 156 NOP  <||@
  Comment 85 158 NOP  <||@
  Comment 86 160 NOP  <||@
  Comment 87 162 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 96 block B9 null  <||@
  Comment 96 164 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 96 166 NOP  <||@
  Comment 97 168 NOP  <||@
  Comment 98 170 NOP  <||@
  Comment 99 172 NOP  <||@
  Comment 100 174 NOP  <||@
  Comment 101 176 NOP  <||@
  Comment 102 178 NOP  <||@
  Comment 103 180 NOP  <||@
  Comment 104 182 NOP  <||@
  Comment 105 184 NOP  <||@
  Comment 106 186 NOP  <||@
  Comment 107 188 NOP  <||@
  Comment 108 190 NOP  <||@
  Comment 109 192 r10|QWORD = MOV value: rcx|DWORD size: DWORD  <||@
  Comment 112 194 r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD  <||@
  Comment 119 196 r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 122 198 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD  <||@
  Comment 128 200 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 131 202 r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD  <||@
  Comment 135 204 CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 138 206 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: >  <||@
  Comment 145 208 JUMP ~outgoingValues: [] destination: B9 -> B10  <||@
  Comment 150 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 150 222 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 160 224 NOP  <||@
  Comment 161 226 NOP  <||@
  Comment 162 228 NOP  <||@
  Comment 163 230 NOP  <||@
  Comment 164 232 NOP  <||@
  Comment 165 234 NOP  <||@
  Comment 166 236 NOP  <||@
  Comment 167 238 NOP  <||@
  Comment 168 240 r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 175 242 r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 178 244 r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 184 246 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 187 248 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 190 250 r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 193 252 JUMP ~outgoingValues: [] destination: B11 -> B10  <||@
  Comment 193 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 193 210 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 193 212 NOP  <||@
  Comment 194 214 NOP  <||@
  Comment 195 216 NOP  <||@
  Comment 196 218 NOP  <||@
  Comment 197 220 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 202 block B12 null  <||@
  Comment 202 254 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 202 256 stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 206 258 stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 210 260 NOP  <||@
  Comment 211 262 NOP  <||@
  Comment 212 264 NOP  <||@
  Comment 213 266 NOP  <||@
  Comment 214 268 NOP  <||@
  Comment 215 270 NOP  <||@
  Comment 216 272 NOP  <||@
  Comment 217 274 NOP  <||@
  Comment 218 276 NOP  <||@
  Comment 219 278 r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD  <||@
  Comment 223 280 CMP x: rax|DWORD y: -2147483632 size: DWORD  <||@
  Comment 229 282 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 235 284 r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 239 286 stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 244 288 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 249 block B14 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 249 302 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 256 304 NOP  <||@
  Comment 257 306 NOP  <||@
  Comment 258 308 NOP  <||@
  Comment 259 310 NOP  <||@
  Comment 260 312 NOP  <||@
  Comment 261 314 NOP  <||@
  Comment 262 316 NOP  <||@
  Comment 263 318 NOP  <||@
  Comment 264 320 NOP  <||@
  Comment 265 322 NOP  <||@
  Comment 266 324 NOP  <||@
  Comment 267 326 NOP  <||@
  Comment 268 328 NOP  <||@
  Comment 269 330 NOP  <||@
  Comment 270 332 NOP  <||@
  Comment 271 334 NOP  <||@
  Comment 272 336 NOP  <||@
  Comment 273 338 NOP  <||@
  Comment 274 340 NOP  <||@
  Comment 275 342 NOP  <||@
  Comment 276 344 NOP  <||@
  Comment 277 346 NOP  <||@
  Comment 278 348 NOP  <||@
  Comment 279 350 NOP  <||@
  Comment 280 352 NOP  <||@
  Comment 281 354 NOP  <||@
  Comment 282 356 NOP  <||@
  Comment 283 358 NOP  <||@
  Comment 284 360 NOP  <||@
  Comment 285 362 NOP  <||@
  Comment 286 364 NOP  <||@
  Comment 287 366 NOP  <||@
  Comment 288 368 NOP  <||@
  Comment 289 370 NOP  <||@
  Comment 290 372 NOP  <||@
  Comment 291 374 NOP  <||@
  Comment 292 376 NOP  <||@
  Comment 293 378 NOP  <||@
  Comment 294 380 NOP  <||@
  Comment 295 382 NOP  <||@
  Comment 296 384 NOP  <||@
  Comment 297 386 NOP  <||@
  Comment 298 388 NOP  <||@
  Comment 299 390 NOP  <||@
  Comment 300 392 NOP  <||@
  Comment 301 394 NOP  <||@
  Comment 302 396 NOP  <||@
  Comment 303 398 NOP  <||@
  Comment 304 400 NOP  <||@
  Comment 305 402 NOP  <||@
  Comment 306 404 NOP  <||@
  Comment 307 406 NOP  <||@
  Comment 308 408 NOP  <||@
  Comment 309 410 NOP  <||@
  Comment 310 412 NOP  <||@
  Comment 311 414 NOP  <||@
  Comment 312 416 NOP  <||@
  Comment 313 418 NOP  <||@
  Comment 314 420 NOP  <||@
  Comment 315 422 NOP  <||@
  Comment 316 424 NOP  <||@
  Comment 317 426 NOP  <||@
  Comment 318 428 NOP  <||@
  Comment 319 430 NOP  <||@
  Comment 320 432 NOP  <||@
  Comment 321 434 NOP  <||@
  Comment 322 436 NOP  <||@
  Comment 323 438 NOP  <||@
  Comment 324 440 NOP  <||@
  Comment 325 442 NOP  <||@
  Comment 326 444 NOP  <||@
  Comment 327 446 NOP  <||@
  Comment 328 448 NOP  <||@
  Comment 329 450 NOP  <||@
  Comment 330 452 NOP  <||@
  Comment 331 454 NOP  <||@
  Comment 332 456 NOP  <||@
  Comment 333 458 NOP  <||@
  Comment 334 460 NOP  <||@
  Comment 335 462 NOP  <||@
  Comment 336 464 NOP  <||@
  Comment 337 466 NOP  <||@
  Comment 338 468 NOP  <||@
  Comment 339 470 NOP  <||@
  Comment 340 472 NOP  <||@
  Comment 341 474 NOP  <||@
  Comment 342 476 NOP  <||@
  Comment 343 478 NOP  <||@
  Comment 344 480 NOP  <||@
  Comment 345 482 NOP  <||@
  Comment 346 484 NOP  <||@
  Comment 347 486 NOP  <||@
  Comment 348 488 NOP  <||@
  Comment 349 490 NOP  <||@
  Comment 350 492 NOP  <||@
  Comment 351 494 NOP  <||@
  Comment 352 496 NOP  <||@
  Comment 353 498 NOP  <||@
  Comment 354 500 NOP  <||@
  Comment 355 502 NOP  <||@
  Comment 356 504 NOP  <||@
  Comment 357 506 NOP  <||@
  Comment 358 508 NOP  <||@
  Comment 359 510 NOP  <||@
  Comment 360 512 NOP  <||@
  Comment 361 514 NOP  <||@
  Comment 362 516 NOP  <||@
  Comment 363 518 NOP  <||@
  Comment 364 520 NOP  <||@
  Comment 365 522 NOP  <||@
  Comment 366 524 NOP  <||@
  Comment 367 526 NOP  <||@
  Comment 368 528 NOP  <||@
  Comment 369 530 r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 375 532 rcx|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 380 534 rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 385 536 rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD  <||@
  Comment 389 538 rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 394 540 rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD  <||@
  Comment 398 542 rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 403 544 rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD  <||@
  Comment 407 546 rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 412 548 rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD  <||@
  Comment 416 550 rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD  <||@
  Comment 421 552 r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD  <||@
  Comment 425 554 r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD  <||@
  Comment 431 556 r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD  <||@
  Comment 435 558 r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD  <||@
  Comment 441 560 rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD  <||@
  Comment 445 562 rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD  <||@
  Comment 450 564 r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD  <||@
  Comment 454 566 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 460 568 stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 465 570 r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD  <||@
  Comment 469 572 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 475 574 stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 480 576 r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD  <||@
  Comment 484 578 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 490 580 stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 495 582 r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD  <||@
  Comment 499 584 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 505 586 stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 510 588 r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD  <||@
  Comment 514 590 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 520 592 stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 525 594 r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD  <||@
  Comment 529 596 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 535 598 rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD  <||@
  Comment 539 600 stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 544 602 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 551 604 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 554 606 r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 557 608 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 564 610 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 567 612 r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD  <||@
  Comment 570 614 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 577 616 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 580 618 r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 583 620 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 590 622 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 593 624 r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 596 626 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 603 628 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 606 630 r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 609 632 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 616 634 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 619 636 r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 622 638 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 629 640 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 632 642 r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 635 644 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 642 646 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 645 648 r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD  <||@
  Comment 648 650 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 655 652 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 658 654 r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 661 656 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 667 658 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 670 660 rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD  <||@
  Comment 674 662 r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 681 664 r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 684 666 r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD  <||@
  Comment 689 668 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 695 670 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 698 672 rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD  <||@
  Comment 702 674 r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 709 676 r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 712 678 r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD  <||@
  Comment 717 680 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 723 682 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 726 684 rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD  <||@
  Comment 730 686 r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 737 688 r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 740 690 r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 743 692 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 749 694 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 752 696 r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 756 698 r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 762 700 rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD  <||@
  Comment 765 702 r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD  <||@
  Comment 770 704 r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD  <||@
  Comment 774 706 r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 777 708 rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD  <||@
  Comment 780 710 r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 785 712 JUMP ~outgoingValues: [] destination: B14 -> B13  <||@
  Comment 785 block B13 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 785 290 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 785 292 NOP  <||@
  Comment 786 294 NOP  <||@
  Comment 787 296 NOP  <||@
  Comment 788 298 NOP  <||@
  Comment 789 300 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 798 block B15 null  <||@
  Comment 798 714 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 798 716 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 801 718 NOP  <||@
  Comment 802 720 NOP  <||@
  Comment 803 722 NOP  <||@
  Comment 804 724 rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 808 726 JUMP ~outgoingValues: [] destination: B15 -> B16  <||@
  Comment 813 block B17 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 813 740 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 832 742 NOP  <||@
  Comment 833 744 NOP  <||@
  Comment 834 746 NOP  <||@
  Comment 835 748 NOP  <||@
  Comment 836 750 NOP  <||@
  Comment 837 752 NOP  <||@
  Comment 838 754 NOP  <||@
  Comment 839 756 NOP  <||@
  Comment 840 758 r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 847 760 r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 850 762 r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 856 764 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 859 766 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 862 768 r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD  <||@
  Comment 865 770 JUMP ~outgoingValues: [] destination: B17 -> B16  <||@
  Comment 865 block B16 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 865 728 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 865 730 NOP  <||@
  Comment 866 732 NOP  <||@
  Comment 867 734 NOP  <||@
  Comment 868 736 NOP  <||@
  Comment 869 738 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD  <||@
  Comment 874 block B18 null  <||@
  Comment 874 772 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 874 774 NOP  <||@
  Comment 875 776 NOP  <||@
  Comment 876 778 NOP  <||@
  Comment 877 780 JUMP ~outgoingValues: [] destination: B18 -> B22  <||@
  Comment 877 block B22 null  <||@
  Comment 877 832 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 877 834 NOP  <||@
  Comment 878 836 NOP  <||@
  Comment 879 838 NOP  <||@
  Comment 880 840 NOP  <||@
  Comment 881 842 NOP  <||@
  Comment 882 844 NOP  <||@
  Comment 883 846 NOP  <||@
  Comment 884 848 NOP  <||@
  Comment 885 850 rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 888 852 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 897 POLL_RETURN_FAR  <||@
  Comment 911 block B2 null  <||@
  Comment 911 52 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 911 54 NOP  <||@
  Comment 912 56 NOP  <||@
  Comment 913 58 NOP  <||@
  Comment 914 60 NOP  <||@
  Comment 915 62 NOP  <||@
  Comment 916 64 NOP  <||@
  Comment 917 66 NOP  <||@
  Comment 918 68 NOP  <||@
  Comment 919 70 NOP  <||@
  Comment 920 72 NOP  <||@
  Comment 921 74 r9|QWORD = MOVSXD value: r11|DWORD size: QWORD  <||@
  Comment 924 76 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 929 78 rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD  <||@
  Comment 932 80 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 935 82 r9|QWORD = DEC value: r9|QWORD size: QWORD  <||@
  Comment 938 84 rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 941 86 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 950 block B3 null  <||@
  Comment 950 88 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 950 90 NOP  <||@
  Comment 951 92 NOP  <||@
  Comment 952 94 NOP  <||@
  Comment 953 96 NOP  <||@
  Comment 954 98 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 963 block B4 null  <||@
  Comment 963 100 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 963 102 NOP  <||@
  Comment 964 104 NOP  <||@
  Comment 965 106 NOP  <||@
  Comment 966 108 JUMP ~outgoingValues: [] destination: B4 -> B8  <||@
  Comment 971 block B21 null  <||@
  Comment 971 820 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 971 822 NOP  <||@
  Comment 972 824 NOP  <||@
  Comment 973 826 NOP  <||@
  Comment 974 828 r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD  <||@
  Comment 977 830 JUMP ~outgoingValues: [] destination: B21 -> B22  <||@
  Comment 979 block B6 null  <||@
  Comment 979 126 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 979 128 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 982 130 NOP  <||@
  Comment 983 132 NOP  <||@
  Comment 984 134 NOP  <||@
  Comment 985 136 r9|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 992 138 r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 998 140 JUMP ~outgoingValues: [] destination: B6 -> B20  <||@
  Comment 998 block B20 null  <||@
  Comment 998 798 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 998 800 NOP  <||@
  Comment 999 802 NOP  <||@
  Comment 1000 804 NOP  <||@
  Comment 1001 806 NOP  <||@
  Comment 1002 808 NOP  <||@
  Comment 1003 810 NOP  <||@
  Comment 1004 812 NOP  <||@
  Comment 1005 814 MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD  <||@
  Comment 1012 816 MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD  <||@
  Comment 1019 818 DEOPT info [bci:0]  <||@
  Comment 1019 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1024 [r10:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |r10|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 1032 block B19 null  <||@
  Comment 1032 782 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1032 784 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1035 786 NOP  <||@
  Comment 1036 788 NOP  <||@
  Comment 1037 790 NOP  <||@
  Comment 1038 792 r9|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1045 794 r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5]  <||@
  Comment 1051 796 JUMP ~outgoingValues: [] destination: B19 -> B20  <||@
  Comment 1053 block B5 null  <||@
  Comment 1053 110 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1053 112 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1056 114 NOP  <||@
  Comment 1057 116 NOP  <||@
  Comment 1058 118 NOP  <||@
  Comment 1059 120 r9|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 1066 122 r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 1072 124 JUMP ~outgoingValues: [] destination: B5 -> B20  <||@
  Comment 1079 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 1104 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 1132 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1137 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 1145 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 1145 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 1151 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 1151 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-187[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-187[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  date 1724269668075
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f789a106b80 89842400c0feff4883ec389041817f20030000000f8518040000909090909090909090909048896c24308bc14103c03bc10f8e94030000909090909090448b520c448bd941ffc3413bc30f8f3f03000090909090909090443bd10f86a803000090909090909090909090909090448bd1448bc641c1e005442bc6460fb65412104503c2448d5102413bc2448bc8450f4fcae92b00000066660f1f8400000000009090909090909090458bd041c1e205452bd0460fb6441a104503d041ffc3458bc290909090453bcb7fd64889142489442424909090909090909090448d50f081f81000008041b900000080450f4cd14489542420e9180200000f1f80000000009090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090460fb64c1a10418bcbffc10fb64c0a10418d5b020fb65c1a10418d7b030fb67c3a10418d73040fb6743210418d6b050fb66c2a10458d6b06460fb66c2a10458d7307460fb6743210418d43080fb6440210458d5309460fb6541210448954241c458d530a460fb65412104489542418458d530b460fb65412104489542414458d530c460fb65412104489542410458d530d460fb6541210448954240c458d530e460fb6541210418d530f44895c2408458bd841c1e305452bd84503d9458bc341c1e005452bc34403c1458bd841c1e305452bd84403db458bc341c1e005452bc34403c7458bd841c1e305452bd84403de458bc341c1e005452bc34403c5458bd841c1e305452bd84503dd458bc341c1e005452bc34503c6458bd841c1e305452bd84403d8418bc3c1e005412bc30344241c448bd841c1e305442bd844035c2418418bc3c1e005412bc303442414448bd841c1e305442bd844035c2410418bc3c1e005412bc30344240c448bd841c1e305442bd84503da418bc3c1e005412bc34c8b1424450fb65c12104103c3448b5c2408458d5b10448bc0498bd2448b54242090909090453bd30f8fe2fdffff4c8bd29090908b442424e9340000006666660f1f840000000000666666900f1f40009090909090909090458bc841c1e105452bc8470fb6441a104503c841ffc3458bc190909090413bc37fd69090909090909090909090418bc0488b6c24304883c438493ba7500400000f87b4000000c3909090909090909090904d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f861d00000090909090453bd30f865a000000909090e988fcffff909090448bc6eb9a4c8bd290909049c7c11800000041bbe5b6ffff9090909090909045899f840400004d898f90040000e8fa4168ff0f1f8400000000004c8bd290909049c7c10000000041bbe5c2ffffebc94c8bd290909049c7c11800000041bbe5b6ffffebb448896c2430e8644266ffe9d9fbfffff4488d0d38ffffff49898f68040000e92b5068fff441c78784040000f5c8ffff49c7879004000000000000e8894168ff0f1f840000000000e802e37bfff4e81c3f68fff4f4f4f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 NOP  <||@
  Comment 27 4 NOP  <||@
  Comment 28 6 NOP  <||@
  Comment 29 8 NOP  <||@
  Comment 30 10 NOP  <||@
  Comment 31 12 NOP  <||@
  Comment 32 14 NOP  <||@
  Comment 33 16 NOP  <||@
  Comment 34 18 NOP  <||@
  Comment 35 20 NOP  <||@
  Comment 36 22 NOP  <||@
  Comment 37 24 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 42 26 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@5e62abce slotKind: QWORD  <||@
  Comment 42 28 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 47 30 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9690096637498683 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 55 block B1 null  <||@
  Comment 55 32 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 55 34 NOP  <||@
  Comment 56 36 NOP  <||@
  Comment 57 38 NOP  <||@
  Comment 58 40 NOP  <||@
  Comment 59 42 NOP  <||@
  Comment 60 44 NOP  <||@
  Comment 61 46 r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 61 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 61 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 65 48 r11|DWORD = INC value: rcx|DWORD size: DWORD  <||@
  Comment 71 50 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD  <||@
  Comment 80 block B7 null  <||@
  Comment 80 142 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 80 144 NOP  <||@
  Comment 81 146 NOP  <||@
  Comment 82 148 NOP  <||@
  Comment 83 150 JUMP ~outgoingValues: [] destination: B7 -> B8  <||@
  Comment 83 block B8 null  <||@
  Comment 83 152 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 83 154 NOP  <||@
  Comment 84 156 NOP  <||@
  Comment 85 158 NOP  <||@
  Comment 86 160 NOP  <||@
  Comment 87 162 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 96 block B9 null  <||@
  Comment 96 164 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 96 166 NOP  <||@
  Comment 97 168 NOP  <||@
  Comment 98 170 NOP  <||@
  Comment 99 172 NOP  <||@
  Comment 100 174 NOP  <||@
  Comment 101 176 NOP  <||@
  Comment 102 178 NOP  <||@
  Comment 103 180 NOP  <||@
  Comment 104 182 NOP  <||@
  Comment 105 184 NOP  <||@
  Comment 106 186 NOP  <||@
  Comment 107 188 NOP  <||@
  Comment 108 190 NOP  <||@
  Comment 109 192 r10|QWORD = MOV value: rcx|DWORD size: DWORD  <||@
  Comment 112 194 r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD  <||@
  Comment 119 196 r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 122 198 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD  <||@
  Comment 128 200 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 131 202 r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD  <||@
  Comment 135 204 CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 138 206 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: >  <||@
  Comment 145 208 JUMP ~outgoingValues: [] destination: B9 -> B10  <||@
  Comment 150 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 150 222 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 160 224 NOP  <||@
  Comment 161 226 NOP  <||@
  Comment 162 228 NOP  <||@
  Comment 163 230 NOP  <||@
  Comment 164 232 NOP  <||@
  Comment 165 234 NOP  <||@
  Comment 166 236 NOP  <||@
  Comment 167 238 NOP  <||@
  Comment 168 240 r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 175 242 r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 178 244 r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 184 246 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 187 248 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 190 250 r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 193 252 JUMP ~outgoingValues: [] destination: B11 -> B10  <||@
  Comment 193 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 193 210 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 193 212 NOP  <||@
  Comment 194 214 NOP  <||@
  Comment 195 216 NOP  <||@
  Comment 196 218 NOP  <||@
  Comment 197 220 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 202 block B12 null  <||@
  Comment 202 254 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 202 256 stack:64|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 206 258 stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 210 260 NOP  <||@
  Comment 211 262 NOP  <||@
  Comment 212 264 NOP  <||@
  Comment 213 266 NOP  <||@
  Comment 214 268 NOP  <||@
  Comment 215 270 NOP  <||@
  Comment 216 272 NOP  <||@
  Comment 217 274 NOP  <||@
  Comment 218 276 NOP  <||@
  Comment 219 278 r10|DWORD = LEA address: [rax|DWORD - 16] size: DWORD  <||@
  Comment 223 280 CMP x: rax|DWORD y: -2147483632 size: DWORD  <||@
  Comment 229 282 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 235 284 r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 239 286 stack:32|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 244 288 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 249 block B14 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 249 302 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 256 304 NOP  <||@
  Comment 257 306 NOP  <||@
  Comment 258 308 NOP  <||@
  Comment 259 310 NOP  <||@
  Comment 260 312 NOP  <||@
  Comment 261 314 NOP  <||@
  Comment 262 316 NOP  <||@
  Comment 263 318 NOP  <||@
  Comment 264 320 NOP  <||@
  Comment 265 322 NOP  <||@
  Comment 266 324 NOP  <||@
  Comment 267 326 NOP  <||@
  Comment 268 328 NOP  <||@
  Comment 269 330 NOP  <||@
  Comment 270 332 NOP  <||@
  Comment 271 334 NOP  <||@
  Comment 272 336 NOP  <||@
  Comment 273 338 NOP  <||@
  Comment 274 340 NOP  <||@
  Comment 275 342 NOP  <||@
  Comment 276 344 NOP  <||@
  Comment 277 346 NOP  <||@
  Comment 278 348 NOP  <||@
  Comment 279 350 NOP  <||@
  Comment 280 352 NOP  <||@
  Comment 281 354 NOP  <||@
  Comment 282 356 NOP  <||@
  Comment 283 358 NOP  <||@
  Comment 284 360 NOP  <||@
  Comment 285 362 NOP  <||@
  Comment 286 364 NOP  <||@
  Comment 287 366 NOP  <||@
  Comment 288 368 NOP  <||@
  Comment 289 370 NOP  <||@
  Comment 290 372 NOP  <||@
  Comment 291 374 NOP  <||@
  Comment 292 376 NOP  <||@
  Comment 293 378 NOP  <||@
  Comment 294 380 NOP  <||@
  Comment 295 382 NOP  <||@
  Comment 296 384 NOP  <||@
  Comment 297 386 NOP  <||@
  Comment 298 388 NOP  <||@
  Comment 299 390 NOP  <||@
  Comment 300 392 NOP  <||@
  Comment 301 394 NOP  <||@
  Comment 302 396 NOP  <||@
  Comment 303 398 NOP  <||@
  Comment 304 400 NOP  <||@
  Comment 305 402 NOP  <||@
  Comment 306 404 NOP  <||@
  Comment 307 406 NOP  <||@
  Comment 308 408 NOP  <||@
  Comment 309 410 NOP  <||@
  Comment 310 412 NOP  <||@
  Comment 311 414 NOP  <||@
  Comment 312 416 NOP  <||@
  Comment 313 418 NOP  <||@
  Comment 314 420 NOP  <||@
  Comment 315 422 NOP  <||@
  Comment 316 424 NOP  <||@
  Comment 317 426 NOP  <||@
  Comment 318 428 NOP  <||@
  Comment 319 430 NOP  <||@
  Comment 320 432 NOP  <||@
  Comment 321 434 NOP  <||@
  Comment 322 436 NOP  <||@
  Comment 323 438 NOP  <||@
  Comment 324 440 NOP  <||@
  Comment 325 442 NOP  <||@
  Comment 326 444 NOP  <||@
  Comment 327 446 NOP  <||@
  Comment 328 448 NOP  <||@
  Comment 329 450 NOP  <||@
  Comment 330 452 NOP  <||@
  Comment 331 454 NOP  <||@
  Comment 332 456 NOP  <||@
  Comment 333 458 NOP  <||@
  Comment 334 460 NOP  <||@
  Comment 335 462 NOP  <||@
  Comment 336 464 NOP  <||@
  Comment 337 466 NOP  <||@
  Comment 338 468 NOP  <||@
  Comment 339 470 NOP  <||@
  Comment 340 472 NOP  <||@
  Comment 341 474 NOP  <||@
  Comment 342 476 NOP  <||@
  Comment 343 478 NOP  <||@
  Comment 344 480 NOP  <||@
  Comment 345 482 NOP  <||@
  Comment 346 484 NOP  <||@
  Comment 347 486 NOP  <||@
  Comment 348 488 NOP  <||@
  Comment 349 490 NOP  <||@
  Comment 350 492 NOP  <||@
  Comment 351 494 NOP  <||@
  Comment 352 496 NOP  <||@
  Comment 353 498 NOP  <||@
  Comment 354 500 NOP  <||@
  Comment 355 502 NOP  <||@
  Comment 356 504 NOP  <||@
  Comment 357 506 NOP  <||@
  Comment 358 508 NOP  <||@
  Comment 359 510 NOP  <||@
  Comment 360 512 NOP  <||@
  Comment 361 514 NOP  <||@
  Comment 362 516 NOP  <||@
  Comment 363 518 NOP  <||@
  Comment 364 520 NOP  <||@
  Comment 365 522 NOP  <||@
  Comment 366 524 NOP  <||@
  Comment 367 526 NOP  <||@
  Comment 368 528 NOP  <||@
  Comment 369 530 r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 375 532 rcx|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 380 534 rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 385 536 rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD  <||@
  Comment 389 538 rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 394 540 rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD  <||@
  Comment 398 542 rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 403 544 rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD  <||@
  Comment 407 546 rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 412 548 rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD  <||@
  Comment 416 550 rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD  <||@
  Comment 421 552 r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD  <||@
  Comment 425 554 r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD  <||@
  Comment 431 556 r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD  <||@
  Comment 435 558 r14|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD  <||@
  Comment 441 560 rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD  <||@
  Comment 445 562 rax|DWORD = MOVZXB input: [rdx|QWORD[.] + rax|DWORD * 1 + 16] size: DWORD  <||@
  Comment 450 564 r10|DWORD = LEA address: [r11|DWORD + 9] size: DWORD  <||@
  Comment 454 566 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 460 568 stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 465 570 r10|DWORD = LEA address: [r11|DWORD + 10] size: DWORD  <||@
  Comment 469 572 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 475 574 stack:40|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 480 576 r10|DWORD = LEA address: [r11|DWORD + 11] size: DWORD  <||@
  Comment 484 578 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 490 580 stack:44|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 495 582 r10|DWORD = LEA address: [r11|DWORD + 12] size: DWORD  <||@
  Comment 499 584 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 505 586 stack:48|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 510 588 r10|DWORD = LEA address: [r11|DWORD + 13] size: DWORD  <||@
  Comment 514 590 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 520 592 stack:52|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 525 594 r10|DWORD = LEA address: [r11|DWORD + 14] size: DWORD  <||@
  Comment 529 596 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|DWORD * 1 + 16] size: DWORD  <||@
  Comment 535 598 rdx|DWORD = LEA address: [r11|DWORD + 15] size: DWORD  <||@
  Comment 539 600 stack:56|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 544 602 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 551 604 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 554 606 r11|DWORD = ADD (x: r11|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 557 608 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 564 610 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 567 612 r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD  <||@
  Comment 570 614 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 577 616 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 580 618 r11|DWORD = ADD (x: r11|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 583 620 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 590 622 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 593 624 r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 596 626 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 603 628 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 606 630 r11|DWORD = ADD (x: r11|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 609 632 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 616 634 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 619 636 r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 622 638 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 629 640 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 632 642 r11|DWORD = ADD (x: r11|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 635 644 r8|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 642 646 r8|DWORD = SUB (x: r8|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 645 648 r8|DWORD = ADD (x: r8|DWORD, y: r14|DWORD) size: DWORD  <||@
  Comment 648 650 r11|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 655 652 r11|DWORD = SUB (x: r11|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 658 654 r11|DWORD = ADD (x: r11|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 661 656 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 667 658 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 670 660 rax|DWORD = ADD (x: rax|DWORD, y: stack:36|DWORD) size: DWORD  <||@
  Comment 674 662 r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 681 664 r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 684 666 r11|DWORD = ADD (x: r11|DWORD, y: stack:40|DWORD) size: DWORD  <||@
  Comment 689 668 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 695 670 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 698 672 rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD  <||@
  Comment 702 674 r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 709 676 r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 712 678 r11|DWORD = ADD (x: r11|DWORD, y: stack:48|DWORD) size: DWORD  <||@
  Comment 717 680 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 723 682 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 726 684 rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD  <||@
  Comment 730 686 r11|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 737 688 r11|DWORD = SUB (x: r11|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 740 690 r11|DWORD = ADD (x: r11|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 743 692 rax|DWORD = SHL x: r11|DWORD y: 5 size: DWORD  <||@
  Comment 749 694 rax|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 752 696 r10|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 756 698 r11|DWORD = MOVZXB input: [r10|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 762 700 rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD  <||@
  Comment 765 702 r11|DWORD = MOVE input: stack:56|DWORD moveKind: DWORD  <||@
  Comment 770 704 r11|DWORD = LEA address: [r11|DWORD + 16] size: DWORD  <||@
  Comment 774 706 r8|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 777 708 rdx|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD  <||@
  Comment 780 710 r10|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 785 712 JUMP ~outgoingValues: [] destination: B14 -> B13  <||@
  Comment 785 block B13 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 785 290 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 785 292 NOP  <||@
  Comment 786 294 NOP  <||@
  Comment 787 296 NOP  <||@
  Comment 788 298 NOP  <||@
  Comment 789 300 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.48829676467488703 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 798 block B15 null  <||@
  Comment 798 714 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 798 716 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 801 718 NOP  <||@
  Comment 802 720 NOP  <||@
  Comment 803 722 NOP  <||@
  Comment 804 724 rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 808 726 JUMP ~outgoingValues: [] destination: B15 -> B16  <||@
  Comment 813 block B17 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 813 740 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 832 742 NOP  <||@
  Comment 833 744 NOP  <||@
  Comment 834 746 NOP  <||@
  Comment 835 748 NOP  <||@
  Comment 836 750 NOP  <||@
  Comment 837 752 NOP  <||@
  Comment 838 754 NOP  <||@
  Comment 839 756 NOP  <||@
  Comment 840 758 r9|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 847 760 r9|DWORD = SUB (x: r9|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 850 762 r8|DWORD = MOVZXB input: [r10|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 856 764 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 859 766 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 862 768 r8|DWORD = MOVE input: r9|DWORD moveKind: DWORD  <||@
  Comment 865 770 JUMP ~outgoingValues: [] destination: B17 -> B16  <||@
  Comment 865 block B16 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 865 728 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 865 730 NOP  <||@
  Comment 866 732 NOP  <||@
  Comment 867 734 NOP  <||@
  Comment 868 736 NOP  <||@
  Comment 869 738 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD  <||@
  Comment 874 block B18 null  <||@
  Comment 874 772 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 874 774 NOP  <||@
  Comment 875 776 NOP  <||@
  Comment 876 778 NOP  <||@
  Comment 877 780 JUMP ~outgoingValues: [] destination: B18 -> B22  <||@
  Comment 877 block B22 null  <||@
  Comment 877 832 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 877 834 NOP  <||@
  Comment 878 836 NOP  <||@
  Comment 879 838 NOP  <||@
  Comment 880 840 NOP  <||@
  Comment 881 842 NOP  <||@
  Comment 882 844 NOP  <||@
  Comment 883 846 NOP  <||@
  Comment 884 848 NOP  <||@
  Comment 885 850 rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 888 852 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 897 POLL_RETURN_FAR  <||@
  Comment 911 block B2 null  <||@
  Comment 911 52 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 911 54 NOP  <||@
  Comment 912 56 NOP  <||@
  Comment 913 58 NOP  <||@
  Comment 914 60 NOP  <||@
  Comment 915 62 NOP  <||@
  Comment 916 64 NOP  <||@
  Comment 917 66 NOP  <||@
  Comment 918 68 NOP  <||@
  Comment 919 70 NOP  <||@
  Comment 920 72 NOP  <||@
  Comment 921 74 r9|QWORD = MOVSXD value: r11|DWORD size: QWORD  <||@
  Comment 924 76 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 929 78 rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD  <||@
  Comment 932 80 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 935 82 r9|QWORD = DEC value: r9|QWORD size: QWORD  <||@
  Comment 938 84 rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 941 86 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 950 block B3 null  <||@
  Comment 950 88 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 950 90 NOP  <||@
  Comment 951 92 NOP  <||@
  Comment 952 94 NOP  <||@
  Comment 953 96 NOP  <||@
  Comment 954 98 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 963 block B4 null  <||@
  Comment 963 100 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 963 102 NOP  <||@
  Comment 964 104 NOP  <||@
  Comment 965 106 NOP  <||@
  Comment 966 108 JUMP ~outgoingValues: [] destination: B4 -> B8  <||@
  Comment 971 block B21 null  <||@
  Comment 971 820 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 971 822 NOP  <||@
  Comment 972 824 NOP  <||@
  Comment 973 826 NOP  <||@
  Comment 974 828 r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD  <||@
  Comment 977 830 JUMP ~outgoingValues: [] destination: B21 -> B22  <||@
  Comment 979 block B6 null  <||@
  Comment 979 126 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 979 128 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 982 130 NOP  <||@
  Comment 983 132 NOP  <||@
  Comment 984 134 NOP  <||@
  Comment 985 136 r9|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 992 138 r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 998 140 JUMP ~outgoingValues: [] destination: B6 -> B20  <||@
  Comment 998 block B20 null  <||@
  Comment 998 798 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 998 800 NOP  <||@
  Comment 999 802 NOP  <||@
  Comment 1000 804 NOP  <||@
  Comment 1001 806 NOP  <||@
  Comment 1002 808 NOP  <||@
  Comment 1003 810 NOP  <||@
  Comment 1004 812 NOP  <||@
  Comment 1005 814 MOV (x: [r15|QWORD + 1156], y: r11|DWORD) size: DWORD  <||@
  Comment 1012 816 MOV (x: [r15|QWORD + 1168], y: r9|QWORD) size: QWORD  <||@
  Comment 1019 818 DEOPT info [bci:0]  <||@
  Comment 1019 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1024 [r10:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |r10|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 1032 block B19 null  <||@
  Comment 1032 782 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1032 784 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1035 786 NOP  <||@
  Comment 1036 788 NOP  <||@
  Comment 1037 790 NOP  <||@
  Comment 1038 792 r9|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1045 794 r11|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5]  <||@
  Comment 1051 796 JUMP ~outgoingValues: [] destination: B19 -> B20  <||@
  Comment 1053 block B5 null  <||@
  Comment 1053 110 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1053 112 r10|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1056 114 NOP  <||@
  Comment 1057 116 NOP  <||@
  Comment 1058 118 NOP  <||@
  Comment 1059 120 r9|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 1066 122 r11|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 1072 124 JUMP ~outgoingValues: [] destination: B5 -> B20  <||@
  Comment 1079 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 1104 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 1132 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1137 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 1145 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 1145 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 1151 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 1151 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
