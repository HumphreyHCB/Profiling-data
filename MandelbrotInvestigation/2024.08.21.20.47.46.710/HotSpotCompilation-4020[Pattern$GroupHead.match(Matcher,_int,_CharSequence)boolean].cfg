begin_compilation
  name " HotSpotCompilation-4020[java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-4020[java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence)]"
  date 1724269743885
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a149 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a149  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$GroupHead
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v159 ?16 ?120 v162 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v158 ?16 ?120 v68 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v55 v68 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v68 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_1
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4967
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v168 a149 i150 v153 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@~|@floating>@ <|@
tid v158 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a149 a155 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a149 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: int[-5899|0xffffffffffffe8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
stamp: n# int[]
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v158 
lastLocationAccess: - 
=== Succesors ===
next: i150 
=== Usages ===
a28 v160 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v158 lastLocationAccess: - #next: i150  <|@  <|@
f <@~|@floating>@ <|@
tid v160 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a149 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a149  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i150 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-8459|0xffffffffffffdef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v160 
lastLocationAccess: - 
=== Succesors ===
next: i151 
=== Usages ===
v48 
=== Predecessor ===
a149 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v160 lastLocationAccess: - #next: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i151 i157 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i151 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v159 
lastLocationAccess: - 
=== Succesors ===
next: v107 
=== Usages ===
v48 j86 
=== Predecessor ===
i150 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v159 lastLocationAccess: - #next: v107  <|@  <|@
f <@~|@floating>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i150 
=== Succesors ===
=== Usages ===
v107 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i151 y: i150  <|@  <|@
f <@*|@fixed>@ <|@
tid v107 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v48 
=== Succesors ===
trueSuccessor: v104 
falseSuccessor: v106 
=== Usages ===
=== Predecessor ===
i151 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v48 #trueSuccessor: v104 #falseSuccessor: v106  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v104 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
stamp: void
=== Inputs ===
=== Succesors ===
next: a152 
=== Usages ===
v55 
=== Predecessor ===
v107 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a152  <|@  <|@
f <@~|@floating>@ <|@
tid v162 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a152 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a152 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v162 
lastLocationAccess: - 
=== Succesors ===
next: v153 
=== Usages ===
a58 v167 
=== Predecessor ===
v104 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v162 lastLocationAccess: - #next: v153  <|@  <|@
f <@~|@floating>@ <|@
tid v167 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a152 
=== Succesors ===
=== Usages ===
v153 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a152  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v153 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-15371|0xffffffffffffc3f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v167 
lastLocationAccess: - 
=== Succesors ===
next: i154 
=== Usages ===
v148 
=== Predecessor ===
a152 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v167 lastLocationAccess: - #next: i154  <|@  <|@
f <@~|@floating>@ <|@
tid a28 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a149 
=== Succesors ===
=== Usages ===
v161 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a149  <|@  <|@
f <@~|@floating>@ <|@
tid j86 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i151 
=== Succesors ===
=== Usages ===
v161 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v161 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a28 
index: j86 
=== Succesors ===
=== Usages ===
v55 i154 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a28 index: j86  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i154 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v161 
lastLocationAccess: - 
=== Succesors ===
next: v55 
=== Usages ===
?120 ?16 v84 
=== Predecessor ===
v153 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v161 lastLocationAccess: - #next: v55  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v55 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v104 
address: v161 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v65 
=== Usages ===
=== Predecessor ===
i154 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v104 address: v161 lastLocationAccess: - value: i3 stateAfter: - #next: v65  <|@  <|@
f <@~|@floating>@ <|@
tid v148 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v153 
=== Succesors ===
=== Usages ===
v163 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v153  <|@  <|@
f <@~|@floating>@ <|@
tid v163 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v148 
index: - 
=== Succesors ===
=== Usages ===
v65 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v148 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v65 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v163 
lastLocationAccess: - 
=== Succesors ===
next: j67 
=== Usages ===
v164 v68 
=== Predecessor ===
v55 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v163 lastLocationAccess: - #next: j67  <|@  <|@
f <@~|@floating>@ <|@
tid v164 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v65 
index: - 
=== Succesors ===
=== Usages ===
j67 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v65 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j67 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v164 
lastLocationAccess: - 
=== Succesors ===
next: i15 
=== Usages ===
v68 
=== Predecessor ===
v65 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v164 lastLocationAccess: - #next: i15  <|@  <|@
f <@~|@floating>@ <|@
tid a58 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a152 
=== Succesors ===
=== Usages ===
v68 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a152  <|@  <|@
tid v68 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j67 
metaspaceMethod: v65 
arguments: a58 a2 i3 a4 
=== Succesors ===
=== Usages ===
i15 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j67 metaspaceMethod: v65 arguments: a58 a2 i3 a4  <|@  <|@
tid ?120 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 - - i154 
=== Succesors ===
=== Usages ===
i15 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 - - i154  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i15 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v68 
stateDuring: ?120 
=== Succesors ===
next: a155 
=== Usages ===
?16 v21 
=== Predecessor ===
j67 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v68 stateDuring: ?120 #next: a155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a155 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v158 
lastLocationAccess: - 
=== Succesors ===
next: i156 
=== Usages ===
a70 v165 
=== Predecessor ===
i15 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v158 lastLocationAccess: - #next: i156  <|@  <|@
tid ?16 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i15 a1 a2 - - i154 
=== Succesors ===
=== Usages ===
v169 i156 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i15 a1 a2 - - i154  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a155 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-18699|0xffffffffffffb6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?16 
guard: - 
address: v165 
lastLocationAccess: - 
=== Succesors ===
next: i157 
=== Usages ===
v77 
=== Predecessor ===
a155 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?16 guard: - address: v165 lastLocationAccess: - #next: i157  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i157 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v159 
lastLocationAccess: - 
=== Succesors ===
next: v119 
=== Usages ===
j87 v77 
=== Predecessor ===
i156 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v159 lastLocationAccess: - #next: v119  <|@  <|@
f <@~|@floating>@ <|@
tid v77 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i157 
y: i156 
=== Succesors ===
=== Usages ===
v119 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i157 y: i156  <|@  <|@
f <@*|@fixed>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v77 
=== Succesors ===
trueSuccessor: v116 
falseSuccessor: v118 
=== Usages ===
=== Predecessor ===
i157 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v77 #trueSuccessor: v116 #falseSuccessor: v118  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v116 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: void
=== Inputs ===
=== Succesors ===
next: v84 
=== Usages ===
v84 
=== Predecessor ===
v119 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v84  <|@  <|@
f <@~|@floating>@ <|@
tid a70 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a155 
=== Succesors ===
=== Usages ===
v166 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a155  <|@  <|@
f <@~|@floating>@ <|@
tid j87 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i157 
=== Succesors ===
=== Usages ===
v166 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i157  <|@  <|@
f <@~|@floating>@ <|@
tid v166 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a70 
index: j87 
=== Succesors ===
=== Usages ===
v84 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a70 index: j87  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v84 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v116 
address: v166 
lastLocationAccess: - 
value: i154 
stateAfter: - 
=== Succesors ===
next: v21 
=== Usages ===
=== Predecessor ===
v116 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v116 address: v166 lastLocationAccess: - value: i154 stateAfter: - #next: v21  <|@  <|@
f <@*|@fixed>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 46]
stamp: void
=== Inputs ===
memoryMap: - 
result: i15 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v84 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i15  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: void
=== Inputs ===
=== Succesors ===
next: v169 
=== Usages ===
=== Predecessor ===
v119 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v169  <|@  <|@
f <@*|@fixed>@ <|@
tid v169 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 78
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?16 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v118 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?16  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v106 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
stamp: void
=== Inputs ===
=== Succesors ===
next: v168 
=== Usages ===
=== Predecessor ===
v107 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v168  <|@  <|@
f <@*|@fixed>@ <|@
tid v168 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 49
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?5 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v106 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?5  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a149 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a149  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$GroupHead
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v159 ?16 ?120 v162 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v158 ?16 ?120 v68 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v55 v68 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
result v3|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v68 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_1
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4967
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v168 a149 i150 v153 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@~|@floating>@ <|@
tid v158 <|@
result [v1|QWORD[.] + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a149 a155 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a149 <|@
result v4|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: int[-5899|0xffffffffffffe8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
stamp: n# int[]
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v158 
lastLocationAccess: - 
=== Succesors ===
next: i150 
=== Usages ===
a28 v160 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v158 lastLocationAccess: - #next: i150  <|@  <|@
f <@~|@floating>@ <|@
tid v160 <|@
result [v4|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a149 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a149  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i150 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-8459|0xffffffffffffdef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v160 
lastLocationAccess: - 
=== Succesors ===
next: i151 
=== Usages ===
v48 
=== Predecessor ===
a149 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v160 lastLocationAccess: - #next: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v159 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i151 i157 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i151 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v159 
lastLocationAccess: - 
=== Succesors ===
next: v107 
=== Usages ===
v48 j86 
=== Predecessor ===
i150 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v159 lastLocationAccess: - #next: v107  <|@  <|@
f <@~|@floating>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i150 
=== Succesors ===
=== Usages ===
v107 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i151 y: i150  <|@  <|@
f <@*|@fixed>@ <|@
tid v107 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v48 
=== Succesors ===
trueSuccessor: v104 
falseSuccessor: v106 
=== Usages ===
=== Predecessor ===
i151 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v48 #trueSuccessor: v104 #falseSuccessor: v106  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v104 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
stamp: void
=== Inputs ===
=== Succesors ===
next: a152 
=== Usages ===
v55 
=== Predecessor ===
v107 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a152  <|@  <|@
f <@~|@floating>@ <|@
tid v162 <|@
result [v0|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a152 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a152 <|@
result v7|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v162 
lastLocationAccess: - 
=== Succesors ===
next: v153 
=== Usages ===
a58 v167 
=== Predecessor ===
v104 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v162 lastLocationAccess: - #next: v153  <|@  <|@
f <@~|@floating>@ <|@
tid v167 <|@
result [v7|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a152 
=== Succesors ===
=== Usages ===
v153 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a152  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v153 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-15371|0xffffffffffffc3f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v167 
lastLocationAccess: - 
=== Succesors ===
next: i154 
=== Usages ===
v148 
=== Predecessor ===
a152 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v167 lastLocationAccess: - #next: i154  <|@  <|@
f <@~|@floating>@ <|@
tid a28 <|@
result v9|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a149 
=== Succesors ===
=== Usages ===
v161 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a149  <|@  <|@
f <@~|@floating>@ <|@
tid j86 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i151 
=== Succesors ===
=== Usages ===
v161 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v161 <|@
result [v9|QWORD[.] + v6|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a28 
index: j86 
=== Succesors ===
=== Usages ===
v55 i154 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a28 index: j86  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i154 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v161 
lastLocationAccess: - 
=== Succesors ===
next: v55 
=== Usages ===
?120 ?16 v84 
=== Predecessor ===
v153 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v161 lastLocationAccess: - #next: v55  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v55 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v104 
address: v161 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v65 
=== Usages ===
=== Predecessor ===
i154 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v104 address: v161 lastLocationAccess: - value: i3 stateAfter: - #next: v65  <|@  <|@
f <@~|@floating>@ <|@
tid v148 <|@
result v11|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v153 
=== Succesors ===
=== Usages ===
v163 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v153  <|@  <|@
f <@~|@floating>@ <|@
tid v163 <|@
result [v11|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v148 
index: - 
=== Succesors ===
=== Usages ===
v65 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v148 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v65 <|@
result v13|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v163 
lastLocationAccess: - 
=== Succesors ===
next: j67 
=== Usages ===
v164 v68 
=== Predecessor ===
v55 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v163 lastLocationAccess: - #next: j67  <|@  <|@
f <@~|@floating>@ <|@
tid v164 <|@
result [v13|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v65 
index: - 
=== Succesors ===
=== Usages ===
j67 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v65 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j67 <|@
result v14|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v164 
lastLocationAccess: - 
=== Succesors ===
next: i15 
=== Usages ===
v68 
=== Predecessor ===
v65 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v164 lastLocationAccess: - #next: i15  <|@  <|@
f <@~|@floating>@ <|@
tid a58 <|@
result v15|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a152 
=== Succesors ===
=== Usages ===
v68 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a152  <|@  <|@
tid v68 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j67 
metaspaceMethod: v65 
arguments: a58 a2 i3 a4 
=== Succesors ===
=== Usages ===
i15 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j67 metaspaceMethod: v65 arguments: a58 a2 i3 a4  <|@  <|@
tid ?120 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 - - i154 
=== Succesors ===
=== Usages ===
i15 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 - - i154  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i15 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v68 
stateDuring: ?120 
=== Succesors ===
next: a155 
=== Usages ===
?16 v21 
=== Predecessor ===
j67 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v68 stateDuring: ?120 #next: a155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a155 <|@
result v17|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v158 
lastLocationAccess: - 
=== Succesors ===
next: i156 
=== Usages ===
a70 v165 
=== Predecessor ===
i15 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v158 lastLocationAccess: - #next: i156  <|@  <|@
tid ?16 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i15 a1 a2 - - i154 
=== Succesors ===
=== Usages ===
v169 i156 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i15 a1 a2 - - i154  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
result [v17|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a155 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i156 <|@
result v18|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-18699|0xffffffffffffb6f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?16 
guard: - 
address: v165 
lastLocationAccess: - 
=== Succesors ===
next: i157 
=== Usages ===
v77 
=== Predecessor ===
a155 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?16 guard: - address: v165 lastLocationAccess: - #next: i157  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i157 <|@
result v19|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v159 
lastLocationAccess: - 
=== Succesors ===
next: v119 
=== Usages ===
j87 v77 
=== Predecessor ===
i156 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v159 lastLocationAccess: - #next: v119  <|@  <|@
f <@~|@floating>@ <|@
tid v77 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i157 
y: i156 
=== Succesors ===
=== Usages ===
v119 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i157 y: i156  <|@  <|@
f <@*|@fixed>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v77 
=== Succesors ===
trueSuccessor: v116 
falseSuccessor: v118 
=== Usages ===
=== Predecessor ===
i157 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v77 #trueSuccessor: v116 #falseSuccessor: v118  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v116 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: void
=== Inputs ===
=== Succesors ===
next: v84 
=== Usages ===
v84 
=== Predecessor ===
v119 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v84  <|@  <|@
f <@~|@floating>@ <|@
tid a70 <|@
result v20|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a155 
=== Succesors ===
=== Usages ===
v166 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a155  <|@  <|@
f <@~|@floating>@ <|@
tid j87 <|@
result v19|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i157 
=== Succesors ===
=== Usages ===
v166 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i157  <|@  <|@
f <@~|@floating>@ <|@
tid v166 <|@
result [v20|QWORD[.] + v19|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a70 
index: j87 
=== Succesors ===
=== Usages ===
v84 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a70 index: j87  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v84 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v116 
address: v166 
lastLocationAccess: - 
value: i154 
stateAfter: - 
=== Succesors ===
next: v21 
=== Usages ===
=== Predecessor ===
v116 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v116 address: v166 lastLocationAccess: - value: i154 stateAfter: - #next: v21  <|@  <|@
f <@*|@fixed>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4971) [bci: 46]
stamp: void
=== Inputs ===
memoryMap: - 
result: i15 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v84 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i15  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
stamp: void
=== Inputs ===
=== Succesors ===
next: v169 
=== Usages ===
=== Predecessor ===
v119 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v169  <|@  <|@
f <@*|@fixed>@ <|@
tid v169 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 78
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?16 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v118 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?16  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v106 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
stamp: void
=== Inputs ===
=== Succesors ===
next: v168 
=== Usages ===
=== Predecessor ===
v107 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v168  <|@  <|@
f <@*|@fixed>@ <|@
tid v168 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 49
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?5 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v106 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?5  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGTSlowdown"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  134  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  138  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  144  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  150  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  134  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  138  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  144  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  150  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v14|q [0, 1[[140, 144[[182, 184[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 36[[134, 143[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 34[[132, 143[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v13|q [0, 1[[138, 143[ "NoSpillStore"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 28[[142, 143[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v15|q [0, 32[[130, 143[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 38[[136, 143[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  v0|q QWORD "[v0|q]" v0|q rsi|- [32, 154[[186, 207[[208, 229[32 MustHaveRegister 44 MustHaveRegister 110 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|- [34, 154[[186, 207[[208, 229[34 MustHaveRegister 40 MustHaveRegister 132 ShouldHaveRegister 146 MustHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|- [36, 134[[186, 207[36 MustHaveRegister 118 MustHaveRegister 134 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[v3|q]" v3|q r8|- [38, 136[[186, 207[38 MustHaveRegister 136 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d -1 [40, 114[40 MustHaveRegister 42 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [42, 46[42 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d -1 [44, 118[44 MustHaveRegister 46 ShouldHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [110, 128[110 MustHaveRegister 112 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d -1 [112, 122[112 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q v4|d [114, 118[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[v10|d]" v10|d -1 [116, 180[[208, 229[116 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q v8|d [122, 124[122 MustHaveRegister 124 MustHaveRegister  "NoSpillStore"
  v12|q QWORD "[v12|q]" v12|q -1 [120, 123[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[v13|q]" v13|q -1 [124, 138[124 MustHaveRegister 126 MustHaveRegister 138 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[v14|q]" v14|q -1 [126, 140[126 MustHaveRegister 140 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[v15|q]" v15|q v7|d [128, 130[128 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d rax|d [144, 182[[208, 229[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[v17|d]" v17|d -1 [146, 178[146 MustHaveRegister 148 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[v18|d]" v18|d -1 [148, 152[148 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[v19|d]" v19|d -1 [150, 180[150 MustHaveRegister 152 ShouldHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[v20|q]" v20|q v17|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v14|q [0, 1[[140, 144[[182, 184[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 36[[134, 143[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 34[[132, 143[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v13|q [0, 1[[138, 143[ "NoSpillStore"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 28[[142, 143[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v15|q [0, 32[[130, 143[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 38[[136, 143[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [32, 129[32 MustHaveRegister 44 MustHaveRegister 110 MustHaveRegister  "OneSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [34, 131[34 MustHaveRegister 40 MustHaveRegister  "OneSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [36, 134[[186, 207[36 MustHaveRegister 118 MustHaveRegister 134 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[r8|q]" v3|q r8|- [38, 136[[186, 207[38 MustHaveRegister 136 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rbx|d]" v4|d -1 [40, 114[40 MustHaveRegister 42 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [42, 46[42 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r10|d]" v6|d -1 [44, 118[44 MustHaveRegister 46 ShouldHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rax|d]" v7|d -1 [110, 128[110 MustHaveRegister 112 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r11|d]" v8|d -1 [112, 122[112 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q v4|d [114, 118[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[r9|d]" v10|d -1 [116, 141[116 MustHaveRegister  "OneSpillStore"
  v11|q QWORD "[r11|q]" v11|q v8|d [122, 124[122 MustHaveRegister 124 MustHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q -1 [120, 123[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rbx|q]" v13|q -1 [124, 138[124 MustHaveRegister 126 MustHaveRegister 138 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[r10|q]" v14|q -1 [126, 140[126 MustHaveRegister 140 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q v7|d [128, 130[128 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[rax|d]" v16|d rax|d [144, 182[[208, 229[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r10|d]" v17|d -1 [146, 178[146 MustHaveRegister 148 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[r11|d]" v18|d -1 [148, 152[148 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r8|d]" v19|d -1 [150, 180[150 MustHaveRegister 152 ShouldHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[r10|q]" v20|q v17|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[vstack:1|q]" v0|q v0|q [129, 141[ "OneSpillStore"
  v22|q QWORD "[rdi|q]" v1|q v1|q [131, 141[132 ShouldHaveRegister  "OneSpillStore"
  v23|d DWORD "[vstack:2|d]" v10|d v10|d [141, 154[ "OneSpillStore"
  v24|q QWORD "[vstack:1|q]" v0|q v0|q [141, 149[ "OneSpillStore"
  v25|q QWORD "[vstack:0|q]" v1|q v1|q [141, 145[ "OneSpillStore"
  v26|q QWORD "[rdx|q]" v1|q v1|q [145, 154[[186, 207[[208, 229[146 MustHaveRegister  "OneSpillStore"
  v27|q QWORD "[rsi|q]" v0|q v0|q [149, 154[[186, 207[[208, 229[150 MustHaveRegister  "OneSpillStore"
  v28|d DWORD "[r9|d]" v10|d v10|d [154, 180[[208, 229[180 MustHaveRegister  "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  134  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  138  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVE input: v10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[.] = STACKMOVE (input: v21|QWORD[.], ~backupSlot: vstack:3|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE input: v22|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  144  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = MOVE input: v25|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE input: v24|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v14|q [0, 1[[140, 144[[182, 184[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 36[[134, 143[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 34[[132, 143[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v13|q [0, 1[[138, 143[ "NoSpillStore"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 28[[142, 143[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v15|q [0, 32[[130, 143[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 38[[136, 143[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [32, 129[32 MustHaveRegister 44 MustHaveRegister 110 MustHaveRegister  "OneSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [34, 131[34 MustHaveRegister 40 MustHaveRegister  "OneSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [36, 134[[186, 207[36 MustHaveRegister 118 MustHaveRegister 134 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[r8|q]" v3|q r8|- [38, 136[[186, 207[38 MustHaveRegister 136 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rbx|d]" v4|d -1 [40, 114[40 MustHaveRegister 42 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [42, 46[42 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r10|d]" v6|d -1 [44, 118[44 MustHaveRegister 46 ShouldHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rax|d]" v7|d -1 [110, 128[110 MustHaveRegister 112 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r11|d]" v8|d -1 [112, 122[112 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q v4|d [114, 118[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[r9|d]" v10|d -1 [116, 141[116 MustHaveRegister  "OneSpillStore"
  v11|q QWORD "[r11|q]" v11|q v8|d [122, 124[122 MustHaveRegister 124 MustHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q -1 [120, 123[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rbx|q]" v13|q -1 [124, 138[124 MustHaveRegister 126 MustHaveRegister 138 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[r10|q]" v14|q -1 [126, 140[126 MustHaveRegister 140 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q v7|d [128, 130[128 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[rax|d]" v16|d rax|d [144, 182[[208, 229[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r10|d]" v17|d -1 [146, 178[146 MustHaveRegister 148 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[r11|d]" v18|d -1 [148, 152[148 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r8|d]" v19|d -1 [150, 180[150 MustHaveRegister 152 ShouldHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[r10|q]" v20|q v17|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[vstack:1|q]" v0|q v0|q [129, 141[ "OneSpillStore"
  v22|q QWORD "[rdi|q]" v1|q v1|q [131, 141[132 ShouldHaveRegister  "OneSpillStore"
  v23|d DWORD "[vstack:2|d]" v10|d v10|d [141, 154[ "OneSpillStore"
  v24|q QWORD "[vstack:1|q]" v0|q v0|q [141, 149[ "OneSpillStore"
  v25|q QWORD "[vstack:0|q]" v1|q v1|q [141, 145[ "OneSpillStore"
  v26|q QWORD "[rdx|q]" v1|q v1|q [145, 154[[186, 207[[208, 229[146 MustHaveRegister  "OneSpillStore"
  v27|q QWORD "[rsi|q]" v0|q v0|q [149, 154[[186, 207[[208, 229[150 MustHaveRegister  "OneSpillStore"
  v28|d DWORD "[r9|d]" v10|d v10|d [154, 180[[208, 229[180 MustHaveRegister  "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  134  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  138  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVE input: v10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[.] = STACKMOVE (input: v21|QWORD[.], ~backupSlot: vstack:3|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE input: v22|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  144  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = MOVE input: v25|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE input: v24|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v14|q [0, 1[[140, 144[[182, 184[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 36[[134, 143[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 34[[132, 143[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v13|q [0, 1[[138, 143[ "NoSpillStore"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 28[[142, 143[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v15|q [0, 32[[130, 143[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 38[[136, 143[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[142, 143[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [32, 129[32 MustHaveRegister 44 MustHaveRegister 110 MustHaveRegister  "OneSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [34, 131[34 MustHaveRegister 40 MustHaveRegister  "OneSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [36, 134[[186, 207[36 MustHaveRegister 118 MustHaveRegister 134 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[r8|q]" v3|q r8|- [38, 136[[186, 207[38 MustHaveRegister 136 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rbx|d]" v4|d -1 [40, 114[40 MustHaveRegister 42 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [42, 46[42 MustHaveRegister 46 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r10|d]" v6|d -1 [44, 118[44 MustHaveRegister 46 ShouldHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rax|d]" v7|d -1 [110, 128[110 MustHaveRegister 112 MustHaveRegister 128 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r11|d]" v8|d -1 [112, 122[112 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q v4|d [114, 118[114 MustHaveRegister 116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[r9|d]" v10|d -1 [116, 141[116 MustHaveRegister  "OneSpillStore"
  v11|q QWORD "[r11|q]" v11|q v8|d [122, 124[122 MustHaveRegister 124 MustHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q -1 [120, 123[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rbx|q]" v13|q -1 [124, 138[124 MustHaveRegister 126 MustHaveRegister 138 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[r10|q]" v14|q -1 [126, 140[126 MustHaveRegister 140 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q v7|d [128, 130[128 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[rax|d]" v16|d rax|d [144, 182[[208, 229[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r10|d]" v17|d -1 [146, 178[146 MustHaveRegister 148 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[r11|d]" v18|d -1 [148, 152[148 MustHaveRegister 152 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r8|d]" v19|d -1 [150, 180[150 MustHaveRegister 152 ShouldHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[r10|q]" v20|q v17|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v21|q QWORD "[vstack:1|q]" v0|q v0|q [129, 141[ "OneSpillStore"
  v22|q QWORD "[rdi|q]" v1|q v1|q [131, 141[132 ShouldHaveRegister  "OneSpillStore"
  v23|d DWORD "[vstack:2|d]" v10|d v10|d [141, 154[ "OneSpillStore"
  v24|q QWORD "[vstack:1|q]" v0|q v0|q [141, 149[ "OneSpillStore"
  v25|q QWORD "[vstack:0|q]" v1|q v1|q [141, 145[ "OneSpillStore"
  v26|q QWORD "[rdx|q]" v1|q v1|q [145, 154[[186, 207[[208, 229[146 MustHaveRegister  "OneSpillStore"
  v27|q QWORD "[rsi|q]" v0|q v0|q [149, 154[[186, 207[[208, 229[150 MustHaveRegister  "OneSpillStore"
  v28|d DWORD "[r9|d]" v10|d v10|d [154, 180[[208, 229[180 MustHaveRegister  "OneSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  134  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  138  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVE input: v10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[.] = STACKMOVE (input: v21|QWORD[.], ~backupSlot: vstack:3|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE input: v22|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  144  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = MOVE input: v25|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE input: v24|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: v23|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: v23|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   34  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   38  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v4|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v5|DWORD = MOV input: [v4|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction v6|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction v7|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction v9|QWORD[.] = UNCOMPRESSPOINTER (input: v4|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction v10|DWORD = MOV input: [v9|QWORD[.] + v6|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [v9|QWORD[.] + v6|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction v12|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction v11|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v12|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction v13|QWORD = MOV input: [v11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction v14|QWORD = MOV input: [v13|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction v15|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: v15|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  134  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  138  <|@ instruction rbx|QWORD = MOVE input: v13|QWORD moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: v14|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVE input: v10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v24|QWORD[.] = STACKMOVE (input: v21|QWORD[.], ~backupSlot: vstack:3|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v25|QWORD[.] = MOVE input: v22|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  144  <|@ instruction v16|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = MOVE input: v25|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction v17|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction v18|DWORD = MOV input: [v17|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = MOVE input: v24|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction v19|DWORD = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: v18|DWORD, y: v19|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: v23|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v17|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [v20|QWORD[.] + v19|DWORD * 4 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = MOVE input: v16|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: v23|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v16|DWORD 
locals: v0|QWORD[.] v1|QWORD[.] - - v10|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:1|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:0|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:1|QWORD[.] vstack:0|QWORD[.] - - vstack:2|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:1|QWORD[.] rdx|QWORD[.] - - vstack:2|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   44  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  114  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  116  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  118  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  120  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  122  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  124  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  126  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  128  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction vstack:1|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE input: r9|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:0|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:1|QWORD[.] vstack:0|QWORD[.] - - vstack:2|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  146  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  148  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:1|QWORD[.] rdx|QWORD[.] - - vstack:2|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  154  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  180  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  186  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  204  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  206  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  208  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  226  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  228  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction vstack:1|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  128  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction vstack:2|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction vstack:0|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:1|QWORD[.] vstack:0|QWORD[.] - - vstack:2|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:1|QWORD[.] rdx|QWORD[.] - - vstack:2|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|q QWORD "[vstack:0|q]" vstack:0|q -1 [134, 138[ "NOT_SUPPORTED"
  vstack:1|q QWORD "[vstack:1|q]" vstack:1|q -1 [122, 144[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[vstack:2|d]" vstack:2|d -1 [132, 184[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|q QWORD "[stack:48|q]" vstack:0|q -1 [134, 138[ "NOT_SUPPORTED"
  vstack:1|q QWORD "[stack:40|q]" vstack:1|q -1 [122, 144[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[stack:28|d]" vstack:2|d -1 [132, 184[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  128  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  128  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  128  <|@ instruction rdx|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@reference-map: [stack:0, stack:8]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [rdx:0, r10:0, stack:8]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@reference-map: [rdx:0, rsi:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction NOP <|@ <|@
      nr   28  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD <|@ <|@
      nr   32  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   34  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B3" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr  104  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  106  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  108  <|@ instruction r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  112  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  114  <|@ instruction r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD <|@ <|@
      nr  118  <|@ instruction r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  120  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  122  <|@ instruction stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  124  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  126  <|@ instruction rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  130  <|@ instruction rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD <|@ <|@
      nr  132  <|@ instruction stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD <|@ <|@
      nr  134  <|@ instruction stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  136  <|@ st <@st|@reference-map: [stack:0, stack:8]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:40|QWORD[.] stack:48|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28] <|@ <|@
      nr  138  <|@ instruction rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  142  <|@ st <@st|@reference-map: [rdx:0, r10:0, stack:8]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:40|QWORD[.] rdx|QWORD[.] - - stack:28|DWORD - 
>@ <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31] <|@ <|@
      nr  144  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr  146  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  150  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  152  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  206  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD <|@ <|@
      nr  224  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  226  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  182  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  184  <|@ instruction r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD <|@ <|@
      nr  202  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  204  <|@ st <@st|@reference-map: [rdx:0, rsi:0]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: rsi|QWORD[.] rdx|QWORD[.] - - r9|DWORD - 
>@ <|@ instruction DEOPT info [bci:31] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_1       
     1: getfield      #2          // java.util.regex.Matcher.locals:int[]
     4: aload_0       
     5: getfield      #1          // localIndex:int
     8: iaload        
     9: istore        4
    11: aload_1       
    12: getfield      #2          // java.util.regex.Matcher.locals:int[]
    15: aload_0       
    16: getfield      #1          // localIndex:int
    19: iload_2       
    20: iastore       
    21: aload_0       
    22: getfield      #3          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    25: aload_1       
    26: iload_2       
    27: aload_3       
    28: invokevirtual #4          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    31: istore        5
    33: aload_1       
    34: getfield      #2          // java.util.regex.Matcher.locals:int[]
    37: aload_0       
    38: getfield      #1          // localIndex:int
    41: iload         4
    43: iastore       
    44: iload         5
    46: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc0000002b787f00004d03d44d33e4493bc20f85e3ffffff66669089842400c0feff4883ec289041817f20000000000f85490100009090909090909090909090909048896c24208b5a408b04dd0c000000448b5610413bc20f86c70000009090909090909090909090909090909090909090909090909090909090908b460c448b1cc50800000048c1e303468b4c931042894c931048bb0000002b787f00004e8d1c1b498b9bf00100004c8b534048c1e0034889742408488bf0488bfa498bc244894c241448893c24ffd00f1f840000000000488b1424448b5240468b1cd50c000000488b742408448b4610453bd80f865a000000448b4c2414909090909090909090909049c1e20347894c8210488b6c24204883c428493ba7500400000f876a000000c39090909090909041c78784040000e5ceffff49c7879004000000000000e8000000000f1f840000000000448b4c24149090909090909041c78784040000e5b1ffff49c7879004000000000000e8000000000f1f84000000000048896c2420e800000000e9a8fefffff4488d0d82ffffff49898f68040000e95afefffff441c78784040000f5e8ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5deffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5c3ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5b6ffff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 NOP  <||@
  Comment 71 28 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 76 30 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD  <||@
  Comment 76 32 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0]  <||@
  Comment 76 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 76 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 79 34 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 79 [rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 79 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 86 36 r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 90 38 CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD  <||@
  Comment 99 block B1 null  <||@
  Comment 99 40 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 99 42 NOP  <||@
  Comment 100 44 NOP  <||@
  Comment 101 46 NOP  <||@
  Comment 102 48 NOP  <||@
  Comment 103 50 NOP  <||@
  Comment 104 52 NOP  <||@
  Comment 105 54 NOP  <||@
  Comment 106 56 NOP  <||@
  Comment 107 58 NOP  <||@
  Comment 108 60 NOP  <||@
  Comment 109 62 NOP  <||@
  Comment 110 64 NOP  <||@
  Comment 111 66 NOP  <||@
  Comment 112 68 NOP  <||@
  Comment 113 70 NOP  <||@
  Comment 114 72 NOP  <||@
  Comment 115 74 NOP  <||@
  Comment 116 76 NOP  <||@
  Comment 117 78 NOP  <||@
  Comment 118 80 NOP  <||@
  Comment 119 82 NOP  <||@
  Comment 120 84 NOP  <||@
  Comment 121 86 NOP  <||@
  Comment 122 88 NOP  <||@
  Comment 123 90 NOP  <||@
  Comment 124 92 NOP  <||@
  Comment 125 94 NOP  <||@
  Comment 126 96 NOP  <||@
  Comment 127 98 NOP  <||@
  Comment 128 100 NOP  <||@
  Comment 129 102 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 132 104 r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 132 [rax:0, rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 132 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 140 106 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3  <||@
  Comment 144 108 r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD  <||@
  Comment 149 110 MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 154 112 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 164 114 r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0  <||@
  Comment 168 116 rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD  <||@
  Comment 175 118 r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 179 120 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3  <||@
  Comment 183 122 stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 188 124 rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD  <||@
  Comment 191 126 rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 194 130 rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD  <||@
  Comment 197 132 stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD  <||@
  Comment 202 134 stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD  <||@
  Comment 206 136 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28]  <||@
  Comment 206 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 206 INLINE_INVOKE  <||@
  Comment 208 [stack:0, stack:8]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:40|QWORD[.]  |stack:48|QWORD[.]  |-  |-  |stack:28|DWORD  |-   <||@
  Comment 216 138 rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD  <||@
  Comment 220 140 r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 224 142 r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31]  <||@
  Comment 224 [rdx:0, r10:0, stack:8]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:40|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:28|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |    <||@
  Comment 224 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 232 144 rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD  <||@
  Comment 237 146 r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 241 148 CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD  <||@
  Comment 250 block B2 null  <||@
  Comment 250 150 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 250 152 r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 255 154 NOP  <||@
  Comment 256 156 NOP  <||@
  Comment 257 158 NOP  <||@
  Comment 258 160 NOP  <||@
  Comment 259 162 NOP  <||@
  Comment 260 164 NOP  <||@
  Comment 261 166 NOP  <||@
  Comment 262 168 NOP  <||@
  Comment 263 170 NOP  <||@
  Comment 264 172 NOP  <||@
  Comment 265 174 NOP  <||@
  Comment 266 176 r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3  <||@
  Comment 270 178 MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD  <||@
  Comment 275 180 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 284 POLL_RETURN_FAR  <||@
  Comment 298 block B4 null  <||@
  Comment 298 206 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 298 208 NOP  <||@
  Comment 299 210 NOP  <||@
  Comment 300 212 NOP  <||@
  Comment 301 214 NOP  <||@
  Comment 302 216 NOP  <||@
  Comment 303 218 NOP  <||@
  Comment 304 220 NOP  <||@
  Comment 305 222 MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD  <||@
  Comment 316 224 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 327 226 DEOPT info [bci:0]  <||@
  Comment 327 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 332 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 340 block B3 null  <||@
  Comment 340 182 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 340 184 r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 345 186 NOP  <||@
  Comment 346 188 NOP  <||@
  Comment 347 190 NOP  <||@
  Comment 348 192 NOP  <||@
  Comment 349 194 NOP  <||@
  Comment 350 196 NOP  <||@
  Comment 351 198 NOP  <||@
  Comment 352 200 MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD  <||@
  Comment 363 202 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 374 204 DEOPT info [bci:31]  <||@
  Comment 374 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 379 [rdx:0, rsi:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1             |2  |3  |4         |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r9|DWORD  |- 
     stack:   |rax|DWORD     |              |   |   |          |    <||@
  Comment 392 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 417 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 445 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 450 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 480 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 485 [rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 515 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 520 [rax:0, rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 550 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 555 [rdx:0, r10:0, stack:8]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:40|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:28|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |    <||@
  Comment 563 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 563 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 569 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 569 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-4020[java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-4020[java.util.regex.Pattern$GroupHead.match(Matcher, int, CharSequence)]"
  date 1724269743999
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f789ae5cf20 448b560849bc0000002b787f00004d03d44d33e4493bc20f85438192fe66669089842400c0feff4883ec289041817f20000000000f85490100009090909090909090909090909048896c24208b5a408b04dd0c000000448b5610413bc20f86c70000009090909090909090909090909090909090909090909090909090909090908b460c448b1cc50800000048c1e303468b4c931042894c931048bb0000002b787f00004e8d1c1b498b9bf00100004c8b534048c1e0034889742408488bf0488bfa498bc244894c241448893c24ffd00f1f840000000000488b1424448b5240468b1cd50c000000488b742408448b4610453bd80f865a000000448b4c2414909090909090909090909049c1e20347894c8210488b6c24204883c428493ba7500400000f876a000000c39090909090909041c78784040000e5ceffff49c7879004000000000000e80ee192fe0f1f840000000000448b4c24149090909090909041c78784040000e5b1ffff49c7879004000000000000e8dfe092fe0f1f84000000000048896c2420e873e190fee9a8fefffff4488d0d82ffffff49898f68040000e93aef92fef441c78784040000f5e8ffff49c7879004000000000000e898e092fe0f1f84000000000041c78784040000f5deffff49c7879004000000000000e875e092fe0f1f84000000000041c78784040000f5c3ffff49c7879004000000000000e852e092fe0f1f84000000000041c78784040000f5b6ffff49c7879004000000000000e82fe092fe0f1f840000000000e8a881a6fef4e8c2dd92fef4f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 NOP  <||@
  Comment 71 28 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 76 30 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4ec20bba slotKind: QWORD  <||@
  Comment 76 32 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0]  <||@
  Comment 76 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 76 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 79 34 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 79 [rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 79 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 86 36 r10|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 90 38 CMPBRANCH (x: rax|DWORD, y: r10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B4 size: DWORD  <||@
  Comment 99 block B1 null  <||@
  Comment 99 40 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 99 42 NOP  <||@
  Comment 100 44 NOP  <||@
  Comment 101 46 NOP  <||@
  Comment 102 48 NOP  <||@
  Comment 103 50 NOP  <||@
  Comment 104 52 NOP  <||@
  Comment 105 54 NOP  <||@
  Comment 106 56 NOP  <||@
  Comment 107 58 NOP  <||@
  Comment 108 60 NOP  <||@
  Comment 109 62 NOP  <||@
  Comment 110 64 NOP  <||@
  Comment 111 66 NOP  <||@
  Comment 112 68 NOP  <||@
  Comment 113 70 NOP  <||@
  Comment 114 72 NOP  <||@
  Comment 115 74 NOP  <||@
  Comment 116 76 NOP  <||@
  Comment 117 78 NOP  <||@
  Comment 118 80 NOP  <||@
  Comment 119 82 NOP  <||@
  Comment 120 84 NOP  <||@
  Comment 121 86 NOP  <||@
  Comment 122 88 NOP  <||@
  Comment 123 90 NOP  <||@
  Comment 124 92 NOP  <||@
  Comment 125 94 NOP  <||@
  Comment 126 96 NOP  <||@
  Comment 127 98 NOP  <||@
  Comment 128 100 NOP  <||@
  Comment 129 102 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 132 104 r11|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 132 [rax:0, rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 132 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 140 106 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3  <||@
  Comment 144 108 r9|DWORD = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD  <||@
  Comment 149 110 MOV (x: [rbx|QWORD[.] + r10|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 154 112 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 164 114 r11|QWORD = UNCOMPRESSPOINTER (input: r11|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 140154094223360 shift: 0  <||@
  Comment 168 116 rbx|QWORD = MOV input: [r11|QWORD + 496] size: QWORD  <||@
  Comment 175 118 r10|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 179 120 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3  <||@
  Comment 183 122 stack:40|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 188 124 rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD  <||@
  Comment 191 126 rdi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 194 130 rax|QWORD = MOVE input: r10|QWORD moveKind: QWORD  <||@
  Comment 197 132 stack:28|DWORD = MOVE input: r9|DWORD moveKind: DWORD  <||@
  Comment 202 134 stack:48|QWORD[.] = MOVE input: rdi|QWORD[.] moveKind: QWORD  <||@
  Comment 206 136 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28]  <||@
  Comment 206 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 206 INLINE_INVOKE  <||@
  Comment 208 [stack:0, stack:8]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:40|QWORD[.]  |stack:48|QWORD[.]  |-  |-  |stack:28|DWORD  |-   <||@
  Comment 216 138 rdx|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD  <||@
  Comment 220 140 r10|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 224 142 r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:31]  <||@
  Comment 224 [rdx:0, r10:0, stack:8]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:40|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:28|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |    <||@
  Comment 224 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 232 144 rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD  <||@
  Comment 237 146 r8|DWORD = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 241 148 CMPBRANCH (x: r11|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B3 size: DWORD  <||@
  Comment 250 block B2 null  <||@
  Comment 250 150 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 250 152 r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 255 154 NOP  <||@
  Comment 256 156 NOP  <||@
  Comment 257 158 NOP  <||@
  Comment 258 160 NOP  <||@
  Comment 259 162 NOP  <||@
  Comment 260 164 NOP  <||@
  Comment 261 166 NOP  <||@
  Comment 262 168 NOP  <||@
  Comment 263 170 NOP  <||@
  Comment 264 172 NOP  <||@
  Comment 265 174 NOP  <||@
  Comment 266 176 r10|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@d630ff2 encoding: base: 0 shift: 3  <||@
  Comment 270 178 MOV (x: [r10|QWORD[.] + r8|DWORD * 4 + 16], y: r9|DWORD) size: DWORD  <||@
  Comment 275 180 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 284 POLL_RETURN_FAR  <||@
  Comment 298 block B4 null  <||@
  Comment 298 206 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 298 208 NOP  <||@
  Comment 299 210 NOP  <||@
  Comment 300 212 NOP  <||@
  Comment 301 214 NOP  <||@
  Comment 302 216 NOP  <||@
  Comment 303 218 NOP  <||@
  Comment 304 220 NOP  <||@
  Comment 305 222 MOV x: [r15|QWORD + 1156] y: -12571 size: DWORD  <||@
  Comment 316 224 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 327 226 DEOPT info [bci:0]  <||@
  Comment 327 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 332 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 340 block B3 null  <||@
  Comment 340 182 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 340 184 r9|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 345 186 NOP  <||@
  Comment 346 188 NOP  <||@
  Comment 347 190 NOP  <||@
  Comment 348 192 NOP  <||@
  Comment 349 194 NOP  <||@
  Comment 350 196 NOP  <||@
  Comment 351 198 NOP  <||@
  Comment 352 200 MOV x: [r15|QWORD + 1156] y: -19995 size: DWORD  <||@
  Comment 363 202 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 374 204 DEOPT info [bci:31]  <||@
  Comment 374 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 379 [rdx:0, rsi:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1             |2  |3  |4         |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |-  |-  |r9|DWORD  |- 
     stack:   |rax|DWORD     |              |   |   |          |    <||@
  Comment 392 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 417 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 445 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 450 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 480 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 485 [rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 515 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 520 [rax:0, rdx:0, rbx:0, rsi:0, r8:0]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4  |5 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-  |-   <||@
  Comment 550 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 555 [rdx:0, r10:0, stack:8]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:40|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:28|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |    <||@
  Comment 563 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 563 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 569 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 569 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
